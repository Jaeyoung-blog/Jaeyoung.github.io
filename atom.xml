<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jaeyoung&#39;s Blog</title>
  
  <subtitle>Jaeyoung&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jaeyoung-blog.github.io/"/>
  <updated>2020-03-23T00:13:37.659Z</updated>
  <id>https://jaeyoung-blog.github.io/</id>
  
  <author>
    <name>Lee Jaeyoung</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>13. Policy Gradient</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/13-Policy-Gradient/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/13-Policy-Gradient/</id>
    <published>2020-03-23T00:12:08.000Z</published>
    <updated>2020-03-23T00:13:37.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Policy-Gradient"><a href="#Policy-Gradient" class="headerlink" title="Policy Gradient"></a>Policy Gradient</h1><p>Policy gradient 방법은, policy를 parameterized function으로 모델링해서, state, action feature vector로부터 바로 policy를 추론하는 방법이다.</p><p>즉, state, action feature로부터 action value function을 추론하고 그로부터 policy를 계산하는 이전 방법에서, action value function을 거치지 않고 바로 policy를 추론하는 것이다. </p><p>차이점은, 이전 방법에서는 action value function을 parameterize했지만, policy gradient에서는 policy를 parameterize한다. 이때, policy funciton의 parameter는 $\theta$로 표기한다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200309091753523.png" alt="image-20200309091753523"></p><h2 id="Softmax-Policies"><a href="#Softmax-Policies" class="headerlink" title="Softmax Policies"></a>Softmax Policies</h2><p>Policy는 반드시 확률분포여야 한다. 즉, 다음이 성립해야 한다.<br>$$<br>\sum_a \pi(a|s, \theta)=1 ~ \text{ for all } s<br>$$<br>즉, 각 state에서, action들의 확률들의 합은 1이어야 한다. 또한, 각 확률은 [0, 1] 범위에 있어야 한다.</p><p>Action value function에서는 linear function을 이용했지만, policy function은 위와 같은 이유로 linear function의 결과값을 그대로 이용할 수 없다. 그 대신, linear function의 결과값에 softmax 함수를 적용해 준다.<br>$$<br>\pi(a|s, \theta) = \text{softmax}(h(s, a, \theta)) = \frac{e^{h(s, a, \theta)}}{\sum_{a’} e^{h(s, a’, \theta)}}<br>$$<br>이때, $h(s, a, \theta)$는 state $s$와 action $a$를 입력으로 받고 action preference를 출력하는 linear 함수(마지막 레이어가 linear이면 linear하다고 하자)이다.</p><p>이제, action preference는 linear해도 된다. action preference가 심지어 음수가 나와도 exponential에 의해 양수임이 보장되며, 분모의 normalization으로 인해 [0, 1]사이 값으로 유지됨이 보장되며, 합이 1임이 보장된다.</p><h3 id="Action-Preference-vs-Action-Value"><a href="#Action-Preference-vs-Action-Value" class="headerlink" title="Action Preference vs Action Value"></a>Action Preference vs Action Value</h3><p>Action preference는 action value와는 다르다. Action value는 미래 expected return의 합으로 이루어져 있으나, action preference는 그러한 것을 고려하지 않는다.</p><p>또한, action value는 가장 높은 값을 가지는 action만이 높은 확률을 갖고($1 - \epsilon$), 나머지 action은 $\epsilon/N_a$값을 가진다($N_a$는 액션 개수). 즉, 높은 action value 값을 가지는 action이외의 action은 모두 작은 확률로 같은 확률을 가진다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200309092901785.png" alt="image-20200309092901785"></p><p>하지만, action preference는 그 값이 크고 작음의 순서가 유지가 된다. Softmax 함수는 preference가 클수록 큰 확률을 가지게 하며, 작을수록 작은 확률을 가지게 만들어준다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200309092952785.png" alt="image-20200309092952785"></p><h3 id="Stochastic-Policies"><a href="#Stochastic-Policies" class="headerlink" title="Stochastic Policies"></a>Stochastic Policies</h3><p>때로는 deterministic policy를 가지면 풀기가 불가능한 문제도 있다고 한다. Epsilon greedy방법(action value approximation에서의)은 deterministic policy를 결과로 내놓기에, 이때 매우 성능이 좋지 않다. Policy gradient는 반면, softmax함수로 인해 stochastic policy를 출력한다.</p><p>(Action value에 따라서 policy를 정할때도 epsilon greedy가 아닌 softmax를 씌우면 어떻게 될까)</p><h2 id="Selecting-Function-Approximation"><a href="#Selecting-Function-Approximation" class="headerlink" title="Selecting Function Approximation"></a>Selecting Function Approximation</h2><p>때로는 action value를 parameterized function으로 모델링하는 것 보다 policy를 parameterized function으로 모델링하는게, 훨씬 간단할 때도 있고 반대의 경우도 존재한다. 따라서, 적절히 덜 복잡한 방향을 선택하면 될 듯 하다.</p><h2 id="Policy-Gradient-for-Continuous-Tasks"><a href="#Policy-Gradient-for-Continuous-Tasks" class="headerlink" title="Policy Gradient for Continuous Tasks"></a>Policy Gradient for Continuous Tasks</h2><p>Episodic task에서는 다음을 최대화하는 액션을 선택하게 하는 policy를 찾는 것이다.<br>$$<br>G_t = \sum_{t=0}^T R_t<br>$$<br>Continuous task에서는 다음을 최대화하는 액션을 선택하게 하는 policy를 찾는 것이다.<br>$$<br>G_t = \sum_{t=0}^T \gamma^t R_t ~ (0 \leq \gamma &lt; 1)<br>$$<br>(Continuous이기 때문에 discounting이 필요. 안그러면 $\infty$로 간다.)</p><p>Continuous task에서는 다음을 최대화하는 액션을 선택하게 할 수도 있다.<br>$$<br>G_t = \sum_{t=1}^T (R_t - r(\pi))<br>$$<br>이때, $R_t - r(\pi)$는 발산하지 않고 수렴하기에 discounting이 필요하지 않다.</p><p>어떤 policy가 최대 reward를 획득하게 한다는 것은 모든 state의 평균 reward를 의미하는 $r(\pi)$를 최대화하는 것과 같다. 그 policy가 궁극적으로 총 reward가 최대가 되도록 학습한다면, $r(\pi)$도 최대이기 때문.</p><p>$r(\pi)$는 다음과 같았다.<br>$$<br>r(\pi) = \sum_s \mu_{\pi}(s) \sum_a \pi(a|s, \theta) \sum_{s’,r} p(s’, r|s, a)r<br>$$</p><p>이 $r(\pi)$를 최대화하기 위해서, policy $\pi$에 대해 미분해보면,<br>$$<br>\nabla r(\pi) = \nabla \sum_s \mu_{\pi}(s) \sum_a \pi(a|s, \theta) \sum_{s’, r} p(s’, r|s, a)r<br>$$<br>인데, $\mu_{\pi}(s)$는 각 state의 방문 횟수로, policy에 의해 영향을 받는다. 하지만, $\mu_{\pi}(s)$는 stationary distribution으로, 추정하기 쉽지 않다.</p><h3 id="The-Policy-Gradient-Theorem"><a href="#The-Policy-Gradient-Theorem" class="headerlink" title="The Policy Gradient Theorem"></a>The Policy Gradient Theorem</h3><p>The Policy Gradient Theorem이라는 이름으로, $\nabla r(\pi)$는 다음으로 추정할 수 있다고 증명되어 있다.<br>$$<br>\nabla r(\pi) = \sum_s \mu_{\pi}(s) \sum_a \nabla \pi(a|s,\theta) \cdot q_{\pi}(s,a)<br>$$<br>$\nabla \pi(a|s,\theta)$는 액션 $a$의 확률값이 높아지는 방향의 gradient이다. 이것을 상응하는 action value와 weighted sum하게 된다. 그러면 전체 average reward가 상승하는 방향일 것이라는 것이고, 이 과정을 모든 state에서 계산하고 모두 더해준다.</p><p>예를들어, 어떤 state에서 액션이 상, 하, 좌, 우 네가지가 있고, 상, 좌 방향으로는 action value가 낮다고 하자. 하지만, 하, 우 방향으로는 높다고 할 때, 상대적으로, 하, 우 방향의 action value가 높으므로, 하, 우 방향이 gradient와 action value의 곱이 상대적으로 비중을 차지하는 비율이 증가할 것이다. 그리고, policy는 이 gradient 방향으로 업데이트하게 되면, policy는 하, 우 의 확률 비중을 약간 늘릴 수 있을 것이다. 이런 과정을 전체 state에 반복하면서 전체 average gradient를 높일 수 있다는 것이다.</p><h3 id="Estimation-of-Policy-Gradient"><a href="#Estimation-of-Policy-Gradient" class="headerlink" title="Estimation of Policy Gradient"></a>Estimation of Policy Gradient</h3><p>$\nabla r(\pi)$를 계산하는 대신 추정하고자 하는데, $\nabla r(\pi)$는 다음과 같았다.<br>$$<br>\nabla r(\pi) = \sum_s \mu_{\pi}(s) \sum_a \nabla \pi(a|s,\theta) q(s,a)<br>$$<br>그런데, 이것은 다음처럼 $\mu$에 대한 기댓값으로 표현이 가능하다.<br>$$<br>\nabla r(\pi) = E_{\mu}[\sum_a \nabla \pi(a|s,\theta) q(s, a)]<br>$$<br>참고로, $E[X]$는 stochastic sample인 $x_i \sim X$ 여러개로 추정이 가능하다. 따라서, $\nabla r(\pi)$는 다음처럼 추정할 수 있다.<br>$$<br>\nabla r(\pi) = \sum_a \nabla \pi(a|S_t,\theta) q(S_t, a)<br>$$<br>이때, $S_t$는 agent가 environment와 상호작용하면서 얻은 샘플 또는 경험이다. 하지만, action에 대한 summation이 남아 있다. 이것은 계산이 가능하지만, 이것 또한 stochastic sample을 이용해서 추정이 가능하다.</p><p>다음처럼 $\pi$에 대한 기댓값이 되도록 식을 수정한다.<br>$$<br>\nabla r(\pi) = \sum_a \pi(a|S_t, \theta) \frac{1}{\pi(a|S_t,\theta)} \nabla \pi(a|S_t, \theta) q(S_t, a)<br>$$</p><p>$$<br>\nabla r(\pi) = E_{\pi} [\frac{\nabla \pi(a|S_t, \theta)}{\pi(a|S_t,\theta)}q(S_t, a)]<br>$$</p><p>이것은 다음으로 추정이 가능할 것이다(stochastic sample).<br>$$<br>\nabla r(\pi) = \frac{\nabla \pi(A_t|S_t,\theta)}{\pi(A_t|S_t,\theta)} q(S_t, A_t)<br>$$<br>최종적으로, policy gradient ascent는 다음과 같다.<br>$$<br>\theta_{t+1} \leftarrow \theta_t + \alpha \cdot \nabla r(\pi)<br>$$</p><p>$$<br>\theta_{t+1} \leftarrow \theta_t + \alpha \cdot \frac{\nabla \pi(A_t|S_t,\theta)}{\pi(A_t|S_t,\theta)} q(S_t, A_t)<br>$$</p><p>($\nabla r(\pi)$는 $r(\pi)$가 증가하는 방향이므로 +를 한다.)</p><p>이것은 또 다음처럼 간단하게 쓸 수 있다.<br>$$<br>\theta_{t+1} \leftarrow \theta_t + \alpha \cdot \nabla ~ \text{ln}[\pi(A_t|S_t, \theta) ]q(S_t, A_t)<br>$$<br>$\pi$는 parameterized function이라 계산이 가능하고, $q(S_t,A_t)$는 TD같은 것으로 추정할 수 있다(Value function도 여전히 추정해야 한다!).<br>$$<br>\theta_{t+1} \leftarrow \theta_t + \alpha \cdot \nabla \text{ln}[\pi(A_t|S_t,\theta)](R_{t+1} - r(\pi) + \hat{v}(S_{t+1}))<br>$$<br>Action value는 액션 $A_t$을 취했을 때 얻은 reward $R_{t+1}$와 그 후의 value, 즉 state value $v(S_{t+1})$을 합한 것과 같기 때문에 위 처럼 된다. 이 경우, action value function은 단순히 reward의 합이 아닌, differential reward의 합을 추정한 놈이므로 $q(S_t, A_t) = R_{t+1} - r(\pi) + v(S_{t+1},W)$이 된다.</p><h2 id="Actor-Critic-Algorithm"><a href="#Actor-Critic-Algorithm" class="headerlink" title="Actor-Critic Algorithm"></a>Actor-Critic Algorithm</h2><p>Actor가 critic의 피드백을 받고 본인의 policy를 수정하면서 발전해가는 형식이라고 한다.</p><ul><li><p>Actor</p><p>Parameterized policy function을 말하며, 어떤 행동을 하는 객체라고 해서 이렇게 이름을 붙인 듯.</p></li><li><p>Critic</p><p>Parameterized state value function을 말하며, actor가 다음에 action을 취할지, 즉, policy를 어떻게 업데이트할지에 대해, action value $q(S_t, A_t)$값으로 피드백을 주고 actor의 다음 행동에 영향을 미치게 한다.</p></li></ul><p>Agent가 environment와 상호작용하면서 얻은 샘플(또는 경험)들을 이용해서 actor와 critic을 동시에 업데이트시키게 된다.</p><p>그 전에, 업데이트의 편의를 위해 policy의 파라미터인 $\theta$의 업데이트식에 action value baseline을 추가한다.<br>$$<br>\theta_{t+1} \leftarrow \theta_t + \alpha \cdot \nabla \text{ln}[\pi(A_t|S_t,\theta)](R_{t+1} - r(\pi) + \hat{v}(S_{t+1},W)- \hat{v}(S_t,W))<br>$$<br>이때, $\hat{v}(S_t,W)$가 action value의 baseline이며, 이것을 추가하는 것은 $\theta$의 업데이트 방향에 영향을 전혀 미치지 않는다. 왜냐하면, 위 식을 다시 기댓값 식으로 바꿔보면,<br>$$<br>\nabla r(\pi) = \nabla \text{ln}[\pi(A_t|S_t, \theta)](R_{t+1} - r(\pi) + \hat{v}(S_{t+1},W))<br>$$</p><p>$$<br>\nabla r(\pi) = E_{\pi} [\nabla \text{ln}[\pi(a|S_t, \theta)](R_{t+1} - r(\pi) + \hat{v}(S_{t+1},W))]<br>$$</p><p>그런데 여기서, 다음을 더해주는데, 아래 기댓값은 0이기 때문에 $\nabla r(\pi)$에 영향을 미치지 않는다.<br>$$<br>E_{\pi}[-\nabla \text{ln} [\pi(a|S_t,\theta)]\hat{v}(S_t,W)]<br>$$<br>따라서, 다음과 같이 된다.<br>$$<br>\nabla r(\pi) = \nabla \text{ln}[\pi(A_t|S_t, \theta)](R_{t+1} - r(\pi) + \hat{v}(S_{t+1},W) - \hat{v}(S_t,W))<br>$$<br>이 식이 Actor-Critic 알고리즘에서 사용될 policy gradient 식인데, baseline의 기댓값이 0인 이유는 다음과 같다.<br>$$<br>E_{\pi}[-\nabla \text{ln} [\pi(a|S_t,\theta)] \hat{v}(S_t, W)]<br>$$</p><p>$$<br>= -\sum_a \pi(a|S_t,\theta)\nabla \text{ln} [\pi(a|S_t,\theta)] \hat{v}(S_t, W)<br>$$</p><p>$$<br>= -\sum_a \nabla \pi(a|S_t,\theta)\nabla \hat{v}(S_t, W)<br>$$</p><p>이때, $S_t$는 이미 주어져 있다($S_t$가 주어진 후, action/policy에 대한 기댓값이니까). 따라서, $\hat{v}$은 action에 의해 영향을 받지 않는 값이며, 밖으로 나올 수 있다.<br>$$<br>= -\hat{v}(S_t, W) \sum_a \nabla \pi(a|S_t,\theta)<br>$$<br>그리고, gradient의 합은 합의 gradient이므로 다음과 같다.<br>$$<br>= -\hat{v}(S_t, W) \nabla \sum_a \pi(a|S_t,\theta)<br>$$<br>근데, 이때, $\pi$는 확률분포이고, 그들의 합은 1이다. 따라서,<br>$$<br>= -\hat{v}(S_t,W) \nabla 1 = 0<br>$$<br>어쨌든 최종적으로, policy gradient식은 다음과 같다.<br>$$<br>\nabla r(\pi) = \nabla \text{ln}[\pi(A_t|S_t, \theta)](R_{t+1} - r(\pi) + \hat{v}(S_{t+1},W) - \hat{v}(S_t,W))<br>$$</p><p>$$<br>\nabla r(\pi) = \nabla \text{ln}[\pi(A_t|S_t, \theta)] \delta_t<br>$$</p><p>이때, $\delta$는 TD error이다(TD error로 만들어주기 위해 baseline을 넣은 것이다).</p><p>최종적으로, Actor-Critic 알고리즘의 pseudo code는 다음과 같다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200310110319075.png" alt="image-20200310110319075"></p><p>(Learning rate는 actor, critic, 그리고 average reward 평균비율 전부 따로 줄 수 있다)</p><p>State value function의 feature는 state로만 구성되지만, policy의 feature는 state와 action 모두로 구성된다. Policy의 feature는 state feature를 action 개수만큼 stack한 feature라고 가정해보자.</p><p>다음 그림에서 state feature는 $x_0(s), x_1(s), x_2(s), x_3(s)$ 4개로 구성되어 있고, state-action pair feature 개수는 state feature 4개를 3번 복사한, 총 12개로 구성되는 것이다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200311104559800.png" alt="image-20200311104559800"></p><p>만약, state value function의 구현으로 linear parameterized function을 사용한다면, 그의 파라미터 $w$의 업데이트 규칙은 다음처럼 될 것이다.<br>$$<br>w \leftarrow w + \alpha \cdot \delta \cdot x(s)<br>$$<br>또한, policy function을 softmax로 구현했다면, 그의 파라미터 $\theta$의 업데이트는 다음처럼 될 것이다.<br>$$<br>\theta \leftarrow \theta + \alpha \cdot \delta \cdot (x_h(s,a) - \sum_b \pi(b|s,\theta) x_h(s,b))<br>$$</p><p>이때, $x(s)$는 4개로 구성된 state feature이고, $x_h(s,a)$는 12개로 구성된 state-action pair feature인데, action $a$에 해당하는 4개의 feature만 가저온 것이다.</p><p>($\nabla \text{ln} \pi(a|s,\theta) = x_h(s,a) - \sum_b \pi(b|s,\theta) x_h(s,b)$이기 때문; $\nabla h(s,a,\theta) = x_h(s,a)$)</p><h2 id="Actor-Critic-for-Continuous-Actions"><a href="#Actor-Critic-for-Continuous-Actions" class="headerlink" title="Actor-Critic for Continuous Actions"></a>Actor-Critic for Continuous Actions</h2><p>Action 개수만큼 state feature를 stacking하는 것도 가능한 action 집합이 discrete할때만 유효한 것이다. 만약, action 집합이 continuous하다면, critic을 softmax로 모델링 할 수 없다.</p><p>이런 경우에는, critic을 각 state에 따른 action을 distribution으로 모델링하는 것이다. 예를 들어, state에 따른 action 분포를 gaussian distribution으로 모델링한다고 가정한다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200311114613408.png" alt="image-20200311114613408"></p><p>이때, critic은 이 gaussian distribution의 파라미터 $\mu, \sigma$를 모델링하게 된다. 즉, $\theta = { \theta_{\mu}, \theta_{\sigma} }$가 된다.</p><p>때로는 discrete한 액션 집합이더라도, 그 수가 많고 촘촘하다면, continuous하게 취급하는 것도 도움이 된다. Distribution으로 모델링할 때의 장점은 distribution이기 때문에, 하나의 action에 대한 업데이트도 범위의 액션에 영향을 미치기 때문에 action generalization이 실현된다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Policy-Gradient&quot;&gt;&lt;a href=&quot;#Policy-Gradient&quot; class=&quot;headerlink&quot; title=&quot;Policy Gradient&quot;&gt;&lt;/a&gt;Policy Gradient&lt;/h1&gt;&lt;p&gt;Policy gradient 방법
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Reinforcement Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Reinforcement-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="ReinforcementLearning" scheme="https://jaeyoung-blog.github.io/tags/ReinforcementLearning/"/>
    
  </entry>
  
  <entry>
    <title>12. Controls with Approximation</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/12-Controls-with-Approximation/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/12-Controls-with-Approximation/</id>
    <published>2020-03-22T00:22:08.000Z</published>
    <updated>2020-03-22T00:20:14.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Controls-with-Approximation"><a href="#Controls-with-Approximation" class="headerlink" title="Controls with Approximation"></a>Controls with Approximation</h1><p>Value function을 function approximation을 통해 모델링했다면, 이제, 주어진 value function으로 policy를 계산해 낼 차례이다.</p><h2 id="Representation-of-Actions"><a href="#Representation-of-Actions" class="headerlink" title="Representation of Actions"></a>Representation of Actions</h2><p>Sarsa, expected Sarsa, Q-learning등을 하려면, state value function보단, action value function이 더 유용한데, 앞에서 봤던 function approximation방법은 state value function을 추정하는 것이었다.</p><p>Action을 추가한 function approximation은 두 가지 방법이 있을 수 있다.</p><ol><li><p>Action별로 따로 function을 모델링한다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200307093934585.png" alt="image-20200307093934585"></p><p>즉, 어떤 action 1개당 1개의 function이 있는 셈이며, 위 그림처럼 stacking해서 하나의 linear 형태로 표현이 가능하다. 하지만, 이 경우, action끼리의 generalization이 일어나지 않는다. 즉, $a_0$의 function과 $a_1$의 function은 서로 다른 weight를 사용하기 때문에 서로 영향을 미치지 못한다.</p><p>신경망으로 치자면 다음처럼 될 것이다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200307094147927.png" alt="image-20200307094147927"></p><p>마지막 hidden layer의 output이 state의 representation이며, 그것과 최종 output layer사이의 weight는 action끼리 서로 공유되지 않는다.</p></li><li><p>Action도 function의 입력으로 넣는다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200307094258479.png" alt="image-20200307094258479"></p><p>신경망의 output은 하나로 통일해버리고, action은 input으로 넣는 것이다. 이렇게되면, state뿐 아니라 action 사이에서도 weight가 공유되므로, action generalization도 수행될 것이다.</p></li></ol><h2 id="Controls-with-Function-Approximation"><a href="#Controls-with-Function-Approximation" class="headerlink" title="Controls with Function Approximation"></a>Controls with Function Approximation</h2><h3 id="Sarsa-with-Function-Approximation"><a href="#Sarsa-with-Function-Approximation" class="headerlink" title="Sarsa with Function Approximation"></a>Sarsa with Function Approximation</h3><p>방법은 tabular Sarsa와 semi-gradient TD와 상당히 유사하다. Value function을 weight로 모델링한 후, weight와 policy를 initialization한다. 그리고, 다음 코드를 구현한다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200307094518046.png" alt="image-20200307094518046"></p><p>Semi-gradient 방법을 사용한다.</p><h3 id="Expected-Sarsa-with-Function-Approximation"><a href="#Expected-Sarsa-with-Function-Approximation" class="headerlink" title="Expected Sarsa with Function Approximation"></a>Expected Sarsa with Function Approximation</h3><p>Sarsa와 Expected Sarsa는 Bellman equation 형태만 조금 다르므로, 그것만 수정해주면 된다. 다음은 Sarsa의 업데이트 방식이다.<br>$$<br>w \leftarrow w + \alpha(R_{t+1} + \gamma \cdot \hat{q}(s_{t+1}, a_{t+1}, w) - \hat{q}(s_t, a_t, w)) \nabla \hat{q}(s_t, a_t, w)<br>$$<br>다음은 expected Sarsa의 업데이트 방식이다.<br>$$<br>w \leftarrow w + \alpha(R_{t+1} + \gamma \cdot \sum_{a_{t+1}} \pi(a_{t+1}|s_{t+1}) \hat{q}(s_{t+1}, a_{t+1}, w) - \hat{q}(s_t, a_t, w)) \nabla \hat{q}(s_t, a_t, w)<br>$$<br>다만, action방향으로 expectation을 계산할 수 있어야 한다. (여기서는 action set이 finite하다고 가정)</p><h3 id="Q-learning-with-Function-Approximation"><a href="#Q-learning-with-Function-Approximation" class="headerlink" title="Q-learning with Function Approximation"></a>Q-learning with Function Approximation</h3><p>Q-learning은 expected Sarsa의 특수한 형태이다. 즉, expectation값을 구하는 대신 maximum action value를 취한다.<br>$$<br>w \leftarrow w + \alpha (R_{t+1} + \gamma \cdot \underset{a_{t+1}}{ \text{argmax} } ~ \hat{q}(s_{t+1}, a_{t+1}, w) - \hat{q}(s_t, a_t, w)) \nabla \hat{q}(s_t, a_t, w)<br>$$</p><h2 id="Exploration-with-Function-Approximation"><a href="#Exploration-with-Function-Approximation" class="headerlink" title="Exploration with Function Approximation"></a>Exploration with Function Approximation</h2><p>Function approximation에서도 exploration-exploitation dilema가 발생한다. 따라서, 이를 완화시켜야 하는데, function approxmiation은 각 state 사이에 value generalization이 이뤄지기 때문에 tabular settings보다 exploration에서 제한적이다.</p><p>예를들어, optimistic initial value를 들어본다. Optimistic initial value setting에서는 처음에 value function을 매우 높은 값으로 초기화하고, 어떤 state를 방문할수록 방문한 state의 value function이 낮아지며, 자연스럽게 아직 방문하지 않은 state에 방문하게 된다. 학습이 진행될수록, 낮은 value를 가진 state의 value funciton은 낮은 값이 되어 더 이상 방문하지 않게 될 것이다.</p><p>하지만, function approximation setting에서는 이것이 유효하지 않은데, generalization이 이뤄지기 때문에 방문하지 않은 state의 value function도 같이 낮아진다는 것이다. 따라서, optimistic initial value의 의도와는 다르게 흘러가며, exploration이 제대로 이뤄지지 않는다.</p><h3 id="epsilon-greedy-with-Function-Approximation"><a href="#epsilon-greedy-with-Function-Approximation" class="headerlink" title="$\epsilon$-greedy with Function Approximation"></a>$\epsilon$-greedy with Function Approximation</h3><p>하지만, $\epsilon$-greedy 방식은 어떤 function approximation 방법과도 융합될 수 있다.</p><ul><li><p>$1 - \epsilon$확률에 따라 exploitation<br>$$<br>a \leftarrow \underset{a}{ \text{argmax} } ~ \hat{q}(s, a, w)<br>$$</p></li><li><p>$\epsilon$확률에 따라 exploration<br>$$<br>a \leftarrow \text{random}(a)<br>$$</p></li></ul><p>이외에 function approximation setting에서의 exploration-exploitation 조화는 아직 연구중인 분야라고 한다.</p><h2 id="Average-Rewards"><a href="#Average-Rewards" class="headerlink" title="Average Rewards"></a>Average Rewards</h2><p>지금까지, 어떤 state에서 어떤 action을 취했을 때의 value는 discounting을 이용한 future reward의 합으로 정의했다. 하지만, 이것은 discount라는 hyperparameter가 존재하며, 이것을 정하는 것은 어떤 문제를 푸느냐에 따라 크게 달라질 수 있다. 때로는 discount rate가 알고리즘을 잘못된 방향으로 학습시킬 수 있다(큰 reward를 받는게 너무 먼 미래인 경우 discount가 너무 많이 된다). 이것은 continuous task일때도, 마찬가지로, 당장은 작은 reward, 먼 미래에 다소 큰 reward를 받는 액션 중 택하는 문제에서, discount는 큰 영향을 준다.</p><p>Continuous task를 위한 RL알고리즘들은 보통 discounting대신 average reward방식을 사용한다고 한다.</p><p>Average reward는 이것을 해결하기 위해서 나왔으며, 어떤 policy를 따를 때, 앞으로 받을 reward의 평균을 말한다.<br>$$<br>r(\pi) = \lim_{h \rightarrow \infty} \frac{1}{h} \sum_{t=1}^h E[R_t|S_t,A_{0:t-1} \sim \pi]<br>$$<br>Value의 평균이 아니라, reward의 평균이다. 이는 다음처럼 generalize할 수 있다.<br>$$<br>r(\pi) = \sum_s \mu_{\pi}(s) \sum_a \pi(a|s) \sum_{s’,r} p(s’,r|s,a)r<br>$$<br>$\mu_{\pi}(s)$는 $s$가 해당 policy $\pi$에 따른 방문 횟수 비율 분포이다.</p><p>예를들어, 다음 environment가 있다고 했을 때,</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200307112210435.png" alt="image-20200307112210435"></p><p>Left로만 가라고 하는 deterministic policy $\pi_L$일때, state $s$에서의 average reward $r(\pi_L)$은 0.2이다. 왼쪽으로만 가라고 하고, 왼쪽으로 갔을 때, 총 5개의 state를 지나며, 총 +1의 reward를 얻을 수 있으니, 왼쪽으로 가는 action을 선택했을 때 평균 reward는 0.2이다. 오른쪽으로는 갈 수가 없으므로, 고려하지 않는다.</p><p>반면, 오른쪽으로만 가라고 하는 deterministic poliyc $\pi_R$의 경우, average reward $r(\pi_R)$은 0.4이다.</p><p>따라서, 두 개의 policy를 average reward로 비교했을 때, $\pi_R$이 더 좋다고 할 수 있다. <strong>즉, average reward를 통해 어떤 policy가 더 좋은지 판단할 수 있다.</strong></p><p>Policy 하나당 하나의 average reward를 계산할 수 있다.</p><p>하나의 policy에서 average reward를 계산했다면, 그 policy내에서 어느 action이 좋은지에 대해서도 판단할 수 있다. 즉, value function을 새롭게 계산할 수 있다는 것이다. 이때, value는 다음처럼 정의한다.<br>$$<br>G_t = (R_{t+1} - r(\pi)) + (R_{t+2} - r(\pi)) + \cdots<br>$$<br>이때, $R - r(\pi)$를 differential return이라고 부른다. 즉, value를 미래 reward의 총합이 아닌, differential reward의 총합으로 differential return을 정의한다.</p><p>따라서, action value Bellman equation은 다음처럼 변형된다.<br>$$<br>q(s, a) = \sum_{s’, r} p(s’, r|s, a) \sum_{a’} [r - r(\pi) + \sum_{a’}\pi(a’|s’) q(s’,a’)]<br>$$</p><h3 id="Differential-Sarsa"><a href="#Differential-Sarsa" class="headerlink" title="Differential Sarsa"></a>Differential Sarsa</h3><p>Differential return을 이용해서 Sarsa를 변형한 것을 말한다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200307113711291.png" alt="image-20200307113711291"></p><p>그런데, average reward를 계산할 때, TD error로 계산하는게 더 효과적이라고 한다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200307113828452.png" alt="image-20200307113828452"></p><p>(이렇게 되면 average reward가 아니라 average value로 differential return을 계산?)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Controls-with-Approximation&quot;&gt;&lt;a href=&quot;#Controls-with-Approximation&quot; class=&quot;headerlink&quot; title=&quot;Controls with Approximation&quot;&gt;&lt;/a&gt;Contr
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Reinforcement Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Reinforcement-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="ReinforcementLearning" scheme="https://jaeyoung-blog.github.io/tags/ReinforcementLearning/"/>
    
  </entry>
  
  <entry>
    <title>11. Feature Construction</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/11-Feature-Construction/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/11-Feature-Construction/</id>
    <published>2020-03-22T00:00:08.000Z</published>
    <updated>2020-03-22T00:17:30.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Feature-Construction"><a href="#Feature-Construction" class="headerlink" title="Feature Construction"></a>Feature Construction</h1><p>참고: Coursera Reinforcement Learning (Alberta Univ.)</p><p>Value function을 $\hat{v}(s, w)$로 function approximation 한다고 하자. 이때, $s$는 어떤 state, $w$는 이 value function의 weight parameter이며, $\hat{v}(s, w)$는 value function을 parameterize한 함수이다.</p><p>만약, $\hat{v}(s, w)$가 linear model이라면, $\hat{v}(s, w) = x(s) \cdot w$가 될 것이다. 여기서, tabular method는 $x(s)$가 state개수만큼의 길이를 가진 one-hot vector였다. 즉, $x(s_i)$는 $i$번째 원소가 1이고 나머지는 0인 벡터였다.</p><p>하지만, 이것은 feature의 매우 한정적인 예시일 뿐, feature를 꼭 one-hot vector로 할 필요는 없을 것이다.</p><p>Feature를 제대로 선택하는 것은 매우 중요하다. Feature를 제대로 선택한다면, 간단한 linear model에서도 강력한 성능을 발휘할 가능성이 높다. 때로는 feature를 선택할 때, 어떤 분야의 domain 지식이 들어가기도 한다.</p><p>지금, feature를 어떻게 만들지에 대해서 정리하고자 한다.</p><h2 id="Coarse-Coding"><a href="#Coarse-Coding" class="headerlink" title="Coarse Coding"></a>Coarse Coding</h2><p>어떤 2차원 공간이 있다고 해 본다. 2차원 공간 속에서 어느 위치에 있는지를 하나의 state라고 해 본다. 그럼 state의 개수는 무한대이고, 이것을 tabular method로 나타내기는 불가능하다. 하지만, state aggregation을 한다면 이야기가 달라진다. 공간을 몇 등분으로 나누어서 각 공간에 들어가는 것을 하나의 상태로 표현하는 것이다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200303011108051.png" alt="image-20200303011108051"></p><p>그리고, state aggregation은 기본적으로, 각 state가 겹치지 않는다. 또한, feature vector도 one-hot vector의 형태를 띄게 된다.</p><p>Coarse coding이란, aggregation을 겹치게 하도록 허용하는 방식으로, state aggregation를 조금 개선한 것이다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200303011256015.png" alt="image-20200303011256015"></p><p>이때, agent는 동시에 여러개의 aggregation에 들어갈 수 있고, feature vector는 하나만 1인 벡터 형태가 아닌, 여러 원소가 1을 가지는 벡터 형태가 된다.</p><p>Coarse coding은 state aggregation의 generalization 형태라고 볼 수 있겠다.</p><h3 id="Generalization-amp-Discrimination-of-Coarse-Coding"><a href="#Generalization-amp-Discrimination-of-Coarse-Coding" class="headerlink" title="Generalization &amp; Discrimination of Coarse Coding"></a>Generalization &amp; Discrimination of Coarse Coding</h3><p>Coarse coding에서, aggregation의 모양, 사이즈, 개수, 커버리지 범위 모양 등에 따라 generalization, discrimination이 크게 달라질 수 있다. aggregation이 겹친 상태에서 전체 state가 몇 개의 조각으로 나뉘는지 보면 discrimination이 얼마나 되는지 확인할 수 있다. 많은 개수로 나뉘면 discrimination이 많이 이뤄진다. 하나의 커버리지 범위가 넓고 개수가 많다면 discrimination이 또 증가하고, generalization또한 증가하는 경향이 있으나, 상황에 따라 다르기 때문에 적절히 결정할 필요가 있다.</p><h2 id="Tile-Coding"><a href="#Tile-Coding" class="headerlink" title="Tile Coding"></a>Tile Coding</h2><p>Coarse coding의 한 종류로써, aggregation 모양이 그리드이다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200303014339315.png" alt="image-20200303014339315"></p><p>이 그리드를 약간의 offset으로 여러번 움직인다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200303014409374.png" alt="image-20200303014409374"></p><p>만약, 타일 1개가 넓으면, generalization도 상당히 넓어지고, offset의 크기와 방향, 그리드가 몇개냐에 따라 discrimination 정도도 달라진다. tile coding은 그리드로 나누고, 각 타일이 동일한 크기의 정/직사각형이기 때문에 현재 state가 어느 타일에 들어가는지 <strong>매우 효율적으로 계산이 가능하다.</strong></p><p>다만, dimension이 증가할수록 tile개수는 exponential하게 증가하게 된다.</p><h2 id="Neural-Network-for-Feature-Construction"><a href="#Neural-Network-for-Feature-Construction" class="headerlink" title="Neural Network for Feature Construction"></a>Neural Network for Feature Construction</h2><p>Neural network는 feature를 입력으로 받아서, hidden layer로 feature를 representation한 뒤, 최종 output을 낼 수 있는 복잡하고 유연한 parameterized function이다.</p><p>Neural network를 function approximation에 사용할 때의 장점은 feature construction을 인간이 아닌, 컴퓨터에게 맞김과 동시에 매우 유연하게 feature를 뽑아낼 수 있다는 것이다.</p><p>Neural network는 policy, value function, model 등, parameterized function이 필요한 모든 곳에 응용될 수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Feature-Construction&quot;&gt;&lt;a href=&quot;#Feature-Construction&quot; class=&quot;headerlink&quot; title=&quot;Feature Construction&quot;&gt;&lt;/a&gt;Feature Construction&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Reinforcement Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Reinforcement-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="ReinforcementLearning" scheme="https://jaeyoung-blog.github.io/tags/ReinforcementLearning/"/>
    
  </entry>
  
  <entry>
    <title>10. Prediction and Control with Function Approximation</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/10-Prediction-and-Control-with-Function-Approximation/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/10-Prediction-and-Control-with-Function-Approximation/</id>
    <published>2020-03-18T00:00:08.000Z</published>
    <updated>2020-03-18T00:39:57.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prediction-and-Control-with-Function-Approximation"><a href="#Prediction-and-Control-with-Function-Approximation" class="headerlink" title="Prediction and Control with Function Approximation"></a>Prediction and Control with Function Approximation</h1><p>참고: Coursera Reinforcement Learning (Alberta Univ.)</p><p>지금까지, state와 action이 discrete하며, (state, action) pair의 value가 deterministic한, tabular method를 보았다. 하지만, 이건 실생활에서 매우 한정적일 수 밖에 없다.</p><p>Value function을 table로 표현하지 말고, function으로 추정하자는게 지금부터 다룰 내용이다.<br>$$<br>V(s) = f_W(s)<br>$$</p><p>Function은 어떤 파라미터 $W$로 parameterized되어 있으며, function은 linear 형태의 function이나, 인공신경망과 같이 non-linear한 형태도 가능하다.</p><h2 id="Tabular-Method-is-a-Linear-Function"><a href="#Tabular-Method-is-a-Linear-Function" class="headerlink" title="Tabular Method is a Linear Function"></a>Tabular Method is a Linear Function</h2><p>Tabular method는 linear function approximation의 한 방법이다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200224100627139.png" alt="image-20200224100627139"></p><p>state의 개수만큼 feature가 있고, feature는 각 state를 나타내는 indicator가 된다. 그러면, 각 state의 value는 그 state의 weight가 된다.<br>$$<br>V(s_i) = \begin{pmatrix}<br>0 \newline<br>\cdots \newline<br>0 \newline<br>1 \newline<br>0 \newline<br>\cdots \newline<br>0<br>\end{pmatrix} \cdot<br>\begin{pmatrix}<br>w_1 \newline<br>\cdots \newline<br>w_{i-1} \newline<br>w_i \newline<br>w_{i+1} \newline<br>\cdots \newline<br>w_{16}<br>\end{pmatrix} = w_i<br>$$<br>즉, tabular method는 위와 같이 indicator feature를 이용해서 linear function으로 표현이 가능하다. 따라서, tabular method는 linear function approximation의 한 instance이다.</p><h2 id="Generalization-and-Discrimination"><a href="#Generalization-and-Discrimination" class="headerlink" title="Generalization and Discrimination"></a>Generalization and Discrimination</h2><p>Generalization과 discrminiation은 reinforcement learning에서 상당히 중요하다.</p><ul><li><p>Generalization</p><p>Generalizaiton은 어떤 state를 학습(value를 추정)했다면, 비슷한 다른 state까지 영향을 미쳐서 학습되는 것을 의미한다.</p></li><li><p>Discrimination</p><p>Discrimination은 서로 다른 state끼리는 학습 또는 추정시, 영향을 미치지 않아야 함을 의미한다. 즉, 어떤 state끼리는 독립적으로 value가 추정되어야 한다는 것이다.</p></li></ul><p>Tabular method는 generalization을 전혀 하지 못하고, discrimination을 100% 수행하는 방법이다. 반면, 모든 state를 똑같은 value를 두도록 설정하면, discrimination을 전혀 수행하지 못하고 generalization을 100% 수행하게 된다. RL에서는 generalization과 discrimination을 동시에 높여야 하며, trade-off관계라서, 적절히 조정하는게 필요하다.</p><h2 id="Value-Estimation-as-Supervised-Learning"><a href="#Value-Estimation-as-Supervised-Learning" class="headerlink" title="Value Estimation as Supervised Learning"></a>Value Estimation as Supervised Learning</h2><p>True reward 리턴값이 있다면, reward를 target label로 삼아서 $f_W(s)$를 학습할 수 있지 않을까.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200225104841408.png" alt="image-20200225104841408"></p><p>하지만, reinforcement learning에서는 각 데이터 샘플(하나의 state-action pair)이 서로 correlate되어 iid에 위반되므로, 모든 supervised learning technique이 다 잘 적용될 수 있는 것은 아니다. 또한, TD의 경우, target 자체가 estimation값(다음 state의 value는 또 다른 estimation 값임)이므로, target이 학습이 지속되면서 변한다. 이는, supervised learning이랑 상당히 다른 환경이다.</p><h2 id="The-Objective-for-On-policy-Prediction"><a href="#The-Objective-for-On-policy-Prediction" class="headerlink" title="The Objective for On-policy Prediction"></a>The Objective for On-policy Prediction</h2><p>Function approximation을 하기 위해서는, target value와 얼만큼 가까운지 판단할 수 있는 objective function이 필요하다. </p><h3 id="The-Value-Error-Objective"><a href="#The-Value-Error-Objective" class="headerlink" title="The Value Error Objective"></a>The Value Error Objective</h3><p>다음은 Mean squared error를 이용한 objective function이다.<br>$$<br>\text{VE} = \sum_s \mu(s)[V_{\pi}(s) - \hat{v}(s, W)]^2<br>$$<br>이때, 각 state마다 서로 다른 가중치 $\mu(s)$를 주어서, 상대적으로 중요한 state에게는 높은 가중치를, 덜 중요한 state에게는 낮은 가중치를 주도록 한다. Policy에 의해 자주 방문하는 state에 대해서는 높은 가중치를 줄 수도 있겠다.</p><h3 id="Gradient-Monte-Carlo-for-Policy-Evaluation"><a href="#Gradient-Monte-Carlo-for-Policy-Evaluation" class="headerlink" title="Gradient Monte Carlo for Policy Evaluation"></a>Gradient Monte Carlo for Policy Evaluation</h3><p>Gradient descent를 Monte Carlo RL에 맞게 수정한 것. Stochastic gradient descent.</p><p>Value error식은 때때로 state개수가 너무 많아서 계산이 불가능하다. 대신, gradient를 approximation한다. 원래 Gradient descent식은 다음과 같다. 이때, $x(s)$는 state $s$의 feature vector이다.<br>$$<br>W \leftarrow W + \alpha \sum_s \mu(s)[V_{\pi}(s) - \hat{v}(s,W)] \nabla \hat{v}(s, W)<br>$$<br>그런데, 이 식을 쓰지 말고, 다음처럼 gradient를 approximate해서 쓰자는 것이 된다.<br>$$<br>W \leftarrow W + \alpha [V_{\pi}(S_t) - \hat{v}(S_t, W)] \nabla \hat{v}(S_t, W)<br>$$<br>왜냐하면 다음이 성립하기 떄문. 즉, 위 gradient는 원래 gradient의 추정치라고 볼 수 있다.<br>$$<br>E[V_{\pi}(S_t) - \hat{v}(S_t,W)] = \sum_s \mu(s)[V_{\pi}(s) - \hat{v}(s,W)]<br>$$<br>이는, 샘플 하나 (state-action pair 1개)씩 보면서 한 번 업데이트하는 stochastic gradient descent 방식이다.</p><p>하지만, 이 경우는 target value function인 $V_{\pi}(s)$를 알아야 한다. 얘네도 $G_t$를 이용해 approximation한다.<br>$$<br>W \leftarrow W + \alpha [G_t - \hat{v}(S_t,W)] \nabla \hat{v}(S_t,W)<br>$$<br>역시 다음을 추정한 것이다.<br>$$<br>E[V(S_t)] = E[G_t|S_t]<br>$$<br>다음은 pseudo code.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200225135449599.png" alt="image-20200225135449599"></p><h3 id="State-Aggregation"><a href="#State-Aggregation" class="headerlink" title="State Aggregation"></a>State Aggregation</h3><p>State개수가 너무 많아서 모든 state를 따로 업데이트하기 힘들 때, 비슷한 state끼리는 묶어서 하나의 state로 보는 것을 말한다. 따라서, 하나의 state가 업데이트되면 같은 그룹의 다른 state도 같은 값으로 업데이트된다.</p><h2 id="The-Objective-for-TD"><a href="#The-Objective-for-TD" class="headerlink" title="The Objective for TD"></a>The Objective for TD</h2><p>On-policy learning인 Gradient Monte Carlo의 objective로 squared error를 사용했었다. 하지만, TD는 $G_t$가 다음의 특성을 가진다.<br>$$<br>v(S_t, W) = R_{t+1} + \gamma v(S_{t+1}, W)<br>$$<br>($G_t = \hat{v}(S_t, A_t)$이다. ) 즉, 다음의 gradient 수식에서,<br>$$<br>(G_t - \hat{v}(S_{t}, W)) \nabla \hat{v}(S_{t}, W)<br>$$<br>$G_t$부분은 실제 value의 추정값이므로, TD learning에서는 $v(S_t,W)$와 대체해야 한다. 그런데, 이놈은 $v(S_{t+1}, W)$를 참조하고 있으며, 이 $v(S_{t+1}, W)$는 true value의 estimation이기 보단 현재의 value estimation이다. 따라서, biased된 추정값이며, $v(S_t, W)$를 미분해도 이 식이 $W$를 가지고 있으므로, Gradient Monte Carlo의 gradient 수식과 같게 나오지 않는다. 하지만, 그냥 $v(S_t, W)$는 상수처럼 간주해버리고 쓰게 되는데(즉, $W$에 대한 함수가 아니라고 간주), 이를 semi-gradient 방법이라고 부른다.</p><p>최종적으로 $W$의 업데이트 식은 다음과 같이 쓴다.<br>$$<br>W \leftarrow W + \alpha(R_{t+1} + \gamma v(S_{t+1}, W) - \hat{v}(S_t,W)) \nabla \hat{v}(S_t, W)<br>$$</p><h2 id="TD-vs-Monte-Carlo"><a href="#TD-vs-Monte-Carlo" class="headerlink" title="TD vs Monte Carlo"></a>TD vs Monte Carlo</h2><p>Function approximation에서, TD와 Monte Carlo 방식의 차이점은 다음과 같다.</p><p><strong>TD</strong></p><ul><li>장점<ul><li>에피소드가 끝나기 전에 바로바로 학습하므로 빠른 학습 속도(loss가 빠르게 줄어듬)</li></ul></li><li>단점<ul><li>Estimation이 최종 reward를 반영하지 않은, 현재의 value estimation을 true estimation으로 삼기 때문에 biased된 학습. 즉, 부정확할 수 있다. Local minimum의 근처까지밖에 못갈 수 있다.</li></ul></li></ul><p><strong>Monte Carlo</strong></p><ul><li>장점<ul><li>에피소드의 최종 reward를 반영한 true value의 estimation을 사용하기에 TD보단 unbiased된 학습. 즉, local minimum을 다소 정확하게 찾는다.</li></ul></li><li>단점<ul><li>느리다. step size를 작게 줘야 한다.</li></ul></li></ul><h2 id="Linear-TD"><a href="#Linear-TD" class="headerlink" title="Linear TD"></a>Linear TD</h2><p>Value function을 linear하게 모델링한 것을말하며, 간단하고 쉽지만, 잘 정제된 feature가 있다면, 매우 강력한 성능을 발휘한다.</p><p>Tabular TD(0)는 linear TD의 한 종류인데, 다음처럼 feature가 생겼다고 가정한다면, 완벽히 linear TD이다.<br>$$<br>w = \begin{pmatrix}<br>w_0 \newline<br>w_1 \newline<br>w_2 \newline<br>w_3 \newline<br>\cdots \newline<br>w_d<br>\end{pmatrix},<br>x(s_i) = \begin{pmatrix}<br>0 \newline<br>0 \newline<br>1 \newline<br>0 \newline<br>\cdots \newline<br>0<br>\end{pmatrix},<br>\hat{v}(s,w) = w \cdot x<br>$$<br>feature는 어떤 state인지 나타내는 indicator이고, weight가 각각 상응하는 state들의 value가 되는 셈. Feature $x$를 어떤 aggregation인지를 나타낸다고 하면, aggregation tabular TD(0)역시 linear TD의 모양이 되므로, aggregation tabular TD(0)역시, linear TD의 한 종류이다.</p><p>만약, squared error를 사용하는 linear TD라면, 다음 식으로 $w$가 업데이트된다.<br>$$<br>w \leftarrow w + \alpha (R_{t+1} + \gamma \hat{v}(S_{t+1}, w) - \hat{v}(S_t, w)) X(S_t)<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prediction-and-Control-with-Function-Approximation&quot;&gt;&lt;a href=&quot;#Prediction-and-Control-with-Function-Approximation&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Reinforcement Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Reinforcement-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="ReinforcementLearning" scheme="https://jaeyoung-blog.github.io/tags/ReinforcementLearning/"/>
    
  </entry>
  
  <entry>
    <title>09. Models and Planning</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/09-Models-and-Planning/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/09-Models-and-Planning/</id>
    <published>2020-03-11T01:00:08.000Z</published>
    <updated>2020-03-11T08:54:43.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Models-and-Planning"><a href="#Models-and-Planning" class="headerlink" title="Models and Planning"></a>Models and Planning</h1><p>참고: Coursera Reinforcement Learning (Alberta Univ.)</p><p>지금까지, 두 가지 경우를 보았다.</p><ol><li>Agent가 environment를 알고 있어서 실제 action을 취하지 않고, value function을 계산하고 optimal policy를 찾을 수 있다. (<strong>Dynamic programming</strong>)</li><li>Agent가 environment를 알 수 없어서, 오직 action을 취해서 얻은 sample들로만 value function을 추정했다. (<strong>Sample-based</strong>)</li></ol><p>하지만, 이번에는 environment도 같이 추정해서 value function을 더 정확히 추정하고 더 나아가 더 나은 policy를  추정하는 방법을 찾고자 한다.</p><p>(즉, 두 가지 방법을 합친 것)</p><h2 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h2><p>Environment를 모델링한 것이라고 보면 된다.</p><p>Environment를 모델링함으로써,</p><ul><li>Experiment를 통한 sampling이 가능하다.</li><li>각 event(action, reward가 생기는)의 확률을 알고, likelihood를 계산할 수 있다. 또는 marginalization 등 확률적인 계산들이 가능하다.</li></ul><p>Model에는 <strong>sample model</strong>과 <strong>distribution model</strong> 두 가지가 있을 수 있다.</p><p>모델은 반드시 정확히 environment를 향해 가도록 모델링해야 한다. Bias되면 답이 없다.</p><h3 id="Sample-Models"><a href="#Sample-Models" class="headerlink" title="Sample Models"></a>Sample Models</h3><p>이 모델은 experiment를 통한 샘플링이 가능하도록 모델링한 것이다. 다음의 특징이 있다.</p><ul><li><p>모델링하기 간단하다. 크기가 작다. Joint 확률까지는 필요없다.</p><p>“주사위 5개의 결과”를 예로 들어보면, 주사위 1개의 확률분포만 모델링하면 된다.</p></li></ul><h3 id="Distribution-Models"><a href="#Distribution-Models" class="headerlink" title="Distribution Models"></a>Distribution Models</h3><p>이 모델은 각 state가 될 확률, reward의 확률분포를 알 수 있도록 모델링한 것이다.</p><ul><li><p>모델링하기 복잡하고 크기가 크다. 가능한 경우의 수에 대해서 (joint)확률을 매겨야 한다.</p><p>“주사위 5개의 결과”를 예로 들어보면, distribution model은 $6^5$개의 확률을 계산할 수 있어야 한다.</p></li></ul><h2 id="Planning"><a href="#Planning" class="headerlink" title="Planning"></a>Planning</h2><p>Model을 통해 experiment를 시행해서 episode를 만들고(샘플링), 그것을 이용해서 value function을 업데이트하는 과정을 의미한다.</p><p>Model은 sample model에 해당한다.</p><h3 id="Random-sample-One-step-Tabular-Q-Learning"><a href="#Random-sample-One-step-Tabular-Q-Learning" class="headerlink" title="Random-sample One-step Tabular Q-Learning"></a>Random-sample One-step Tabular Q-Learning</h3><p>이 방법은 planning중 하나의 방법으로, state transition dynamic을 sample model로 알고 있다고 가정한다. 또한, (시뮬레이션 중에)action을 어떻게 선택할지에 대한 전략도 있을 것이라고 가정한다.</p><p>다음과 같은 과정으로 이루어진다.</p><ol><li><p>첫 state와 action을 선택</p></li><li><p>Model로부터 다음 state를 샘플링하고(given current state, action), action 선택 전략에 따라 action을 뽑음</p></li><li><p>Q-learning 알고리즘에 따라 value function을 업데이트<br>$$<br>Q(S_t, A_t) = Q(S_t, A_t) + \alpha \cdot (R_{t+1} + \gamma \cdot \text{max} ~ Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t))<br>$$</p></li><li><p>2,3번 반복</p></li><li><p>Value function이 수렴했으면, policy update<br>$$<br>\pi_* = \underset{a}{ \text{max} } ~ Q(s,a)<br>$$</p><p>$$<br>\pi \leftarrow \pi_*<br>$$</p></li></ol><h3 id="Advantage-of-Planning"><a href="#Advantage-of-Planning" class="headerlink" title="Advantage of Planning"></a>Advantage of Planning</h3><p>Planning의 1-step 속도는 당연히 현실에서 1-step 가는것보다 빠르다. 따라서, 현실에서 action을 취하고 다음 action을 취하는 그 사이 간격에서 planning을 수행해줌으로써, value function의 효율적인 수렴이 가능할 수도 있다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200217150229429.png" alt="image-20200217150229429"></p><h2 id="Dyna-Architecture"><a href="#Dyna-Architecture" class="headerlink" title="Dyna Architecture"></a>Dyna Architecture</h2><ul><li>Direct RL: Environment와 상호작용하면서 얻은 샘플로 value function을 업데이트하는 것.</li><li>Planning: Environment를 모델링한 모델을 통해 얻은 샘플로 value function을 업데이트하는 것.</li></ul><p>이라고 정의해보면(공식적인 정의는 아닌 듯 하다), 결국, 이 두 가지를 적절히 섞어서 value function을 업데이트하면, environment와 상호작용한 샘플이 적어도 효율적인 업데이트가 가능할 것이다.</p><p>이것을 구현한 것 중 하나로, <strong>Dyna architecture</strong>가 있다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200217204140527.png" alt="image-20200217204140527"></p><p>Dyna architecture는 environment와 상호작용하면서 얻은 진짜 샘플로 value function을 업데이트함과 동시에 model도 학습해야 한다. 모델은 진짜 샘플로 학습된 이후, 시뮬레이션 sequence를 생성해서 value function 학습에 이용되게 한다.</p><p>결국 이 모든건, environment를 추정하는 과정이라고 볼 수 있다. 어찌됬든, environment를 경험해서 배우고 그 environment에서 각 state의 최적 액션을 배우고자 함이니까.</p><p>다만, 첫 번째 episode에서는 큰 효과를 발휘하지 못할 수도 있다. 모든 state가 처음이고, value function이 0으로 초기화되어있기 때문.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200217204928616.png" alt="image-20200217204928616"></p><p>하지만, 첫 번째 episode를 마치고나면, reward로 인해 value function이 조금 업데이트되고, model이 학습되면서 planning에 의해 value function이 업데이트가 시작된다. 첫 번째 episode에서 방문했던 모든 state가 사실상 업데이트가 될 수 있으며, 이에 따라, 매우 소수의 episode만을 가지고도 상당히 정확한 policy를 얻을 수 있다.</p><h3 id="Tabular-Dyna-Q-Algorithm"><a href="#Tabular-Dyna-Q-Algorithm" class="headerlink" title="Tabular Dyna-Q Algorithm"></a>Tabular Dyna-Q Algorithm</h3><p>Environment가 deterministic하다고 가정한 Dyna architecture.</p><p>Dyna-Q란, Dyna architecture에서 Q-learning을 채용한 알고리즘을 말한다.</p><p>다음은 Dyna 알고리즘의 일종인 <strong>tabular Dyna-Q 알고리즘</strong>의 pseudo code.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200217205755986.png" alt="image-20200217205755986"></p><p>이때, $Model(S,A) \leftarrow R, S’$의 의미는, model에다가 $S$상태일때, $A$를 취하면 무조건 $R$의 리워드를 얻고 $S’$상태로 간다고 매핑해 두라는 의미이다. (Tabular Dyna-Q 알고리즘은 deterministic environment라고 가정한다. 물론, 알고리즘을 수정하면 non-deterministic하게도 할 수 있겠지)</p><p>한번의 step을 할 때 마다 여러번(여기서는 $$n$$번)의 planning이 일어날 수 있다. Planning은 많이많이 해야 한다.</p><p>Planning은 랜덤으로 start state를 고르고 1 step만 간다.</p><h3 id="Random-Search-in-Dyna-Q"><a href="#Random-Search-in-Dyna-Q" class="headerlink" title="Random Search in Dyna-Q"></a>Random Search in Dyna-Q</h3><p>문제가 있다. 위에서 본 Dyna-Q에서는 planning을 랜덤으로 고른 state에서 진행하고 있다. 만약, 미로찾기에서, 모든 step의 reward는 0이고, final state에서만 +1일 경우, 1회의 episode를 마친 후면, final state의 바로 앞의 state의 value만 업데이트된다(TD종류의 알고리즘을 사용했다면). 그리고, planning은 반드시 아래 사진의 위치를 골라야 value가 업데이트될 것이다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200217211340623.png" alt="image-20200217211340623"></p><p>업데이트 가능 위치가 저기 하나뿐이다.</p><p>이것은 매우 많은 planning이 업데이트를 실패하게끔 만들며, environment 크기가 클수록 상황은 더 심각해진다.</p><p>다음의 개선책이 있겠다.</p><ul><li>Model이 value의 변화를 관찰하고 있다가, value가 변하는 state와 그  action을 기록한다. 그 state로 오게 만들었던 과거 state와 action을 업데이트하기 위해 backward로 간다.</li><li>Update되고 있는 state, action pair가 있는 queue를 관리한다. (위 사진에선 state, action pair가 1개만 queue에 있겠지). 이 queue는 priority queue로, 어느 한쪽의 state만 업데이트되게 하는 것을 막아주는 목적이다. Priority가 높은 놈이 선택되어 그 놈부터 backward로 planning이 이루어지게 된다. 만약, 한 state가 일정 이상 업데이트가 이루어지면 priority를 낮춘다.</li></ul><h3 id="Inaccurate-Models"><a href="#Inaccurate-Models" class="headerlink" title="Inaccurate Models"></a>Inaccurate Models</h3><p>모델이 environment를 반영못하는 경우는 두 가지가 있을 수 있다. 알고리즘은 제대로 되있다고 가정한다.</p><ul><li>학습 초기. Environment와의 interaction 횟수가 매우 적을 때</li><li>Environment가 변할때</li></ul><p>이때는 문제가 될 수 있는게, planning이 잘못된 모델로부터 얻은 transition으로 value를 학습하게 된다.</p><p>첫번째 문제는 어쩔 수 없다. 그러나, 두번째 문제는 대처해야할 필요가 있다.</p><h3 id="Exploration-Exploitation-Trade-off-in-Chaning-Environment"><a href="#Exploration-Exploitation-Trade-off-in-Chaning-Environment" class="headerlink" title="Exploration-Exploitation Trade-off in Chaning Environment"></a>Exploration-Exploitation Trade-off in Chaning Environment</h3><p>Environment가 변하는 것에 대처하기 위해서는 모델도 exploration을 해야 한다. 그저 옛 모델에 머물 수는 없다. 따라서, 모델이 모델링하고 있는 가상의 environment또한 exploration-exploitation dilema가 생기게 된다. Environment가 언제 변할지 알수 없고, 변하지 않는다면, exploration은 손해를 낳는다.</p><p>Exploration을 모델에서 직접 할 수는 없고, policy 학습에 영향을 주어 environment에서 exploration을 하도록 유도하는 방식으로 이루어진다. 모델을 수정하지 않는 이상 모델의 가상 environment가 고정되어 있기 때문에 거기서 exploration해봤자 아무 의미가 없다.</p><p>즉, Planning 또한 exploration을 유도해야 한다. 아예 environment에서 bahavior policy의 exploration에만 의존하면 모델로 인한 planning이 너무 잘못된 방향으로 policy를 유도한다.</p><h3 id="Dyna-Q-Algorithm"><a href="#Dyna-Q-Algorithm" class="headerlink" title="Dyna-Q+ Algorithm"></a>Dyna-Q+ Algorithm</h3><p>Environment가 변할때를 반영하기 위해 Dyna-Q를 변형한 알고리즘이다. Dyna architecture에서 planning은 과거에 방문한 state만 업데이트하게 되는데, 문제는 environment가 변함으로써, 방문한 놈들의 reward, next state 분포가 변할 수 있다는 것. 따라서, 방문한 지 오래된 state에 대해서는 보너스 reward를 <strong>모델에서</strong> 할당한다. 그리고 그 보너스 reward를 value를 계산할 때 반영하게 된다.<br>$$<br>R \leftarrow R + \kappa \sqrt{\tau}<br>$$<br>이때, $\kappa$는 작은 상수이며, $\tau$는 방문한지 얼마나 됬는지에 대한 time step이다. 즉, 방문한 지 오래된 놈이면 reward를 증가시킨다.</p><p>(Value에다가 더하지 말고, action에 따른 결과 reward에다가 더하자.)</p><p>그럼 취한 지 오래된 action으로 인한 transition이 장려될 것이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Models-and-Planning&quot;&gt;&lt;a href=&quot;#Models-and-Planning&quot; class=&quot;headerlink&quot; title=&quot;Models and Planning&quot;&gt;&lt;/a&gt;Models and Planning&lt;/h1&gt;&lt;p&gt;참고
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Reinforcement Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Reinforcement-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="ReinforcementLearning" scheme="https://jaeyoung-blog.github.io/tags/ReinforcementLearning/"/>
    
  </entry>
  
  <entry>
    <title>KL Divergence</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/KL%20Divergence/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/KL Divergence/</id>
    <published>2020-03-03T13:28:59.000Z</published>
    <updated>2020-03-03T01:58:11.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KL-Divergence"><a href="#KL-Divergence" class="headerlink" title="KL-Divergence"></a>KL-Divergence</h1><p>KL-Divergence에는 두 가지가 있다.</p><ul><li>Forward KL-Divergence</li><li>Reverse KL-Divergence</li></ul><p>기본적으로 KL-divergence라고 하면 forward 방식을 가리키며, variational autoencoder에는 reverse방식을 사용한다.</p><h2 id="Forward-KL-Divergence"><a href="#Forward-KL-Divergence" class="headerlink" title="Forward KL-Divergence"></a>Forward KL-Divergence</h2><p>다음이 forward KL-divergence의 식이다.<br>$$<br>KLD(P||Q) = \sum_x P(x) \cdot log(\frac{P(x)}{Q(x)})<br>$$<br>KL-divergence는 두 확률분포 $P,Q$의 유사도를 나타낼 수 있다. 즉, $P,Q$가 서로 비슷한 모양으로 분포된 확률분포라면, KLD값은 낮다.</p><p>이 KL-divergence는 entropy와 관련이 있는데, entropy는 정보량의 기댓값으로, 정보량은 두 확률 사이의 차이가 크면 큰 값을 가진다. 즉, 확률값이 많이 다르면 entropy가 높다.</p><p>두 확률분포간 거리를 최소화하는게 목적이 아니라면, $P,Q$에 두 확률분포를 넣고 거리를 구하면 된다. 보통 $P$는 target, true 확률분포가 들어가고 $Q$에는 측정하고자 하는 대상이 들어간다.</p><p>두 확률분포간 거리를 최소화시키고자 할때는, $P(x)$는 target 확률 분포, 즉, 목표로 하는 확률분포이며, $Q(x)$는 최적화시키고자 하는 확률분포, 즉, 파라미터가 있는 확률분포이다. 그리고 KLD 식을 최소화하는 $Q(x)$를 수정한다. 즉, $P(x)$에 가깝게 $Q(x)$를 수정하게 된다.</p><h3 id="Forward-KLD의-특징"><a href="#Forward-KLD의-특징" class="headerlink" title="Forward KLD의 특징"></a>Forward KLD의 특징</h3><p>Forward KLD는 $P(x)&gt;0$인 모든 지점에 대해서 확률 분포간의 차이를 줄이려고 노력한다. 최적화된 결과, <strong>$P(x)&gt;$*를 만족하는 모든 $x$의 범위를 $Q(x)$가 커버하게 된다.</strong></p><p>다만, 다음처럼, 최소화된 이후의 KLD 값은 상당히 클 수가 있다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/1569470523821.png" alt="1569470523821"></p><p>(그림 출처: <a href="https://wiseodd.github.io/techblog/2016/12/21/forward-reverse-kl/" target="_blank" rel="noopener">https://wiseodd.github.io/techblog/2016/12/21/forward-reverse-kl/</a>)</p><p>위의 경우, KLD를 최소화한 결과지만, 결과값도 상당히 큰 KLD값을 가진다. 왜냐하면, $P(x)&gt;0$인 전체 범위를 커버하려고 하기 때문에, $Q(x)$를 정확하게 모델링하지 않으면(위의 경우, 두 가우시안의 mixture model로 해야 할 것이다) 위와 같은 문제가 생긴다.</p><h2 id="Reverse-KL-Divergence"><a href="#Reverse-KL-Divergence" class="headerlink" title="Reverse KL-Divergence"></a>Reverse KL-Divergence</h2><p>다음이 Reverse KL-divergence의 식이다.<br>$$<br>RKLD(Q||P) = \sum_x Q(x) \cdot log(\frac{Q(x)}{P(x)})<br>$$</p><h3 id="Reverse-KLD의-특징"><a href="#Reverse-KLD의-특징" class="headerlink" title="Reverse KLD의 특징"></a>Reverse KLD의 특징</h3><p>만약, 두 분포간의 거리를 측정하고자 하면, forward 방식과 별 다를게 없다. 다만, 값의 차이는 있다. KLD는 대칭함수가 아니기 때문이다.</p><p>하지만, 최소화하려고 할 경우, 이번엔 파라미터가 있는 $Q(x)$분포와 target 분포 $P(x)$의 자리가 바뀌었다. 이때는, $Q(x)$가 굳이 $P(x)&gt;0$를 만족하는 모든 $x$범위를 커버하려고 하지 않는다. 식에서 보면, $Q(x) \approx 0$으로 맞춰버리면 그 $x$범위는 최소화가 된다. 즉, 필요한 곳만 볼록 솟게 해서 그 범위에서 최소화를 시키고 나머지 봉우리는 $Q(x) \approx 0$으로 해버리므로, <strong>특정 부분만 캡쳐해서 분포간 거리를 최소화한다.</strong></p><p>따라서 다음 그림처럼 된다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/1569470891541.png" alt="1569470891541"></p><p>(그림 출처: <a href="https://wiseodd.github.io/techblog/2016/12/21/forward-reverse-kl/" target="_blank" rel="noopener">https://wiseodd.github.io/techblog/2016/12/21/forward-reverse-kl/</a>)</p><h2 id="어떤-KLD를-사용해야-할까"><a href="#어떤-KLD를-사용해야-할까" class="headerlink" title="어떤 KLD를 사용해야 할까"></a>어떤 KLD를 사용해야 할까</h2><p>만약, 모델링한 $Q(x)$가 target 분포 $P(x)$와 매우 가깝다고 자신이 있을 경우, 또는 $P(x)&gt;0$인 모든 $x$를 커버해야 할 경우, forward KLD를 사용하자.</p><p>하지만, 모델링한 $Q(x)$가 target 분포 $P(x)$와 가깝다는 자신이 없고, 분포의 major한 부분만 캡쳐해도 좋은 경우, Reverse KLD를 사용하자.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://wiseodd.github.io/techblog/2016/12/21/forward-reverse-kl/" target="_blank" rel="noopener">https://wiseodd.github.io/techblog/2016/12/21/forward-reverse-kl/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;KL-Divergence&quot;&gt;&lt;a href=&quot;#KL-Divergence&quot; class=&quot;headerlink&quot; title=&quot;KL-Divergence&quot;&gt;&lt;/a&gt;KL-Divergence&lt;/h1&gt;&lt;p&gt;KL-Divergence에는 두 가지가 있다.&lt;
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Machine Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Machine-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="MachineLearning" scheme="https://jaeyoung-blog.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Hidden Markov Models 2</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Hidden_Markov_Models-2/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Hidden_Markov_Models-2/</id>
    <published>2020-03-03T13:28:57.000Z</published>
    <updated>2020-03-06T02:31:09.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hidden-Markov-Models"><a href="#Hidden-Markov-Models" class="headerlink" title="Hidden Markov Models"></a>Hidden Markov Models</h1><p>Udemy 강좌: <a href="https://www.udemy.com/course/unsupervised-machine-learning-hidden-markov-models-in-python" target="_blank" rel="noopener">https://www.udemy.com/course/unsupervised-machine-learning-hidden-markov-models-in-python</a></p><p>Hidden Markov model(HMM)은 다음과 같이 maximum likelihood estimation을 이용해서 파라미터를 추정하게 된다.<br>$$<br>\theta^* = \underset{\theta}{\text{argmax}} ~ p(x|\theta)<br>$$<br>다음으로, HMM의 파라미터가 무엇인지 적어본다. $\theta = ?$</p><h3 id="Parameters-of-HMM"><a href="#Parameters-of-HMM" class="headerlink" title="Parameters of HMM"></a>Parameters of HMM</h3><p>Markov model에서의 parameter는 initial distribution vector $\pi$와 state transition matrix $A$였다. HMM에서는 state-to-observation matrix $B$가 추가된다. 즉, $\pi, A, B$가 학습 parameter가 된다.</p><ul><li><p>$\pi$</p><p>Initial distribution. row vector이며, hidden state 개수가 $M$개일때, $\pi$는 $(1, M)$ 모양이다. $\pi(i)$하면, $i$번재 state의 initial 확률이다.</p></li><li><p>$A$</p><p>Hidden state transition matrix. 간단하게 state transition matrix이라고도 하며, $t$에서의 hidden state가 주어졌을 때, $t+1$에서의 hidden state의 확률분포이다. 즉, $p(s_{t+1}|s_t)$을 표현한다. 따라서, observation의 종류가 $D$개일때, $M \rightarrow D$이므로, $(M, D)$ 모양이다. $A(i, j)$의 원소는 $p(s_{t+1} = j | s_t = i)$를 의미한다.</p></li><li><p>$B$</p><p>Observation transition matrix이며, $t$에서의 hidden state가 주어졌을 때, $t$에서의 observation의 확률분포이다. $p(x_t|s_t)$를 표현한다. $B(j, k)$의 원소는 $p(x_t = k|s_t = j)$를 의미한다.</p></li></ul><p>이들을 이용한 연산의 예를 잠깐 몇개 들어보면, (Sequence의 시작 index는 1이다.)</p><ul><li>$\pi B = \sum_i \pi(i) B(i,:) = \sum_{z_1} p(z_1)p(x_1|z_1) =  p(x_1)$이다.</li><li>$\pi A B = \sum_{i,j} \pi(i) B(i,j) A(j,:) = \sum_{z_1, z_2} p(z_1)p(z_2|z_1)p(x_2|z_2) = p(x_2)$이다.</li></ul><h2 id="Algorithms-of-HMM"><a href="#Algorithms-of-HMM" class="headerlink" title="Algorithms of HMM"></a>Algorithms of HMM</h2><p>HMM에서도 다른 확률 모델과 마찬가지로 forward propagation, backward propagation과정이 존재한다.</p><h3 id="Forward-Algorithms"><a href="#Forward-Algorithms" class="headerlink" title="Forward Algorithms"></a>Forward Algorithms</h3><p>HMM의 forward 알고리즘은 데이터셋의 확률, 즉, likelihood를 계산하는 알고리즘으로 대표된다. Markov model과는 달리, HMM의 likelihood는 곧바로 파라미터로 나타낼 수가 없어서 likelihood를 적절히 변형해야 한다. 그리고 단순히 변형해도, 그 계산의 time complexity가 매우 커서 계산 최적화를 위한 작업을 해 줘야 한다.</p><h3 id="Problem-1-Find-Likelihood-Distribution"><a href="#Problem-1-Find-Likelihood-Distribution" class="headerlink" title="Problem 1: Find Likelihood Distribution"></a>Problem 1: Find Likelihood Distribution</h3><p>파라미터 $\pi, A, B$를 바탕으로 likelihood를 계산할 수 있어야 한다. Likelihood가 있어야 ML 추정법을 적용할 수 있기 때문. Likelihood는 $p(x|\pi, A,B)$와 같으며, observation $x$의 joint distribution에 해당한다.</p><p>파라미터는 수식의 모든 term에 존재하므로, 생략한다. 먼저, likelihood는 다음과 같다. $T$는 전체 sequence 길이이다. 이 likelihood를 파라미터에 대한 식으로 바꿔주어야 한다.<br>$$<br>p(x) = p(x_1, x_2, …, x_T)<br>$$<br>이것을 hidden Markov model 구조(확률 그래프 모델이니까)에 따라 factorize하기 위해, hidden variable $z$를 삽입한다 (Marginalize).<br>$$<br>p(x) = \sum_{z_1} \sum_{z_2} \cdots \sum_{z_T}p(x_1, x_2, …, x_T, z_1, z_2, …, z_T)<br>$$<br>이제 factorize한다.<br>$$<br>p(x) = \sum_{z_1} \sum_{z_2} \cdots \sum_{z_T} p(z_1) p(x_1|z_1) \prod_{t=2}^{T} p(z_{t}|z_{t-1})p(x_t|z_t)<br>$$<br>이제 parameter에 대한 식으로 바꿀 수 있다.<br>$$<br>p(x) = \sum_{z_1} \sum_{z_2} \cdots \sum_{z_T} \pi(z_1) B(z_1, x_1) \prod_{t=2}^T A(z_{t-1}, z_t) B(z_t, x_t)<br>$$<br>그런데, 이 식의 time complexity를 봐야 한다. 위 식은 결국, 모든 hidden state 조합을 더하는 것이다. Hidden state의 개수는 $M$개이고, 이게 $T$-time 만큼 있으므로, $M^T$개의 hidden state조합이 존재한다. 또한, 하나의 hidden state 조합을 구하기 위해서는 $O(T)$시간이 걸리며, 총 $O(TM^T)$ 시간이 걸리게 된다. 이것은 exponential한 time으로, 매우 비효율적이다.</p><h3 id="Answer-to-Problem-1-Forward-Backward-Algorithm"><a href="#Answer-to-Problem-1-Forward-Backward-Algorithm" class="headerlink" title="Answer to Problem 1: Forward/Backward Algorithm"></a>Answer to Problem 1: Forward/Backward Algorithm</h3><p>그런데, 위 $p(x)$에는 겹치는 연산이 상당히 많다. 이것을 factorize해서(인수분해) 좀 더 효율적으로 $p(x)$를 계산할 수 있을 것 같다.</p><p>우선, $T=2, M=2$인 경우를 생각해본다.<br>$$<br>p(x) = \sum_{z_1} \sum_{z_2} \pi(z_1)B(z_1, x_1)\prod_{t=2}^T A(z_{t-1}, z_t)B(z_t, x_t)<br>$$</p><p>$$<br>= \pi(1)B(1, x_1)A(1, 1)B(1, x_2) +<br>$$</p><p>$$<br>\pi(1)B(1, x_1)A(1, 2)B(2, x_2) +<br>$$</p><p>$$<br>\pi(2)B(2, x_1)A(2, 1)B(1, x_2) +<br>$$</p><p>$$<br>\pi(2)B(2, x_1)A(2, 2)B(2, x_2) +<br>$$</p><p>그런데, 중복된 연산이 너무 많다. 따라서, factorize를 해 주자.<br>$$<br>p(x) =<br>$$<br>$$<br>\pi(1)B(1, x_1)[A(1, 1)B(1, x_2) + A(1, 2)B(2, x_2)] +<br>$$</p><p>$$<br>\pi(2)B(2, x_1)[A(2, 1)B(1, x_2) + A(2, 2)B(2, x_2)]<br>$$</p><p>$T=3, M=2$인 경우도 마찬가지로 할 수 있다. 수식으로 보면 다음처럼 표현할 수 있다.<br>$$<br>p(x) = \sum_{z_1} \sum_{z_2} \sum_{z_3} p(z_1) p(x_1|z_1) \prod_{t=2}^3 p(z_t|z_{t-1})p(x_t|z_t)<br>$$<br>$$<br>= \sum_{z_1} \sum_{z_2} \sum_{z_3} p(z_1)p(x_1|z_1)p(z_2|z_1)p(x_2|z_2)p(z_3|z_2)p(x_3|z_3)<br>$$</p><p>$$<br>= \sum_{z_3} p(x_3|z_3) \sum_{z_2} p(x_2|z_2)p(z_3|z_2) \sum_{z_1} p(z_1)p(x_1|z_1)p(z_2|z_1)<br>$$</p><p>위 식을 다음처럼 변형해본다.<br>$$<br>\sum_{z_3} p(x_3|z_3) \sum_{z_2} p(z_3|z_2) [p(x_2|z_2) \sum_{z_1} p(z_2|z_1)[p(x_1|z_1) p(z_1)]]<br>$$<br>여기서, $\alpha$라고 하는 놈을 정의한다.<br>$$<br>\alpha(3, z_3) = p(x_3|z_3) \sum_{z_2} p(z_3|z_2) \alpha(2, z_2)<br>$$<br>$$<br>\alpha(2, z_2) = p(x_2|z_2) \sum_{z_1} p(z_2|z_1) \alpha(1, z_1)<br>$$</p><p>$$<br>\alpha(1, z_1) = p(x_1|z_1)p(z_1)<br>$$</p><p>이때, $p(x)$는 다음처럼 된다.<br>$$<br>p(x) = \sum_{z_3}\alpha(3, z_3)<br>$$<br>즉, 다음처럼 일반화가 가능하다.<br>$$<br>p(x) = \sum_{z_T} \alpha(T, z_T)<br>$$<br>$$<br>\alpha(t, z_t) = p(x_t|z_t) \sum_{z_{t-1}} p(z_t|z_{t-1}) \alpha(t-1, z_{t-1})<br>$$</p><p>$$<br>\alpha(1, z_1) = p(x_1|z_1)p(z_1)<br>$$</p><p>이렇게 되면, likelihood $p(x)$를 계산하는데, $O(MT)$면 끝이 난다.</p><h3 id="Problem-2-Find-the-Most-Likely-Sequence-of-Hidden-States"><a href="#Problem-2-Find-the-Most-Likely-Sequence-of-Hidden-States" class="headerlink" title="Problem 2: Find the Most Likely Sequence of Hidden States"></a>Problem 2: Find the Most Likely Sequence of Hidden States</h3><p>Likelihood를 구했다면, 이번엔 가장 probable한 hidden states의 sequence를 찾을 수 있어야 한다. 즉,<br>$$<br>z^* = \underset{z}{ \text{argmax} } ~ p(z|x)<br>$$</p><p>를 만족하는 hidden states $z$의 joint distribution을 계산할 수 있어야 한다.</p><p>그런데, 이때, 위 식은 다음처럼 정리가 가능하다.<br>$$<br>z^* = \underset{z}{ \text{argmax} } ~ p(z|x) = \underset{z}{ \text{argmax} } ~ \frac{p(x,z)}{p(x)} = \underset{z}{ \text{argmax} } ~ p(x, z)<br>$$<br>그런데, 여기서, $p(x, z)$는 $p(x)$를 구하는 식에서 marginalization만 빼면 된다. 즉,<br>$$<br>p(x, z) = p(z_1)p(x_1|z_1) \prod_{i=2}^T p(z_{t}|z_{t-1})p(x_t|z_t)<br>$$<br>이다. 하나의 joint probability를 계산하려면 $O(T)$시간이 걸리는 셈. 그러면, observations들에 맞게 가장 그럴듯한 hidden state들을 찾으려면, hidden state의 모든 조합을 저 식에 넣어보고 가장 큰 확률값을 주는 조합을 고르면 될 것이다. 그러나, 이 방법은 $O(TM^T)$가 걸린다.</p><h3 id="Answer-to-Problem-2-Viterbi-Algorithm"><a href="#Answer-to-Problem-2-Viterbi-Algorithm" class="headerlink" title="Answer to Problem 2: Viterbi Algorithm"></a>Answer to Problem 2: Viterbi Algorithm</h3><p>지금, $p(x, z)$가 가장 큰 $z$조합을 구해야 한다. HMM은 Markov model이기 때문에 $t-1$까지 최적의 $z$ sequence를 구해놨다면, $t$에서의 $z_t$는 greedy하게 선택하면 $t$까지의 $z$ sequence는 optimal이다. 즉, $t=1$에서, $p(z_1)p(x_1|z_1)$이 최대가 되는 $z_1$를 구하고, $t=2$에서, $p(z_2|z_1)p(x_2|z_2)$이 최대가 되는 $z_2$를 구하고 이런식으로 앞에서부터 greedy하게 선택해도 된다는 것이다.</p><h3 id="Problem-3-Training-HMM"><a href="#Problem-3-Training-HMM" class="headerlink" title="Problem 3: Training HMM"></a>Problem 3: Training HMM</h3><p>다음을 만족하는 parameter $\pi, A, B$를 계산한다.<br>$$<br>A^* , B^* , \pi^* = \underset{A,B,\pi}{ \text{argmax} } ~ p(x|A,B,\pi)<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hidden-Markov-Models&quot;&gt;&lt;a href=&quot;#Hidden-Markov-Models&quot; class=&quot;headerlink&quot; title=&quot;Hidden Markov Models&quot;&gt;&lt;/a&gt;Hidden Markov Models&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Machine Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Machine-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="MachineLearning" scheme="https://jaeyoung-blog.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Hidden Markov Models 1</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Hidden_Markov_Models-1/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Hidden_Markov_Models-1/</id>
    <published>2020-03-03T13:28:55.000Z</published>
    <updated>2020-03-06T02:27:39.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hidden-Markov-Models"><a href="#Hidden-Markov-Models" class="headerlink" title="Hidden Markov Models"></a>Hidden Markov Models</h1><p>Udemy 강좌: <a href="https://www.udemy.com/course/unsupervised-machine-learning-hidden-markov-models-in-python" target="_blank" rel="noopener">https://www.udemy.com/course/unsupervised-machine-learning-hidden-markov-models-in-python</a></p><h2 id="Markov-Assumption"><a href="#Markov-Assumption" class="headerlink" title="Markov Assumption"></a>Markov Assumption</h2><p>Markov property라고도 부르며, time-series 데이터나, 상태 기반 데이터에서, 현재의 상태는 오로지 바로 이전 상태만으로부터 영향을 받는다는 가정이다. 즉 다음과 같다.<br>$$<br>P(s_t|s_{t-1}s_{t-2}\cdots s_1) = P(s_t|s_{t-1})<br>$$<br>이전 상태들이 주어졌을 때, 현재 상태의 확률 분포는 오로지 바로 앞전 상태만으로부터 영향을 받는다. 즉, $s_{t-1}$이 주어진다면, $s_t$는 $s_{t-2},…,s_1$와 독립이다(Conditional independence).</p><p>Markov assumption은 상당히 강력한 가정으로, 많은 분야에 응용되지만(자연어와 같은 time-series, state machine 기반 모델 등), 바로 이전 상태를 제외한 그 이전 상태들을 모두 무시하므로, 성능에 한계가 있다.</p><p>보통 markov assumption하면 first-order markov assumption을 의미하며, 이전 몇 개의 데이터로부터 영향을 받게 할 것인가에 따라 second-order, third-order 등이 있다.</p><p>Second-order markov assumption은 다음과 같다.<br>$$<br>P(s_t|s_{t-1}, \cdots, s_1) = P(s_t|s_{t-1}, s_{t-2})<br>$$<br>Third-order markov assumption은 다음과 같다.<br>$$<br>P(s_t|s_{t-1},\cdots,s_{1}) = P(s_t|s_{t-1},s_{t-2},s_{t-3})<br>$$<br>그런데, 예상하다시피, 마르코프 가정으로 구현한 모델은 이전 모든 상태에 영향을 받게 모델링한 모델보다 성능이 떨어질 가능성이 높다. 그럼에도 불구하고 사용하는 이유는, 우리가 관심있는것은 지금까지 지나온 상태들의 joint distribution인데, 마르코프 가정이 없다면, joint distribution계산 과정이 매우 복잡해진다. 그래서, 쉽게 모델링하기 위해 마르코프 가정을 사용하며, 성능도 쓸만한 편이다.</p><h2 id="Markov-Models"><a href="#Markov-Models" class="headerlink" title="Markov Models"></a>Markov Models</h2><p>마르코프 가정(Markov assumption)을 바탕으로 모델링한 모델을 말한다. 다음과 같이 state machine도 마르코프 모델 중 하나이다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20191120062127996.png" alt="image-20191120062127996"></p><p>State machine은 일반적으로 다음 상태의 확률은 오직 현재 상태에 의해 영향을 받고 결정된다. 위와 같은 state machine에서의 transition probabilities는 행렬로 표현이 가능하며 이러한 행렬을 <strong>state transition probability matrix</strong>라고 부른다. 마르코프 모델에서는 현재에 기반한, 다음 상태 또는 다음 무언가의 확률 분포를 matrix로 표현이 가능하며, $M$개의 노드가 있을 때, transition probability matrix는 $M$x$M$행렬로 표현한다.</p><p>State transition probability matrix의 한 행 원소의 합은 1이어야 한다. $i$번째 행이 의미하는 것은 $s_i$를 기반으로 다음 state의 확률분포이기 때문이다.</p><h3 id="Starting-Position"><a href="#Starting-Position" class="headerlink" title="Starting Position"></a>Starting Position</h3><p>지금까지 지나온 상태들의 joint distribution을 계산해 보면 다음과 같다.<br>$$<br>P(s_t,s_{t-1},\cdots,s_1) = P(s_1) \prod_{i=2}^{t} P(s_i|s_{i-1})<br>$$<br>State transition probability matrix를 정의했다면, $P(s_i|s_{i-1})$는 알 수 있다. 그런데, 초기 상태인 $P(s_1)$는 행렬에 없다.</p><p>따라서, initial distribution을 정의해 주어야 하며, $1$x$M$ 벡터로 구성된다.</p><h3 id="Training-of-Markov-Models"><a href="#Training-of-Markov-Models" class="headerlink" title="Training of Markov Models"></a>Training of Markov Models</h3><p>마르코프 모델의 학습은 MLE(Maximum Likelihood Estimation)으로 이루어진다. 즉, $s_j \rightarrow s_i$로의 확률 분포는 데이터셋에서 $s_j$ 다음으로 $s_i$가 얼만큼의 비율로 등장하느냐에 따라 결정된다.</p><p>예를들어, 다음의 문장이 있다.</p><p>“I like cats”</p><p>“I like dogs”</p><p>“I love kangaroos”</p><p>그럼 상태의 집합은 ${\text{I}, \text{like}, \text{cats}, \text{dogs}, \text{love}, \text{kangaroos}}$이렇게 6개의 원소로 구성되어 있으며, initial distribution은 $P(\text{I})=1$이고, 나머지 단어의 경우, 0이다.</p><p>또한, $P(\text{like}|\text{I})=0.66, P(\text{love}|\text{I})=0.33, P(else|\text{I})=0$이다.</p><h3 id="Smoothing"><a href="#Smoothing" class="headerlink" title="Smoothing"></a>Smoothing</h3><p>그런데, 확률이 0이라는 것은 매우 위험하다. 반대로, 어떤 것의 확률이 1이라는 것 또한 매우 위험하다. MLE에 의해 트레이닝 데이터에 나오지 않은 것들은 모두 0이 되버리는데, 이는 오버피팅을 야기한다. 따라서 학습 데이터에 모든 경우의 수가 다 들어있기를 바래야 하는데, 이는 비현실적이다. 따라서 어떤 것에 1 또는 0의 확률을 할당하는 것을 피해야 하는데, 방법으로는 <strong>smoothing</strong>이라는 것이 있다.</p><p>smoothing이란, 0확률을 막아주는 기법을 의미하는데, 다음의 경우가 있다.</p><ul><li><p>No smoothing</p><p>기본적인, smoothing을 적용하지 않은 경우.<br>$$<br>P(s_i|s_j) = \frac{\text{count}(s_j \rightarrow s_i)}{\text{count}(s_j \rightarrow *)}<br>$$</p></li><li><p>Add-one smoothing</p><p>분자에 +1, 분모에 +$M$을 해 준다.<br>$$<br>P(s_i|s_j) = \frac{\text{count}(s_j \rightarrow s_i) + 1}{\text{count}(s_j \rightarrow *) + M}<br>$$<br>이때, $M$은 상태의 개수(자연어의 경우엔, 단어 개수)이다. 이러면, 모든 확률은 1 또는 0이 되지 않으며, $\sum_i P(s_i|s_j)=1$이 유지된다.</p></li><li><p>Add-epsilon smoothing</p><p>분자에 +1이 아니라, +$\epsilon$을 해 준다. 분모에는 +$\epsilon M$을 해 준다.<br>$$<br>P(s_i|s_j) = \frac{\text{count}(s_j \rightarrow s_i) + \epsilon}{\text{count}(s_j \rightarrow *) + \epsilon M}<br>$$<br>이때, $\epsilon$은 학습 파라미터로써, 추론해도 되고 hyper parameter로 해도 된다. Add-one 스무딩이 때로는 너무 강하거나 너무 약할때가 있다. 따라서, 스무딩의 강도를 조정하겠다는 이야기가 된다.</p></li></ul><h2 id="Markov-Chains"><a href="#Markov-Chains" class="headerlink" title="Markov Chains"></a>Markov Chains</h2><p>마르코프 모델이면서, 확률 과정(stochastic process)을 모델링한 것을 의미한다. 보통 통계에서샘플링이라 함은 샘플 하나를 얻는 과정을 말하지만, stochastic(random) process에서의 샘플링은 sequence of random variables을 얻는 과정이고, 하나의 샘플이 time series이다. 마르코프 체인 역시 stochastic process이며, 하나의 샘플은 time-series이다.</p><p>State transition probability distribution matrix를 $A$라고 하고, initial distribution을 $\pi$라고 했을 때, $t$번째 상태에서의 marginal distribution은 다음과 같다.<br>$$<br>P(s_t) = \pi A^{t}<br>$$<br>이때, $A$의 $i$번째 row는 $i$번 상태에서 다른 상태로 갈 확률분포이며, $A$는 $M$x$M$ 행렬이고, $\pi$는 1x$M$벡터이다. 따라서, 위 식은 1x$M$벡터가 나온다.</p><p>Marginal distribution에 대해 잠깐 설명해보면, 예를들어, 첫번째 상태 $s_1$의 확률분포는 다음과 같다.<br>$$<br>P(s_1) = \sum_{s_0} P(s_1,s_0) = \sum_j \pi_j A_{j,i} = \pi A<br>$$</p><h3 id="Stationary-Distribution"><a href="#Stationary-Distribution" class="headerlink" title="Stationary Distribution"></a>Stationary Distribution</h3><p>그런데, $A$를 반복해서 곱하다 보면(확률 과정을 반복), 어느 순간 marginal distribution의 변화가 다음과 같은 상태가 된다.<br>$$<br>P(s_t) = \pi A^t = P(s_{t-1}) = \pi A^{t-1}<br>$$<br>이때, $p(s)=p(s)A$를 만족한다. 이때, $p(s)$를 <strong>stationary distribution</strong>이라고 부른다. 이 stationary distribution $p(s)$을 보면, 행렬 $A$의 전치행렬인 $A^T$의 eigenvector($p(s)$는 벡터이다)와 같은 성질이다는 것을 알 수 있다. 다만, 그에 상응하는 eigen value는 1이다.</p><h3 id="Limiting-Distribution"><a href="#Limiting-Distribution" class="headerlink" title="Limiting Distribution"></a>Limiting Distribution</h3><p>그래서, 어떤 stochastic process의 최종 distribution은 무엇일까. 이 최종 distribution은 <strong>limiting distribution</strong> 또는 <strong>equilibrium distribution</strong>이라고 부른다. 즉, 다음과 같다.<br>$$<br>p(s_\infty) = \pi A^\infty<br>$$<br>그런데, 이건 stationary distribution과 같은가?</p><p>일단, <strong>limiting distribution은 stationary distribution이다. 하지만, 모든 stationary distribution이 다 limiting distribution이 되는 건 아니다.</strong> Eivenvector는 최대 $A$의 차원만큼 개수가 존재하며, 그중에서 eigen value가 1인 eigen vector는 여러개 일 수 있다. 이들 중 어느놈이 limiting distribution일까..</p><p>일단, limiting distribution이 구해지면, 그 stochastic process를 통해 앞으로 나올 time series를 샘플링할 수 있다(MCMC의 원리?).</p><h3 id="Perron-Frobenius-Theorem"><a href="#Perron-Frobenius-Theorem" class="headerlink" title="Perron-Frobenius Theorem"></a>Perron-Frobenius Theorem</h3><p>선형 대수학에서의 어떤 이론인데, stochastic process에 맞아떨어지는 이론이다.</p><p>어떤 행렬 $A = (a_{i,j})$에 대해, $A$는 $n$-by-$n$ matrix이고, 모든 원소가 양수이면, $A$의 가장 큰 양수 eigenvalue $r$이 존재하고 그와 상응하는 eigenvector의 모든 원소는 양수이다. 그리고, 모든 원소가 양수인 eigenvector는 이 eigenvector가 유일하며, 다른 eigenvector는 반드시 음수가 하나이상 포함되어 있다.</p><p>Stochastic process에서 다음 두 가지 조건을 만족시킨다면, 그 Markov chain은 반드시 유일한 stationary distribution을 가지며, 따라서, 해당 stationary distribution은 limiting distribution이라고 확신할 수 있다. Transition matrix $A$에 대해,</p><ul><li>$\sum_j a_{i,j} = 1$, 즉, 한 row의 모든 원소 합이 1이다. 하나의 row는 probability distribution이다.</li><li>$a_{i,j} \not = 0$, 어떠한 원소도 0이 아니다.</li></ul><p>여기서, transition matrix $A$의 eigenvector는 distribution으로써의 역할을 해야 하므로 모두 양수여야 하는데, 그런 조건을 만족하는 eigenvector는 오직 하나밖에 없으므로, 이놈이 limiting distribution이라고 확신할 수 있다.</p><h2 id="Application-of-Markov-Models"><a href="#Application-of-Markov-Models" class="headerlink" title="Application of Markov Models"></a>Application of Markov Models</h2><h3 id="Language-Models‌"><a href="#Language-Models‌" class="headerlink" title="Language Models‌"></a>Language Models‌</h3><p>Second-order language model을 예로 들자. 먼저, 문장의 첫 두 단어에 대한 initial distribution을 만들고 앞 두 단어가 주어졌을 때, 현재 단어에 대한 transition matrix를 만든다.‌</p><p>학습은 실제 문장들로 학습하며, 문장에서 앞 두 단어가 주어졌을 때, 현재 자리에 오는 단어의 비율을 transition matrix로 한다. 만약, 현재 단어가 끝 단어라면, 이 단어가 끝 단어일 확률 계산에 추가해준다.‌</p><p>앞 $$k$$개의 단어를 바탕으로 현재 단어를 추정하는 Markov model이다.</p><h3 id="Google’s-PageRank-Algorithms‌"><a href="#Google’s-PageRank-Algorithms‌" class="headerlink" title="Google’s PageRank Algorithms‌"></a>Google’s PageRank Algorithms‌</h3><p>Google의 페이지랭크 알고리즘은 각 페이지를 방문할 확률인 stationary distribution(정확히는 limiting distribution)이 높은 순서대로 랭크를 매기는 것을 말한다. 한 페이지에서 다른 페이지로 가는 링크가 있을 것이고, $A$페이지에서 $M$개의 링크가 있고, $B$페이지로 가는 링크가 존재한다면, $A→B$ 로의 transition probability는 $\frac{1}{M}$이 된다. 이렇게 transition matrix를 정의하고, matrix에서 0인 원소들을 smoothing을 이용해서 없앤 후, stationary distribution을 계산한다.</p><p>현재 페이지에서 다음 페이지로 갈 확률이 존재하는 Markov model이다.</p><h2 id="Hidden-Markov-Models-1"><a href="#Hidden-Markov-Models-1" class="headerlink" title="Hidden Markov Models"></a>Hidden Markov Models</h2><p>마르코프 모델에서 hidden state상태를 추가한 형태. hidden state가 markov chain을 이루고 hidden unit에서 visible variable이 컨디셔닝 되어 나온다. 다음 그림은 markov chain과 hidden markov chain을 표현한 것인데, 노란색이 hidden unit들, 파란색이 visible unit을 표현한 것이다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20191201145914442.png" alt="image-20191201145914442"></p><p>Hidden markov model에서는 observable state $o_t$가 이전 observable state $o_{t-1}$에 영향을 받지 않는다. 대신 같은 시간의 hidden state인 $h_t$에 의해서만 영향을 받는다는 가정을 한다.</p><p>Markov model은 initial distributoin $\pi$와 transition probability matrix $A$가 존재하지만, hidden markov model에서는 initial distribution $\pi$와 hidden state transition matrix $A$, hidden state로부터 visible state로의 변환을 의미하는 transition matrix $B$가 존재한다.</p><h3 id="Application-of-HMM"><a href="#Application-of-HMM" class="headerlink" title="Application of HMM"></a>Application of HMM</h3><p>다음과 같은 application이 존재할 수 있다.</p><ul><li>Parts of Speech (POS) Tagging Systems</li><li>Stock Price Models</li></ul><h4 id="Parts-of-Speech-POS-Tagging-Systems"><a href="#Parts-of-Speech-POS-Tagging-Systems" class="headerlink" title="Parts of Speech (POS) Tagging Systems"></a>Parts of Speech (POS) Tagging Systems</h4><p>각 단어를 visible unit으로, 명사인지 동사인지, 형용사인지 등을 hidden state로 삼아서 HMM을 모델링하는 것을 말한다.</p><p>크게, 음성 시그널을 최외곽 visible variable, 단어를 hidden state로 삼아서 markov chain을 구성하는데, 이 애들이 다시 다른 HMM에 들어가는 방식이라고 생각하면 된다.</p><h4 id="Stock-Price-Models"><a href="#Stock-Price-Models" class="headerlink" title="Stock Price Models"></a>Stock Price Models</h4><p>HMM이 hidden time series($z$들)를 캐치할 수 있다는 것에 주목해서 stock price의 hidden factor를 HMM으로 캐치하게 한 모델을 말한다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20191201151728545.png" alt="image-20191201151728545"></p><p>이때, visible variable은 deterministic한 것이 아니라 generative하게 distribution으로 모델링할 수도 있다(위 그림처럼).</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hidden-Markov-Models&quot;&gt;&lt;a href=&quot;#Hidden-Markov-Models&quot; class=&quot;headerlink&quot; title=&quot;Hidden Markov Models&quot;&gt;&lt;/a&gt;Hidden Markov Models&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Machine Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Machine-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="MachineLearning" scheme="https://jaeyoung-blog.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Restrict Boltzmann Machines 2</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Restrict-Boltzmann-Machines-2nd/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Restrict-Boltzmann-Machines-2nd/</id>
    <published>2020-03-03T13:28:53.000Z</published>
    <updated>2020-03-06T02:01:07.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Restrict-Boltzmann-Machines"><a href="#Restrict-Boltzmann-Machines" class="headerlink" title="Restrict Boltzmann Machines"></a>Restrict Boltzmann Machines</h1><p>이번에는 RBM의 학습, 즉, weight를 수정하는 방법을 알아보고자 한다. RBM의 학습 역시 MLE 방식을 이용하게 된다. 즉, 데이터에 대한 likelihood를 최대화하게 된다.<br>$$<br>\hat{W}, \hat{b}, \hat{c} = \underset{W,b,c}{ \text{argmax} } ~ p(v)<br>$$<br>데이터는 visible unit에 들어가게 되므로, $$p(v)$$를 최대화하게 된다.</p><p>그런데 왜 $$p(v)$$를 최대화하는게 RBM의 학습일까. 그 이유는, 현재 데이터가 얻어진 이유는 상대적으로 높은 확률을 가지기 때문에 얻어진 것일 것이고, 왠만하면 불안정 상태보다 안정 상태의 데이터일 가능성이 높다.</p><p>그런데, $$p(v)$$는 intractable하다.<br>$$<br>p(v) = \sum_h p(v,h) = \sum_h \frac{1}{Z} \text{exp} { \sum_i \sum_j W_{i,j} v_i h_j + \sum_i b_i v_i + \sum_j c_j h_j }<br>$$<br>여기서, normalizaiton constant는 모델 크기가 매우 작지 않는 이상 intractable하다.</p><h2 id="Free-Energy"><a href="#Free-Energy" class="headerlink" title="Free Energy"></a>Free Energy</h2><p>일단 미분을 위해 다음을 정의한다.<br>$$<br>F(v) = -\text{log} \sum_h e^{-E(v,h)}<br>$$<br>$F(v)$를 Free energy라고 정의한다. 특별한 의미가 있는것은 아니라고 한다. 편의상 정의하는 것 같다.</p><p>Free energy식을 조금만 변형한다.<br>$$<br>e^{-F(v)} = \sum_h e^{-E(v, h)}<br>$$<br>Free energy를 이용해서 $p(v)$를 $F(v)$에 대한 식으로 정리해보면,<br>$$<br>p(v) = \sum_h p(v,h) = \sum_h \frac{1}{Z} e^{-E(v,h)} \<br>p(v) = \frac{1}{Z} e^{-F(v)}<br>$$<br>따라서, normalization constant는 다음과 같다고도 할 수 있다.<br>$$<br>Z = \sum_{v’} e^{-F(v’)}<br>$$<br>이제, $\text{log} ~ p(v)$를 미분해보면,<br>$$<br>\frac{d \text{log} <del>p(v)}{d\theta} = \frac{d}{d\theta}[\text{log} \frac{1}{Z}e^{-F(v)}]<br>$$<br>$$<br>= \frac{d}{d\theta} [\text{log} ~e^{-F(v)} - \text{log}</del>Z]<br>$$</p><p>$$<br>= \frac{d}{d\theta}[-F(v)] - \frac{d}{d\theta}[\text{log} Z]<br>$$</p><p>$$<br>= -\frac{dF(v)}{d\theta} - \frac{1}{Z} \frac{dZ}{d\theta}<br>$$</p><p>$$<br>= -\frac{dF(v)}{d\theta} - \frac{1}{Z} \frac{d}{d\theta}[\sum_{v’} e^{-F(v’)}]<br>$$</p><p>$$<br>= -\frac{dF(v)}{d\theta} + \sum_{v’} \frac{1}{Z} e^{-F(v’)} \frac{dF(v’)}{d\theta}<br>$$</p><p>$$<br>= -\frac{dF(v)}{d\theta} + \sum_{v’} p(v’) \frac{dF(v’)}{d\theta}<br>$$</p><p>이때, 양변에 - 부호를 곱해주면서,<br>$$<br>-\frac{d \text{log} ~p(v)}{d\theta} = \frac{dF(v)}{d\theta} - \sum_{v’}p(v’)\frac{dF(v’)}{d\theta}<br>$$<br>그런데, 이때, 두번째 항은 $E[\frac{dF(v’)}{d\theta}]$와 같다.<br>$$<br>-\frac{d\text{log} ~ p(v)}{d\theta} = \frac{dF(v)}{d\theta} - E[\frac{dF(v’)}{d\theta}]<br>$$<br>이제 이것을 적분해보면, negative log likelihood를 얻을 수 있다. 이는 곧 cost와 같다.<br>$$<br>\mathbb{L} = F(v) - E[F(v’)]<br>$$<br>이 loss는 두 개의 term으로 나뉘는데, 첫번째는 positive term이고, 두번째는 negative term인데, 다음과 같은 역할을 한다.</p><ul><li><p>Positive term</p><p>Visible unit에 입력으로 들어간 데이터에 대한 에너지는 낮게 유도하는 효과가 있다.</p></li><li><p>Negative term</p><p>Visible unit에 입력으로 들어간 데이터 이외에 모든 조합들에 대해 에너지를 높게 유도한다.</p></li></ul><p>사실상 대부분 EBM은 위와 같은 cost를 가진다고 한다. (또는 가저야만 한다고 한다)</p><h2 id="Contrastive-Divergence"><a href="#Contrastive-Divergence" class="headerlink" title="Contrastive Divergence"></a>Contrastive Divergence</h2><p>EBM에서, positive data와 negative data를 가지고, positive data의 에너지는 상대적으로 낮게, negative data의 에너지는 상대적으로 높게 학습시키는 방법을 말한다.</p><p>위 cost function을 보면, negative term은 intractable하다.  가능한 모든 visible unit 조합이 필요하기 때문. 따라서 기댓값을 추정해야 하는데, 기댓값은 Monte Carlo estimation처럼 샘플들의 평균으로 추정할 수 있다. 즉, negative term은 다음처럼 표현이 가능하다.<br>$$<br>E[F(v’)] = \frac{1}{n} \sum_{i=1}^n F(v’_i)<br>$$<br>Visible unit을 샘플링해야 위 수식처럼 negative term을 추정할 수 있는데, visible unit을 샘플링해야 한다는 이야기가 된다. 이것은 RBM으로 샘플링이 가능하다.</p><h3 id="Gibbs-Sampling"><a href="#Gibbs-Sampling" class="headerlink" title="Gibbs Sampling"></a>Gibbs Sampling</h3><p>Gibbs sampling이라고 하면, Markov chain Monte Carlo의 일종이다. Markov chain Monte Carlo 방법은 어떤 random variable에 대해 모델링한 후, Markov chain을 통해 샘플을 생성하는데, 모델이 여러 random variable을 포함하는 경우, Gibbs sampling을 이용한다. Gibbs sampling은 하나의 random variable 이외에 다른 random variable이 모두 주어졌다(given)고 가정하고 샘플링하는 방식이다.</p><p>RBM은 다음과 같은 과정으로 샘플을 생성한다.</p><ol><li>주어진 데이터로 $p(h=1|v)$를 계산한다.</li><li>$p(h=1|v)$를 이용해서 $h$를 샘플링한다.</li><li>샘플링한 $h$를 이용해서 $p(v’=1|h)$를 계산한다.</li><li>$v’$을 샘플링한다.</li></ol><p>이렇게 하면, visible unit하나를 새로 샘플링한 것이다.</p><p>RBM의 구조는 Markov chain의 구조이며(visible unit은 바로 앞의 hidden unit들에게 의해서만 영향을 받음), 위 처럼 샘플링하는 것은 MCMC의 일종이다. 특히, Gibbs sampling의 일종이라고 하는데, 왜 Gibbs sampling인지는 잘 모르겠다. 여러 블로그들은 그저 “이것은 Gibbs sampling이다” 라고만 소개되어 있고, 이유를 소개한 블로그는 찾기 힘들다.</p><h3 id="CD-k-Contrastive-Divergence-with-k-Samples"><a href="#CD-k-Contrastive-Divergence-with-k-Samples" class="headerlink" title="CD-k (Contrastive Divergence with k Samples)"></a>CD-k (Contrastive Divergence with k Samples)</h3><p>그럼 visible unit을 어떻게 샘플링해야 하는지는 결정되었고(RBM을 통한 MCMC 샘플링), 과연 몇 개의 샘플이 필요한가가 논의될 필요가 있다. MCMC를 통한 기댓값 추정은 MCMC의 이름에서 알수 있다시피, Monte Carlo 추정법을 이용하게 된다. 그리고, Monte Carlo 추정은 샘플이 많을수록 좋고 정확하다.</p><p>하지만, RBM에서는 단 하나의 샘플로만 해도 괜찮다고 한다. 즉, CD-1 방식을 이용한다. RBM의 학습은, 데이터셋에서 관찰되는 visible unit조합들에 대해서의 에너지는 높게, 그 이외의 조합들에 대해서는 에너지가 낮게 하는게 목적이다. CD-1 방식은 CD-k 중에서는 그 효과가 가장 떨어진다고 할지라도, 크게 문제가 되지 않는다고 한다.</p><h3 id="Fake-Loss"><a href="#Fake-Loss" class="headerlink" title="Fake Loss"></a>Fake Loss</h3><p>RBM의 loss는 직접 계산할 수 없다. Negative term이 intractable하기 때문이다. 따라서, 이를 Monte Carlo 추정법으로 추정했다(1개의 샘플로). 즉, 다음처럼 loss가 수정될 수 있다.<br>$$<br>\text{fake-loss} = F(v) - F(v’)<br>$$<br><strong>Fake loss는 공식적으로 붙은 이름은 아니다.</strong></p><p>진짜 loss는 아니지만, loss를 추정한 것이라서 이렇게 부르기로 한다.</p><p>진짜 loss는 다음 식이다.<br>$$<br>\text{loss} = F(v) - \mathbb{E}_{v’}[F(v’)]<br>$$</p><h3 id="Intractability-of-Free-Energy"><a href="#Intractability-of-Free-Energy" class="headerlink" title="Intractability of Free Energy"></a>Intractability of Free Energy</h3><p>그런데, free energy의 식을 보면 가능한 모든 hidden unit 조합에 대한 summation이 있다.<br>$$<br>F(v) = -\text{log} \sum_h e^{-E(v,h)}<br>$$<br>Hidden unit 조합을 모두 구한다는 것도 사실상 intractable하다. Free energy를 tractable하게 변환할 수 있다면, loss 함수를 계산할 수 있을 것이다.</p><p>Free energy 식에서, $E(v,h)$를 원래 에너지 식으로 대체한다.<br>$$<br>F(v) = - \text{log} \sum_h \text{exp}(\sum_i \sum_j W_{i,j}v_ih_j + \sum_i b_iv_i + \sum_j c_j h_j)<br>$$<br>그리고 다음처럼 $$h$$와 관계없는 항은 제일 밖으로 뺄 수 있다.<br>$$<br>F(v) = -\text{log} ~\text{exp}(\sum_i b_i v_i) \sum_h \text{exp}(\sum_i \sum_j W_{i,j}v_i h_j + \sum_j c_jh_j)<br>$$<br>$$<br>= -\sum_i b_iv_i - \text{log} \sum_h \text{exp} (\sum_i \sum_j W_{i,j} v_i h_j + \sum_j c_j h_j)<br>$$</p><p>$\text{exp}$안에 $\sum_j$가 공통으로 포함되어 있으므로 밖으로 뺀다.<br>$$<br>F(v) = -\sum_i b_i v_i - \text{log} \sum_h \prod_j \text{exp} (\sum_i W_{i,j} v_i h_j + c_j h_j)<br>$$<br>$h_j$도 빼보자.<br>$$<br>F(v) = - \sum_i b_i v_i - \text{log} \sum_h \prod_j \text{exp} {h_j(\sum_iW_{i,j} v_i + c_j)}<br>$$<br>그리고, $u_{j} = \sum_i W_{i,j} v_i + c_j$라고 해 보자(어차피 $i$방향으로는 summation이므로 변수가 아니다. 따라서 $j$로만 인덱싱한다).<br>$$<br>F(v) = -\sum_i b_i v_i - \text{log}\sum_h \prod_j \text{exp} {h_j u_j}<br>$$<br>$h_j$는 베르누이 변수이므로, ${0, 1}$중 하나의 값을 가진다. $\text{log}$안의 term은 가능한 모든 $h$의 조합을 더한 것을 의미하게 된다. 즉, hidden unit 수가 $M$개라면, $2^M$개의 경우를 모두 더하는 것이다.</p><p>근데, 만약, hidden unit 개수가 2개라고 해 보자(즉 $j=[0,1]$). 그럼 $\text{log}$안은 다음처럼 된다.<br>$$<br>e^{0u_0}e^{0u_1} + e^{0u_0}e^{1u_1} + e^{1u_0}e^{0u_1} + e^{1u_0}e^{1u_1}<br>$$<br>$$<br>= (e^{0u_0} + e^{1u_0})(e^{0u_1} + e^{1u_1})<br>$$</p><p>$j$번째 hidden unit $h_j$는 0과 1밖에 가지지 못하기에 위 4가지 경우가 전부.</p><p>그렇다면, hidden unit 개수가 $M=3$이라고 해 보자. 정리해보면 다음처럼 나올 것이다.<br>$$<br>(e^{0u_0} + e^{1u_0})(e^{0u_1} + e^{1u_1})(e^{0u_2} + e^{1u_2})<br>$$<br>즉,<br>$$<br>\sum_h \prod_j \text{exp} { h_j u_j } = \prod_{j} \sum_{h_j={0,1}} \text{exp} {h_j u_j}<br>$$<br>이며, 이것의 time complexity는 $M$이다. (인수분해를 활용한 계산 최적화!)</p><p>즉, free energy는 다음처럼 정리가 가능하다.<br>$$<br>F(v) = -\sum_i b_i v_i - \text{log} \prod_j \sum_{h_j={0,1}} \text{exp}{ h_j(\sum_i W_{i,j} v_i + c_j) }<br>$$<br>$$<br>= -\sum_i b_i v_i - \sum_j \text{log} (1+ \text{exp} {\sum_i W_{i,j} v_i + c_j})<br>$$</p><p>이는, tractable하다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Restrict-Boltzmann-Machines&quot;&gt;&lt;a href=&quot;#Restrict-Boltzmann-Machines&quot; class=&quot;headerlink&quot; title=&quot;Restrict Boltzmann Machines&quot;&gt;&lt;/a&gt;Restr
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Machine Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Machine-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="MachineLearning" scheme="https://jaeyoung-blog.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Restrict Boltzmann Machines 1</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Restrict-Boltzmann-Machines-1st/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Restrict-Boltzmann-Machines-1st/</id>
    <published>2020-03-03T13:28:52.000Z</published>
    <updated>2020-03-06T01:56:06.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Restrict-Boltzmann-Machines"><a href="#Restrict-Boltzmann-Machines" class="headerlink" title="Restrict Boltzmann Machines"></a>Restrict Boltzmann Machines</h1><p>Restrict Boltzmann machines은 Boltzmann machine에다가 일종의 제약조건을 추가한 형태의 neural network를 말한다.</p><p>보통 Boltzmann machine이라고 하면 각 뉴런이 bernoulli random variable인 경우가 많다.</p><h2 id="From-Boltzmann-Machine-to-RBM"><a href="#From-Boltzmann-Machine-to-RBM" class="headerlink" title="From Boltzmann Machine to RBM"></a>From Boltzmann Machine to RBM</h2><h3 id="Statistical-Mechanics"><a href="#Statistical-Mechanics" class="headerlink" title="Statistical Mechanics"></a>Statistical Mechanics</h3><p>입자가 매우 많은 환경에서 입자의 운동을 deterministic하게 정의할 수 없을떄, 통계적으로 물리적 현상을 해석하는 학문을 의미한다.</p><p>Boltzmann machine은 statistical mechanics의 영향을 많이 받은 neural network이다. Statistical mechanics에서는 <strong>평형 상태(Equilibrium)</strong>를 중요하게 여기는데, 자연계의 모든 것은 평형 상태로 가기를 원한다. 평형 상태에서는 에너지가 한곳에 치우치지 않고 고루 분포되어 있고, 시스템 전체의 에너지를 낮출 수 있으면 낮은 에너지를 갖게 된다.</p><p>Statistical mechanics에서는 어떤 상태 $s_i$가 될 확률은, 그 상태가 가지는 에너지 $\epsilon_i$와 그 상태에서의 온도 $T_i$에 의해 결정된다고 한다. $k$는 Boltzmann constant이다.<br>$$<br>p(s_i) = \frac{exp{\epsilon_i/(kT_i)}}{\sum_j exp{\epsilon_j/(kT_j)}}<br>$$<br>위 수식을 <strong>Boltzmann Distribution</strong> 또는 <strong>Maxwell-Boltzmann Distribution</strong>이라고 부른다. 통계 역학에서 물리적 특성에 따른 각 상태의 확률 분포를 정의한다. 분자에는 하나의 상태에 대한 식이 들어가며, 분모에는 모든 상태의 식을 합한 normalization constant가 있다.</p><p>즉, 상태 $s_i$의 에너지가 높으면 $p(s_i)$는 작아진다. 즉, 자연계가 에너지가 높은 상태로 전이될 확룰을 작다. 반대로, 에너지가 낮은 상태로 전이될 확률은 높다. 이것은 일상 생활에서도 찾아볼 수 있는데, 대기중의 공기들이 갑자기 좁은 공간으로 모이는 상태가 될 확률은 매우 작다. 인간이 강제적으로 박스 내에 많은 공기를 가두는 것이 아닌 이상 말이다. 그리고, 만약, 박스 내에 많은 공기를 가두었다고 가정하자. 이 박스 내의 에너지는 높으며 불안정하다. 그리고 박스를 없애버리면 공기는 자연스럽게 퍼져나가고, 공기 밀도는 작아진다. 왜냐하면, 펴저나간 상태가 안정적이고 확률이 높기 때문이다. 그리고 그 상태는 작은 에너지를 가지는 상태이다.</p><h3 id="Neural-Networks-and-Neuroscience"><a href="#Neural-Networks-and-Neuroscience" class="headerlink" title="Neural Networks and Neuroscience"></a>Neural Networks and Neuroscience</h3><p>Neural nework는 뇌를 모방한 확률 모델이다. 우리 뇌는 외부 신호를 받는 뉴런과 뇌 내부 속의 뉴런까지 모두 연결되어 있다. 따라서, Neuroscientist들은 가장 완벽한 형태의 neural network로 Boltzmann machine을 정의했다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200114145755116.png" alt="image-20200114145755116"></p><p>위 그림은 Boltzmann machine을 보여주고 있으며, 모든 뉴런이 서로 연결되어 있는 형태를 가진다. 그리고, Boltzmann machine의 뉴련은 외부와 맞닿아 있는 visible unit들과 내부에 숨겨저 있는 hidden unit들로 나뉜다. Visible unit들이 외부로부터 신호를 받는 input layer의 역할을 하며, hidden unit이 latent variable을 발견하고 pattern recognition 역할을 하는 hidden layer로 작동한다.</p><h3 id="Boltzmann-Machines"><a href="#Boltzmann-Machines" class="headerlink" title="Boltzmann Machines"></a>Boltzmann Machines</h3><p>Boltzmann machine의 특징은 모든 유닛이 모두와 연결된 네트워크이며, 각 edge는 양방향이다. 즉, visible unit이 hidden unit으로 정보를 propagation하기도 하지만, hidden unit이 visible unit에게 propagation하기도 한다. 이건 visible unit들 사이 관계, hidden unit들 사이 관계에서도 마찬가지이다.</p><h3 id="Systems-in-BM"><a href="#Systems-in-BM" class="headerlink" title="Systems in BM"></a>Systems in BM</h3><p>Boltzmann machine은 <strong>하나의 시스템</strong>이며, <strong>한 순간의 상태</strong>를 저장한다. 각 뉴런이 bernoulli variable이라고 하면, 각 variable의 값에 따라 전체 시스템의 상태가 정의된다. 그리고 visible unit개수가 $D$개, hidden unit 개수가 $M$개라고 하면, 이 Boltzmann machine에 의해 표현 가능한 시스템의 상태 개수는 $2^{D+M}$이 될 것이다.</p><p>Boltzmann machine의 propagation 목적은 가장 낮은 에너지 값을 가지는 상태를 찾는 것이며, 낮은 에너지 값으로 수렴할 때 까지 edge를 오가며 unit들이 신호를 주고받는다.</p><p>주의할 것은, Boltzmann machine에서, 낮은 에너지 상태를 찾는다는 것은 weight가 변한다는 것이 아니다. 뉴런의 값이 변하는 것이다. 현재 가지고 있는 weight를 가지고, 유닛들이 서로 신호를 보내면서 유닛의 값을 고치면서 찾을 수 있는 가장 낮은 에너지 상태로 수렴하게 된다.</p><h3 id="Propagation-in-BM"><a href="#Propagation-in-BM" class="headerlink" title="Propagation in BM"></a>Propagation in BM</h3><p>BM에서의 propagation은 생략하고 뒤에서 RBM의 propagation을 말하고자 한다.</p><h3 id="Convergence-of-BM"><a href="#Convergence-of-BM" class="headerlink" title="Convergence of BM"></a>Convergence of BM</h3><p>Boltzmann machine에서는 각 edge에 weight를 두고 각 뉴런은 bias를 가지고 있다. 그리고, Boltzmann machine이 현재 상태에서의 에너지는 다음과 같이 계산한다.<br>$$<br>E(s_i) = -[\sum_i \sum_j W_{i,j} z_i z_j + \sum_k b_k z_k]<br>$$<br>이때, $z_i$는 Boltzmann machine의 $i$번 뉴런이다. Edge는 양 끝에 연결된 뉴런이 모두 1일 때, 활성화 되는 형태이다.</p><p>위 energy function을 Boltzmann distribution에 넣으면, 다음과 같을 것이다. (BM에선 온도는 사용하지 않는다. 다르게 말하면, 온도는 고정된 상수로 간주한다.)<br>$$<br>p(s_i) = \frac{exp{-E(s_i)}}{\sum_j exp{-E(s_j)}}<br>$$</p><h3 id="Intractability-of-BM"><a href="#Intractability-of-BM" class="headerlink" title="Intractability of BM"></a>Intractability of BM</h3><p>하지만, 여기서 가장 큰 단점이자, BM이 현재로서는 사용할 수 없는 인공신경망이라는 것을 드러내 주는 것이 있다. 바로, <strong>Intractability(계산불가능)</strong> 특성이다. Boltzmann distribution을 보면, 분모를 계산하기 위해서는 모든 상태의 exponential을 계산해야 한다. 하지만, visible unit개수와 hidden unit개수가 증가하면, 가능한 상태의 개수는 exponential하게 증거하게 된다. 이 증가량으로 인해 실생활에 응용할 수 있는 neuron 개수만큼 unit을 생성하게 되면, Boltzmann machine이 가지는 상태 수는 엄청나게 증가한다.</p><p>따라서, 현실적으로 계산 가능한 모델을 구현하기 위해 BM에 제약(restrict)을 걸어서 사용하게 되는데, 이를 <strong>Restrict Boltzmann machine(RBM)</strong>이라고 한다.</p><h2 id="Restrict-Boltzmann-Machine"><a href="#Restrict-Boltzmann-Machine" class="headerlink" title="Restrict Boltzmann Machine"></a>Restrict Boltzmann Machine</h2><p>BM에 다음의 제약을 준 신경망이다.</p><ul><li>Visible unit끼리는 직접 연결되지 않는다.</li><li>Hidden unit끼리는 직접 연결되지 않는다.</li></ul><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200114172903349.png" alt="image-20200114172903349"></p><p>그 외에, 기본적인 이론은 BM과 모두 같다. 다만, visible unit과 hidden unit을 구분해서 쓴 energy function은 다음과 같다.<br>$$<br>E(v, h) = -[\sum_i \sum_j w_{i,j} v_i h_j + \sum_i b_i v_i + \sum_j c_i h_i]<br>$$<br>$c$는 hidden unit에 있는 bias이다.</p><h3 id="Propagation-in-RBM"><a href="#Propagation-in-RBM" class="headerlink" title="Propagation in RBM"></a>Propagation in RBM</h3><p>RBM에서 propagation은 다음과 같이 두 가지가 있을 수 있겠다.</p><ul><li>$p(h|v)$</li><li>$p(v|h)$</li></ul><p>즉, visible unit이 주어진 후, hidden unit으로의 propagation과 hidden unit이 주어진 후 visible unit으로의 propagation이다. 일단 결론부터 말하면, propagation은 다음의 식으로 이루어진다.<br>$$<br>p(h=1|v) = \sigma (W^T v + c)<br>$$</p><p>$$<br>p(v=1|h) = \sigma (W h + b)<br>$$</p><p>놀랍게도 하나의 unit이 1이 될 확률은 그냥 일반적인 neural network처럼 sigmoid 결과 형태이다. 그리고, 실제로 energy function을 바탕으로 유도한 결과 위 식처럼 나온다.</p><p>이제, 위 식을 유도해 보고자 한다.</p><p>먼저, 우리가 필요한 건 propagation을 위한, $p(h|v), p(v|h)$이다. 이 두 가지 식을 유도하는 과정은 정확히 일치하므로, $p(h|v)$만 유도하고자 한다.</p><p>먼저, $p(h|v)$는 Bayes rule을 통해 다음처럼 적을 수 있겠다.<br>$$<br>p(h|v) = \frac{p(v,h)}{p(v)}<br>$$<br>Boltzmann distribution의 분모를 $Z$라고 하자. 분모는 normalization constant이다. 이때, Boltzmann machine의 상태는 visible unit과 hidden unit의 조합으로 표현이 가능하므로, $p(s) \leftrightarrow p(v,h)$로 대체하기로 한다.<br>$$<br>p(v,h) = \frac{1}{Z} exp{\sum_i \sum_j W_{i,j} v_i h_j + \sum_i b_i v_i + \sum_j c_j h_j }<br>$$<br>그리고 $p(v) = \sum_h p(v,h)$이므로, (by Marginalization)<br>$$<br>p(v) = \sum_j \frac{1}{Z} exp { \sum_i \sum_j W_{i,j} v_i h_j + \sum_i b_i v_i + \sum_j c_j h_j }<br>$$<br>그리고, 위 두개의 식을 $p(h|v)$에 넣어보면 $Z$가 약분되어 사라진다.<br>$$<br>p(h|v) = \frac{exp{ \sum_i \sum_j W_{i,j} v_i, h_j + \sum_i b_i v_i + \sum_j c_j h_j }}{\sum_j exp{ \sum_i \sum_j W_{i,j} v_i, h_j + \sum_i b_i v_i + \sum_j c_j h_j }}<br>$$<br>그리고, 이 식의 분모는 또 다른 normalization constant이다. 이를 $Z’$라고 하자.<br>$$<br>p(h|v) = \frac{1}{Z’} exp{ \sum_i \sum_j W_{i,j} v_i, h_j + \sum_i b_i v_i + \sum_j c_j h_j }<br>$$<br>그리고 지수 법칙(?)을 이용해서 다음처럼 변형한다. ($e^{a+b} = e^a e^b$)<br>$$<br>p(h|v) = \frac{1}{Z’} exp{ \sum_i b_i v_i } exp{ \sum_i \sum_j W_{i,j} v_i, h_j + \sum_j c_j h_j }<br>$$<br>여기서, $p(h|v)$는 $h$의 함수이며, $v$는 이미 주어져 있다($h \text{ given } v$이니까). 따라서, $exp{\sum_i b_i v_i}$또한 constant로써, $Z’$와 합체할 수 있다. 이것을 $Z’’$라고 하자.<br>$$<br>p(h|v) = \frac{1}{Z’’} exp{ \sum_i \sum_j W_{i,j} v_i, h_j + \sum_j c_j h_j }<br>$$<br>그리고, 다시 지수법칙을 이용해서 $j$와 관련된 항을 밖으로 뺀다. (역시 $e^{a+b} = e^a e^b$)<br>$$<br>p(h|v) = \frac{1}{Z’’} \prod_j exp { \sum_i W_{i,j} v_i h_j + c_j h_j }<br>$$<br>그런데, RBM 아키텍처를 다시 한번 소환해보자.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200114175704355.png" alt="image-20200114175704355"></p><p>보다시피, visible unit이 주어진 상태에서는 hidden unit끼리는 independent이다. 즉, conditional independent이다. 따라서, $p(h|v) = \prod_j p(h_j|v)$가 성립한다. 위 식을 $h_j$에 대한 확률로 변경해보자.<br>$$<br>p(h_j|v) = \frac{1}{Z’’} exp { \sum_i W_{i,j} v_i h_j + c_j h_j }<br>$$<br>$h$끼리는 다 독립이고, 독립일때 joint distribution은 각 확률의 곱이므로 $\prod_j$가 존재했으나, $h_j$하나만 가저올려면 $\prod_j$를 없애면 된다. 그런데, 이때, Boltzmann machine의 각 뉴런은 bernoulli random variable이라고 했으므로, 다음과 같이 $p(h_j|v)$를 나눌 수 있다.<br>$$<br>p(h_j|v) =<br>\begin{cases}<br>    p(h_j = 1|v) \<br>    p(h_j = 0|v)<br>\end{cases}<br>$$<br>그리고,  다음과 같을 것이다.<br>$$<br>\begin{cases}<br>p(h_j=1|v) = \frac{1}{Z’’} exp { \sum_i W_{i,j} v_i + c_j } \<br>p(h_j=0|v) = \frac{1}{Z’’} exp { 0 } = \frac{1}{Z’’}<br>\end{cases}<br>$$<br>그리고 확률의 합은 1이다. 즉,<br>$$<br>p(h_j=1|v) + p(h_j=0|v) = 1<br>$$<br>이 식에 대입해서 $Z’’$에 대해 정리해보면,<br>$$<br>Z’’ = exp { \sum_i W_{i,j} v_i + c_j } + 1<br>$$<br>그렇다면, $p(h_j=1|v)$는 다음과 같이 정리할 수 있다.<br>$$<br>p(h_j = 1|v) = \frac{exp{ \sum_i W_{i,j} v_i + c_j }}{exp{ \sum_i W_{i,j} v_i + c_j } + 1}<br>$$<br>그리고 이것은 sigmoid 함수 형태이며, 최종적으로 다음처럼 정리가 가능하다.<br>$$<br>p(h = 1|v) = \sigma (W^T v + c)<br>$$<br>지금까지 propagation에 쓰이는 확률을 유도해봤는데, 아직, weight 업데이트에 해당하는 “학습”은 시작도 안 했다. 최적화를 위한 미분 과정도 intractable하기 때문에 좀 복잡하다.</p><p>RBM에서 propagation의 문제는 normalization constant의 계산이 불가능하다는 것이었는데, 어떻게어떻게 normalization constant를 trick으로 계산한 후 최종적으로 유도한 것을 보았다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Restrict-Boltzmann-Machines&quot;&gt;&lt;a href=&quot;#Restrict-Boltzmann-Machines&quot; class=&quot;headerlink&quot; title=&quot;Restrict Boltzmann Machines&quot;&gt;&lt;/a&gt;Restr
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Machine Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Machine-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="MachineLearning" scheme="https://jaeyoung-blog.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Distillation Methods</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Distillation-Methods/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Distillation-Methods/</id>
    <published>2020-03-03T13:07:01.000Z</published>
    <updated>2020-03-03T01:57:49.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Distillation-Methods"><a href="#Distillation-Methods" class="headerlink" title="Distillation Methods"></a>Distillation Methods</h1><p>다음을 참고했다.</p><p><a href="https://arxiv.org/pdf/1511.04508.pdf" target="_blank" rel="noopener">Distillation as a Defense to Adversarial<br>Perturbations against Deep Neural Networks</a></p><p><a href="https://arxiv.org/pdf/1503.02531.pdf" target="_blank" rel="noopener">Distilling knowledge in a Neural Network</a></p><h2 id="Distilling-Knowledge-in-a-Neural-Network"><a href="#Distilling-Knowledge-in-a-Neural-Network" class="headerlink" title="Distilling Knowledge in a Neural Network"></a>Distilling Knowledge in a Neural Network</h2><p>Distillation이란, [Distilling knowledge in a Neural Network]라는 논문에서 등장한 것으로 보이며, 이 논문에서는 다음과 같은 과정을 통해 <strong>네트워크의 지식</strong>을 다른 네트워크에게 전달해 줄 수 있다고 한다.</p><ol><li><p>먼저, 데이터 $(X, Y)$를 충분히 잘 학습할 수 있도록 큰 네트워크 $F$를 충분히 학습한다. 학습은 $F$의 정확도를 최대한 올리도록 진행한다.</p></li><li><p>작은 네트워크 $F_d$를 만들고, 같은 데이터셋 $(X, Y)$를 이용해서 그 네트워크를 학습하는데, 다음과 같은 과정을 거친다.</p><ol><li><p>데이터 $X$를 큰 네트워크 $F$에 통과시켜서 softmax에 들어가기 바로 전 값, 즉, logit $F(X)$를 얻는다. 큰 네트워크의 파라미터는 모두 고정시킨다.</p></li><li><p>데이터 $X$를 작은 네트워크 $F_d$에 통과시켜서 logit 값 $F_d(X)$를 얻는다.</p></li><li><p>$\sigma(F_d(X))$를 ground  truth인 $Y$와 가깝게 학습시키는 loss를 정의한다. $\sigma$는 softmax이다.<br>$$<br>L_{CE}(F_d(X), Y)<br>$$</p></li><li><p>또, 작은 네트워크가 예측한 결과는 큰 네트워크가 예측한 결과를 최대한 따라가도록 학습하도록 한다. 그에 맞는 loss를 정의한다.<br>$$<br>L_{CE}(\sigma(\frac{F_d(X)}{T}), \sigma(\frac{F(X)}{T}))<br>$$<br>이때, logit을 하이퍼파라미터 $T$로 나눠줌으로써, 조금 약하게 한다.</p><p>이것은, 작은 네트워크가 큰 네트워크의 데이터셋 $(X, Y)$를 학습한 결과를 최대한 따라가도록 만드는 효과가 있으며, 큰 네트워크의 지식을 작은 네트워크에게 전수한다고 볼 수 있다.</p></li></ol></li></ol><p>이러한 방법으로, 매우 유사한 성능을 내는 compact한 네트워크를 만들 수 있으며, 큰 네트워크 대신 작은 네트워크를 이용하면 computation complexity를 크게 줄일 수 있을 것이다.</p><h2 id="Generalization-using-Distillation"><a href="#Generalization-using-Distillation" class="headerlink" title="Generalization using Distillation"></a>Generalization using Distillation</h2><p>Distillation은 모델을 generalization하는 방법으로도 응용할 수 있다. 이 방법으로 상당한 adversarial attack 또한 방어가 가능하다(한때는 adversarial attack에 대한 state-of-the-art 기술이었다고 하는 듯 하다).</p><p>방법은 다음과 같다.</p><ol><li><p>똑같은 구조를 가지지만 weight를 공유하지 않는 두 네트워크 $F, F_d$를 생성한다.</p></li><li><p>먼저, 데이터셋 $(X,Y)$를 이용해서 $F$를 충분히 학습한다. 이후, $F$의 파라미터는 고정시킨다.</p></li><li><p>같은 데이터셋 $(X, Y)$를 이용해서 $F_d$를 다음과 같이 학습한다.</p><ol><li><p>데이터 $X$를 $F$에 통과시킨, softmax 결과 $F(X)$를 구한다.</p></li><li><p>데이터 $X$를 $F_d$에 통과시킨, softmax 결과 $F_d(X)$를 구한다.</p></li><li><p>$F(X)$과 $F_d(X)$를 가깝게 학습한다.<br>$$<br>\text{argmin} ~ KLD(F(X)||F_d(X))<br>$$<br>(KL-divergense말고 다른걸 써도 됨)</p></li></ol></li></ol><p>이 방식은, 첫 번째 네트워크 $F$를 학습할 때, one-hot label $Y$를 이용하지만, 두 번째 네트워크 $F_d$를 학습할 때는, one-hot label이 아니라 $F$의 softmax값을 사용하게 된다. One-hot label $Y$를 이용하게 되면, 해당 정답 라벨에 모델이 over-confident하게 된다. Softmax값을 이용하게 되면, 정답 라벨이 될 확률이 크게 학습되는것은 같다. 그러나, 덜 confident하게 되어 overfitting확률이 줄어든다. 이 방법으로 학습된 네트워크는 adversarial attack을 매우 효과적으로 막아냈으며,  generalization이 그 이유라고 분석되고 있는 듯 하다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Distillation-Methods&quot;&gt;&lt;a href=&quot;#Distillation-Methods&quot; class=&quot;headerlink&quot; title=&quot;Distillation Methods&quot;&gt;&lt;/a&gt;Distillation Methods&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Machine Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Machine-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="MachineLearning" scheme="https://jaeyoung-blog.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>08. Temporal Difference Learning</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/08-Temporal-Difference-Learning/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/08-Temporal-Difference-Learning/</id>
    <published>2020-03-03T01:00:07.000Z</published>
    <updated>2020-03-10T04:14:33.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Temporal-Difference-Learning"><a href="#Temporal-Difference-Learning" class="headerlink" title="Temporal Difference Learning"></a>Temporal Difference Learning</h1><p>참고: Coursera Reinforcement Learning (Alberta Univ.)</p><p>지금까지 봐 왔던 RL 학습법은, 일단 한 episode를 다 플레이하고 value function을 업데이트했으나, TD(Temporal difference) learning 방식은, episode를 플레이함과 동시에 value function을 업데이트한다. $t-1$일때의 state $s_{t-1}$에서, 액션 $a_{t-1}$을 취해서 reward $R_{t}$를 얻었다면, $v(s_{t-1})$은 즉시 업데이트 가능하다. 결국, value function은 Bellman equation에서 보다시피 next state에서의 reward와  value에 의해서 계산될 수 있기 때문.<br>$$<br>v(s_{t}) = E[G_t|s=s_t]<br>$$<br>$$<br>v(s_t) = E[R_t + \gamma G_{t+1}|s=s_t]<br>$$</p><p>또한, Monte Carlo estimation을 통해 기댓값을 추정한다면,<br>$$<br>v(s_t) \approx \frac{1}{n}\sum_{i} [R_t + \gamma G_t]<br>$$<br>일 것인데, 이러면, 모든 샘플을 저장하고 있어야 한다. 따라서, 샘플 하나 모으고 반영하고 하나 모으고 반영하기 위해, incremental 하게 구현하려면 다음과 같이 value function 식을 수정할 수 있다.<br>$$<br>v(s_t) = v(s_t) + \alpha(G_t - v(s_t))<br>$$<br>$$<br>v(s_t) = v(s_t) + \alpha(R_{t+1} + \gamma G_{t+1} - v(s_t))<br>$$</p><p>여기서 $\alpha$는 step size이며, $\frac{1}{n}$이 들어간다고 보면 된다.</p><h3 id="Temporal-Difference-Error"><a href="#Temporal-Difference-Error" class="headerlink" title="Temporal Difference Error"></a>Temporal Difference Error</h3><p>$R_{t+1} + \gamma G_{t+1} - v(s_t)$부분을 말한다. 원래의 평균치인 $v(s_t)$로부터 얼만큼 업데이트 될 것인지를 나타내기도 하며, 원래 기댓값와 새로운 기댓값의 오차 정도로 이해하면 될듯.</p><h2 id="TD-0-Algorithm"><a href="#TD-0-Algorithm" class="headerlink" title="TD(0) Algorithm"></a>TD(0) Algorithm</h2><p>Monte Carlo prediction을 위해서 한 episode의 history를 저장해놓고 있어야 했지만, TD(0)에서는 바로 앞 전 previous time에서의 정보만 저장해두고, time step마다 업데이트를 incremental하게 시행한다.</p><p>(과거 1스텝만 본다고 해서 TD(0)이다)</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200131163518632.png" alt="image-20200131163518632"></p><p>TD는 MC방법보다는 low variance라고 한다. 즉, 적어도 일관된 대답은 내놓을 수 있게 학습된다(low noise).</p><h2 id="TD-vs-MC"><a href="#TD-vs-MC" class="headerlink" title="TD vs MC"></a>TD vs MC</h2><p>Temporal difference방법은 episode가 끝나지 않아도 value function의 업데이트가 이루어지지만, 일반적인 Monte Carlo 방식은 episode가 완전히 끝나야 value function의 업데이트가 이루어진다.</p><p>수렴속도가 TD가 더 빠르다는 실험 결과가 있다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200207132946501.png" alt="image-20200207132946501"></p><p>y축은 실제 value와 예측된 value의 RMS(Root mean squared) error이고, x축은 episode 횟수이다.</p><h2 id="Batch-TD-0"><a href="#Batch-TD-0" class="headerlink" title="Batch TD(0)"></a>Batch TD(0)</h2><p>Episode를 무한히 만들 수 없고, 한정된 episode만 이용할 수 있을 때, (즉, 데이터셋이 한정되어 있음) batch TD(0)를  사용하기도 한다.</p><p>먼저 episode가 100개가 있다고 가정하면, 각 episode를 돌면서 다음을 계산한다.<br>$$<br>\text{increment} = \alpha(R_{t+1} + \gamma V(S_{t+1}) - V(S_t))<br>$$<br>episode 100개를 모두 한번씩 보는 것을 1 batch라고 하면, 1 batch를 모두 볼때까지 value function $V(S)$를 업데이트 하지 않는다. 100개를 모두 보고 난 후, 각 episode마다 계산된 $\text{increment}$를 state마다 모두 합해서 $V(S)$를 업데이트하게 된다. 그리고, 다시, 업데이트된 $V(S)$를 이용해서 episode 100개를 다시 반복해서 본다.</p><p>일반적인 TD(0)는 1 episode 를 돌때도 즉시 value function을 업데이트하지만, batch TD(0)는 모든 episode를 본 후, 각각 $\text{increment}$를 계산하고 이들의 합으로 value function을 업데이트한다. 즉, 모든 episode를 본 후, 비로소 한 번의 업데이트가 이루어진다.</p><h2 id="Temporal-Difference-Learning-for-Control"><a href="#Temporal-Difference-Learning-for-Control" class="headerlink" title="Temporal Difference Learning for Control"></a>Temporal Difference Learning for Control</h2><p>Control이라 함은, policy control을 의미한다.TD(0) 알고리즘은 policy evaluation 또는 prediction으로 이용해서 한 episode가 끝나지 않더라도, value function을 업데이트가 가능하게 해 주었다. 하지만, value function을 한번 업데이트했다면, policy또한 업데이트가 가능할 것이다.</p><p>Policy control을 하려면, state value보단, action value가 편하다. State가 주어졌을 때, 큰 action value를 가지는 action을 선택하면 되기 때문.</p><p>Action value function을 TD(0)알고리즘에 이용하기 위해, increment하게 바꾼 형태는 다음과 같다.<br>$$<br>Q(S_t, A_t) = Q(S_t, A_t) + \alpha(R_{t+1} + \gamma Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t))<br>$$<br>(State value의 incremental 식이랑 똑같다)</p><h3 id="Sarsa-Algorithm"><a href="#Sarsa-Algorithm" class="headerlink" title="Sarsa Algorithm"></a>Sarsa Algorithm</h3><p>한 episode 내에서 한 time step마다 value function을 업데이트하고, policy를 업데이트하는, generalized policy iteration 과정을 거치게 할 수도 있다. TD(0)를 generalized policy control에도 응용한 것으로, 이것을 <strong>Sarsa algorithm</strong>이라고 부른다.</p><p>일반 Monte Carlo 방식에서는, 한 episode가 모두 마무리되어야 value function을 업데이트하고 policy를 학습한다. 그러나, 이 경우, 초기 policy를 어떻게 initialize했느냐에 따라 학습 초창기에 episode가 지나치게 길어질 수 있다. 물론, 몇 episode가 끝나면 policy가 업데이트되어 어느정도 빨라지겠지만 말이다.</p><p>이것은 한 episode가 모두 끝나고나서 업데이트하는 방식의 단점이라고 할 수 있으며, Sarsa algorithm은 이를 피하게 해 준다. 가는 도중에도 policy가 업데이트되어 수렴도 빠르다.</p><p>Value function 업데이트 수식은 다음과 같다.(action value 이용)<br>$$<br>Q(S_t, A_t) = Q(S_t, A_t) + \alpha(R_{t+1} + \gamma Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t))<br>$$<br>Sarsa 알고리즘은 다음과 같은 특징이 있다.</p><ul><li><strong>Action value Bellman equation</strong>와 Monte Carlo estimation을 이용해서 policy evaluation을 수행한다.</li><li>Policy evaluation과 improvement를 번갈아 수행한다. 즉, <strong>policy iteration</strong>의 방식을 따른다.</li><li>기본적으로 behavior policy와 target policy가 같은 <strong>on-policy learning이다.</strong> 즉, $A_{t+1} \sim \pi$이다.</li></ul><h3 id="Q-Learning"><a href="#Q-Learning" class="headerlink" title="Q-Learning"></a>Q-Learning</h3><p>Sarsa 알고리즘은 기본적으로 on-policy를 기반으로 한다. (물론, off-policy로 구성할 수도 있을 것 같다.) Q-learning은 off policy TD control 방법으로, action value function은 다음처럼 업데이트한다.<br>$$<br>Q(S_t, A_t) = Q(S_t, A_t) + \alpha (R_{t+1} + \gamma \cdot \underset{a}{ \text{max} }~Q(S_{t+1}, a) - Q(S_t, A_t))<br>$$<br>Q-learning은 Sarsa와는 달리, 다음의 특징이 있다.</p><ul><li><strong>Action value Bellman <em>optimality</em> equation</strong>과  Monte Carlo estimation을 통해 policy evaluation을 수행한다.</li><li>Policy evaluation만 계속 하다가 마지막에 policy improvement를 한다. 즉, <strong>value iteration</strong>의 방식이다.</li><li>Behavior  policy대로 action을 취하고 episode가 만들어지지만, value function의 업데이트는 greedy policy, 즉, target policy를 따르도록 업데이트된다. 위 식에서 $a \sim \pi^<em>$가 되며, 이는 *</em>Q-learning이 off-policy learning이라는 것을 알려준다.**</li></ul><h3 id="Q-Learning-with-without-Importance-Ratio"><a href="#Q-Learning-with-without-Importance-Ratio" class="headerlink" title="Q-Learning with/without Importance Ratio"></a>Q-Learning with/without Importance Ratio</h3><p><strong>Q-learning은 importance ratio를 곱할 필요가 없다.</strong> 왜냐하면, behavior policy에서 뽑은 액션대로 업데이트를 바로 하지 않기 때문이다. Sarsa 알고리즘에서 target policy를 따로 둔다면, importance ratio를 곱해주어야 겠지만, Q-learning은 value function 업데이트는 behavior policy의 action을 사용하지 않는다. 무조건, maximum value를 가지는 액션에 따라 업데이트하게 되며, 이는, target policy에 따라 업데이트하는 것이다. (어차피 target policy는 maximum action만 확률이 1.0이고 나머진 0이다)</p><h3 id="Sarsa-vs-Q-Learning"><a href="#Sarsa-vs-Q-Learning" class="headerlink" title="Sarsa vs Q-Learning"></a>Sarsa vs Q-Learning</h3><p>Sarsa는 policy iteration 방법이고, Q-learning은 value iteration 방법이다. Sarsa는 아주 optimal인 path를 찾는게 느리며, 못찾을 수도 있다. 그러나, 매우 reliable한 path를 찾아서 간다.</p><p>Q-learning은 value iteration을 통해 optimal value를 찾고 바로 optimal policy를 계산해낸다. 이것은 Q-learning이 reliablity와 상관없이 가장 빠른 길을 찾게 한다.</p><p>Reliable path란, path 중간에 매우 부정적인 reward를 주는 위험요소가 없는 path이다. Sarsa와 Q-learning이 모두 epsilon-greedy behavior policy를 사용한다는 가정 하에, 다음 그림을 생각해보면,</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200213152009871.png" alt="image-20200213152009871"></p><p>Cliff(절벽)에 빠지면 -100 reward, 그냥 1스탭은 -1 reward를 얻는다. $S$에서 $G$로 가야 한다.</p><p>Sarsa는 파란색 길을 찾을 가능성이 더 높다. 반면, Q-learning은 빨간색 길을 찾을 확률이 더 높다. 그러나, 이때의 단점은, epsilon-greedy의 특성상, exploration이 발동될 수 있고, cliff에 빠질 확률이 있다.</p><p>Sarsa는 episode의 모든 액션을 샘플로 포함시키면서 value function을 계산하고 policy를 업데이트하기에, epsilon의 확률로 인한 다음 액션도 고려하게 된다.</p><p>반면, Q-learning은 episode에서 취한 액션이 최적 액션이 아닐 경우, 그 액션 결과는 보지 않는다. 다음 액션이 cliff로 빠지는 액션이라면, 그 액션은 당연히 최적 액션이 아니고, cliff에 빠졌다는 결과는 보지 않게 된다. 그 결과, 아주 optimal value와 optimal policy는 빠르게 찾지만, 위험할 수 있다.</p><p>Sarsa는 학습하는 policy와 액션을 취하는 policy가 같으니까 exploration을 고려하면서 업데이트하게 되고, Q-learning은 target policy를 업데이트하지만, exploration하는 behavior policy를 그다지 고려하지 않는다. 그저 최적 루트만 찾게 된다.</p><h3 id="Expected-Sarsa-Algorithm"><a href="#Expected-Sarsa-Algorithm" class="headerlink" title="Expected Sarsa Algorithm"></a>Expected Sarsa Algorithm</h3><p>Sarsa의 value function 업데이트 식은 다음과 같다.<br>$$<br>Q(S_t, A_t) = Q(S_t, A_t) + \alpha (R_{t+1} + \gamma \cdot Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t))<br>$$</p><p>즉, 샘플링한 action을 기반으로 value function을 업데이트하게 된다.</p><p>Expected Sarsa는 다음과 같이 식을 수정한다.<br>$$<br>Q(S_t, A_t) = Q(S_t, A_t) + \alpha (R_{t+1} + \sum_{a’} \pi(a’|S_{t+1}) Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t))<br>$$</p><p>즉, action 샘플 방향으로만 업데이트하지 말고, 가능한 모든 액션 방향을 고려하자는 것이다.<br>$$<br>Q(S_{t+1}, A_{t+1}) \rightarrow \sum_{a’} \pi(a’|S_{t+1})Q(S_{t+1}, A_{t+1})<br>$$<br>Action value를 업데이트할때, 다음 state의 action value를 고려해야 하는데, Sarsa에서는 다음 state에서 episode에서 취한 action만을 이용한다. 즉, 다른 액션을 통한 action value는 이용하지 않는다.</p><p>Expected Sarsa에서는 episode에서 취한 action도 고려하면서 아예 policy에 따른 기댓값으로 action value를 계산한다.</p><p>Expected Sarsa도 Monte Carlo 방식이다. 다만, action value update식만 조금 다를 뿐.</p><p><strong>다만, 한 state에서의 액션 개수가 많으면 계산 속도가 급감한다.</strong></p><p>Sarsa 보다 low variance라고 한다.</p><h3 id="Expected-Sarsa-vs-Sarsa"><a href="#Expected-Sarsa-vs-Sarsa" class="headerlink" title="Expected Sarsa vs Sarsa"></a>Expected Sarsa vs Sarsa</h3><p>Expected Sarsa는 value function을 좀 더 일반적으로 고려하므로(episode 방향만 고려하는게 아니니까) 좀 더 안정적인 업데이트가 가능하다고 한다. Sarsa는 어찌됬든 많은 episode를 수행하다보면 value function의 추정이 정확해진다. 하지만, 각 episode에서 잘못된 액션이 있다할지라도, 그 방향으로 업데이트를 수행한다. 하지만, expected Sarsa는 잘못된 액션이든, 올바른 액션이든, 무조건 기댓값을 취하므로, 항상 안정적인 업데이트가 가능하다.</p><p>Expected Sarsa에서는 큰 step size $\alpha$를 사용하기 쉽다. Sarsa에서는 $\alpha$가 크면 잘못된 방향으로도 큰 업데이트를 수행하겠지만, expected Sarsa에서는 그 정도가 작다. 기댓값으로 업데이트하기 때문. 이것은 심지어 optimal value function으로의 수렴 속도까지 expected Sarsa가 뛰어나게 만들기도 한다. (운이 좋다면, Sarsa가 빠를수도 있다)</p><p>또한, value function이 거의 다 수렴한 상태에서도, 큰 $\alpha$를 가진다면, Sarsa는 샘플링하는 대로 업데이트를 똑같이 큰 step으로 지속하게 된다. 어쩌다보면 발산 방향으로 갈 수도 있다. 반면, expected Sarsa에서는 샘플링이 계속되도, 기댓값은 크게 변하지 않으므로, value function또한 안정적으로 유지된다.</p><h3 id="Expected-Sarsa-vs-Q-Learning"><a href="#Expected-Sarsa-vs-Q-Learning" class="headerlink" title="Expected Sarsa vs Q-Learning"></a>Expected Sarsa vs Q-Learning</h3><p><strong>Expected Sarsa는 Sarsa와 다르게 on-policy와 off-policy learning 둘 다에 해당한다.</strong></p><p>Expected Sarsa의 식은 다음과 같다.<br>$$<br>Q(S_t, A_t) = Q(S_t, A_t) + \alpha (R_{t+1} + \gamma \cdot \sum_{a’} \pi(a’|S_{t+1})Q(S_{t+1}, a’) - Q(S_t, A_t))<br>$$<br>이때, 미래의 action value를 계산할 때, target policy에 대한 기댓값을 계산하게 되는데, 이는, 액션 $a’$이 behavior policy에서 나온 것이라도 동일하다. 즉, 자연스럽게 위 value function은 target policy를 따르는 기댓값을 이용하게 되며, importance sampling 없이 off-policy learning을 달성한다.</p><p><strong>Expected Sarsa는 Q-learning의 일반화 버전이다.</strong></p><p>만약, target policy가 greedy한 policy라면, 위 식은 Q-learning과 똑같아진다. 즉, expected Sarsa 방식은 greedy한 target policy이던, greedy하지 않은 target policy이던 적용할 수 있는 off-policy learning 알고리즘이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Temporal-Difference-Learning&quot;&gt;&lt;a href=&quot;#Temporal-Difference-Learning&quot; class=&quot;headerlink&quot; title=&quot;Temporal Difference Learning&quot;&gt;&lt;/a&gt;Te
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Reinforcement Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Reinforcement-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="ReinforcementLearning" scheme="https://jaeyoung-blog.github.io/tags/ReinforcementLearning/"/>
    
  </entry>
  
  <entry>
    <title>07. Off-policy Learning</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/07-Off-Policy-Learning/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/07-Off-Policy-Learning/</id>
    <published>2020-03-03T01:00:06.000Z</published>
    <updated>2020-03-08T11:53:43.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Off-Policy-Learning"><a href="#Off-Policy-Learning" class="headerlink" title="Off Policy Learning"></a>Off Policy Learning</h1><p>참고: Coursera Reinforcement Learning (Alberta Univ.)</p><p>학습 데이터를 수집할때, agent가 action을 취할 policy와 학습과정에서 업데이트할 policy를 따로 구분해 놓은 경우를 off-policy learning이라고 부른다. 반대로, 그냥 하나의 policy를 두고, agent는 그 policy에 따른 action을 취하고 업데이트도 그 policy를 업데이트하는 방식을 on-policy learning이라고 부른다.</p><h3 id="On-policy-Learning"><a href="#On-policy-Learning" class="headerlink" title="On-policy Learning"></a>On-policy Learning</h3><ul><li><p>Policy</p><p>오직 하나의 policy만 존재하며, agent가 학습 데이터를 모으기 위한 action을 취할 때, 이 policy에 따라 액션을 선택한다. 또한, policy control에서도 이 policy를 직접 수정하게 되고, 다음 학습 데이터를 모을 때 영향을받게 된다.</p></li></ul><h3 id="Off-policy-Learning"><a href="#Off-policy-Learning" class="headerlink" title="Off-policy Learning"></a>Off-policy Learning</h3><ul><li><p>Target Policy</p><p>학습 데이터를 모을 때는 이 policy에 따라 action을 취하지 않는다. 다만, 업데이트 할때는 이 target policy를 업데이트한다. 테스트에서는 target policy에 따라 agent가 action을 취하게 된다.</p></li><li><p>Behavior Policy</p><p>Agent는 학습 데이터를 모을 때는 이 policy에 따라 action을 취한다. 업데이트되지 않아서, 학습이 진행되도 최적 action만 따라가는 현상을 없앨 수 있다.</p></li></ul><p>왜 policy를 분리했냐면, 결국 exploration-exploitation dilema때문이다. Policy를 하나만 두면, 학습이 진행될수록 다소 안좋은(?) state는 방문횟수가 급격히 줄고, agent는 평소 하던 action만 취한다. 하지만, 학습 데이터를 수집할 때는, 적절히 exploration을 해야 할 필요가 있다. Behavior policy는 random uniform policy와 같은, 다소 불확실하지만, 모든 state가 고르게 방문될 수 있도록 설정하게 된다.</p><p>Off-policy의 장점은, target policy를 stochastic하게 둘 필요가 없이 deterministic하게 둬도 된다는 것이다. Target policy가 $\epsilon$-soft일필요가 없다.</p><h2 id="Importance-Sampling"><a href="#Importance-Sampling" class="headerlink" title="Importance Sampling"></a>Importance Sampling</h2><p>그런데, Off-policy learning에 문제가 있다. 만약, Monte Carlo estimation을 시행한다고 하면, 많은 샘플을 모으고 그 샘플들의 단순 평균을 계산하여 기댓값을 계산한다. 샘플 $(S_t, A_t, R_t)$을 모을 때, agent는 behavior policy에 따라 action을 취하고 샘플을 얻게 된다. 따라서, 그 샘플들의 평균은 behavior policy $b$에 대한 기댓값 $E_b[G]$가 되지, $E_{\pi}[G]$가 되지 않는다.</p><p>따라서, policy evaluation을 할 때, $b$에서 샘플링한 샘플로 $\pi$에 대한 기댓값을 추정하도록 해야 한다.</p><p><strong>Importance sampling</strong>이란, Monte Carlo estimation을 할 때, <strong>다른 분포</strong>에서 샘플링한 샘플을 이용해서 분포의 기댓값을 추정하는 것을 말한다. 분포 $b$를 따르는 random variable $X$와 그 샘플 $x$에 대해, 분포 $b$에 대한 $X$의 기댓값은 다음처럼 계산할 수 있다.<br>$$<br>x_i \sim b<br>$$<br>$$<br>E_b[X] \approx \sum_{i=1}^n x_i \cdot b(x_i)<br>$$</p><p>그리고, 여기서 약간의 수정을 가해서 다른 분포 $\pi$에 대한 $X$의 기댓값을 계산하도록 할 수 있다.<br>$$<br>E_{\pi}[X] = \sum_X X \cdot \pi(X)<br>$$<br>$$<br>= \sum_X X \cdot \pi(X) \cdot \frac{b(X)}{b(X)}<br>$$</p><p>$$<br>= \sum_X X \cdot b(X) \cdot \frac{\pi(X)}{b(X)}<br>$$</p><p>$$<br>= \sum_X X \cdot \rho(X) \cdot b(x), ~ (\rho(X) = \frac{\pi(X)}{b(X)})<br>$$</p><p>$$<br>= E_b[X\rho(X)] \approx \frac{1}{n}\sum_{i=1}^n x_i \cdot \rho(x_i)<br>$$</p><p>따라서,<br>$$<br>E_{\pi}[X] \approx \frac{1}{n} \sum_{i=1}^n x_i \cdot \rho(x_i)<br>$$<br>이때, $\rho(x)$를 importance sampling ratio라고 하며, 한 샘플에 대해, 두 분포간의 확률 비율을 말한다.</p><p>Policy iteration에서, 특정 시점 $t$에서의 policy $\pi_t$가 있고, 그 policy $\pi_t$를 이용해 value function을 계산해야 하는데, 이 과정에서 Monte Carlo estimation이 사용된다. 여기서, behavior policy를 통해 얻은 샘플들을 이용해서 $\pi_t$에 대한 기댓값을 계산하게 된다.</p><h2 id="Implementation-of-Off-Policy-Learning"><a href="#Implementation-of-Off-Policy-Learning" class="headerlink" title="Implementation of Off-Policy Learning"></a>Implementation of Off-Policy Learning</h2><p>Behavior policy로 episode를 만들고, 각 타임에서의 state와 action을 얻고, 다음 식을 통해 value-function을 Monte Carlo estimation하게 되면, policy $b$에 대한 기댓값 추정이 된다.<br>$$<br>G_{t} \leftarrow \gamma \cdot G_{t+1} + R_t<br>$$<br>$$<br>G_t \text{ appends to } Returns(S_t)<br>$$</p><p>$$<br>V(S_t) \leftarrow \text{mean}(Returns(S_t))<br>$$</p><p>여기서, $R_t$는 environment dynamic distribution으로부터 나왔으니, importance sampling에서 예외로 하고, $G_{t+1}$은 behavior policy $b$에 대한 value 기댓값일 것이다. 따라서, $G_{t+1}$에 importance ratio를 곱해주어야 한다.<br>$$<br>G_t \leftarrow \gamma \cdot W \cdot  G_{t+1} + R_{t}<br>$$<br>$$<br>G_t \text{ appends to } Returns(S_t)<br>$$</p><p>$$<br>V(S_t) \leftarrow \text{means}(Returns(S_t))<br>$$</p><p>그럼 이제 importance ratio를 계산해야 하는데, $G_{t+1}$은 바로 다음 시점 $t+1$로부터, policy $b$에 대한 기댓값이므로, importance ratio는 $t+1$시점부터 episode의 끝 $T$까지 분포 $b$로부터 $\pi$로 바꿔주는 역할을 해 주어야 한다. 즉, $\rho_t$ 대신, $\rho_{t+1:T}$를 계산해야 한다는 의미이다.<br>$$<br>\rho_{t+1:T} = \prod_{i=t+1}^T \frac{\pi(A_i|S_i)p(S_{i+1},R_{i+1}|S_i,A_i)}{b(A_i|S_i)p(S_{i+1}, R_{i+1}|S_i, A_i)}<br>$$<br>$$<br>= \prod_{i=t+1}^T \frac{\pi(A_i|S_i)}{b(A_i|S_i)}<br>$$</p><p>$$<br>= \prod_{i=t+1}^T \rho_i<br>$$</p><p>그리고 이것은 보다시피 incremental implementation이 가능하다.<br>$$<br>\rho_{T:T} = \rho_T<br>$$<br>$$<br>\rho_{T-1:T} = \rho_{T-1}\rho_T  =  \rho_{T-1} \cdot \rho_{T:T}<br>$$</p><p>$$<br>\rho_{T-2:T} = \rho_{T-2}\rho_{T-1}\rho_T = \rho_{T-2} \cdot \rho_{T-1:T}<br>$$</p><p>Monte Carlo prediction은 $T$로부터 backward 방식으로 이루어지므로, 위와 같이 incremental하게 구현이 가능하다. 이는 다음 pseudo code에서 $W$를 업데이트 하는 방식에서 드러난다.</p><p>다음은 pseudo-code.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200129145429486.png" alt="image-20200129145429486"></p><p>On-policy Monte Carlo로부터, episode를 하나 플레이할때, policy $\pi$를 따르지 않고, policy $b$를 따른다는게 특징. 또한, importance sampling을 위해 $G \leftarrow \gamma G + R_{t+1}$에서 $G \leftarrow \gamma W G + R_{t+1}$로 변경되었다. $W$는 importance ratio를 계산한 것이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Off-Policy-Learning&quot;&gt;&lt;a href=&quot;#Off-Policy-Learning&quot; class=&quot;headerlink&quot; title=&quot;Off Policy Learning&quot;&gt;&lt;/a&gt;Off Policy Learning&lt;/h1&gt;&lt;p&gt;참고
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Reinforcement Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Reinforcement-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="ReinforcementLearning" scheme="https://jaeyoung-blog.github.io/tags/ReinforcementLearning/"/>
    
  </entry>
  
  <entry>
    <title>06. Sample-based Reinforcement Learning</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/06-Sample-based-Reinforcement-Learning/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/06-Sample-based-Reinforcement-Learning/</id>
    <published>2020-03-03T01:00:05.000Z</published>
    <updated>2020-03-03T04:25:37.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sample-based-Reinforcement-Learning"><a href="#Sample-based-Reinforcement-Learning" class="headerlink" title="Sample-based Reinforcement Learning"></a>Sample-based Reinforcement Learning</h1><p>참고: Coursera Reinforcement Learning (Alberta Univ.)</p><h3 id="Motivations"><a href="#Motivations" class="headerlink" title="Motivations"></a>Motivations</h3><ul><li>지금까지 K-arm bandit problem으로 reinforcement learning의 기초를 보았고, 그를 이용해서 exploration-exploitation dilemma를 보았다.</li><li>또한, Exploration, exploitation이 충분히 이루어져서 environment dynamic에 해당하는, transition probability $p(s’,r|s,a)$가 이미 모델링되었다고 가정했을 때, MDP 환경에 한정해서 value function과 policy를 어떻게 정의하고 계산하는지 보았다.</li><li>Bellman equation을 이용해서 dynamic programming 방식으로 policy iteration, value iteration 등, optimal value function과 optimal policy를 계산하는 방법을 보았다.</li></ul><p>하지만, 여기서, 현실은 environment는 너무나도 복합적인 것이라, 모델링하기가 쉽지 않다. 그러나, 지금까지 해 왔던 방법들은 environment가 필수적으로 모델링되어 있어야 한다.</p><p>이렇게, environment를 모델링하는 데 있어서 어려움이 있다는 문제를 해결하는 방법 중 하나가 <strong>Sample-based Reinforcement Learning</strong>이다.</p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>이름에서 알 수 있다시피, 이 방법의 주요 특징은, environment dynamic에 해당하는 transition probability function $p(s’,r|s,a)$를 모델링하는 대신, sample-based로 추정해보겠다는 의미이다. 특히 <strong>Monte Carlo Estimation</strong>이 이용된다.</p><h2 id="Monte-Carlo-Estimation"><a href="#Monte-Carlo-Estimation" class="headerlink" title="Monte Carlo Estimation"></a>Monte Carlo Estimation</h2><p>Monte-Carlo Estimation이란, 파라미터의 기댓값을 계산하고자 할 때, 그 파라미터를 모델링하는 과정을 거치지 않고, 파라미터에 대한 샘플을 많이 얻어서 그 샘플들의 평균값을 기댓값으로 추정하는 방법을 의미한다.</p><p>샘플 개수가 많을수록, Central Limit Theorem에 의해, 샘플들의 평균은 실제 평균과 매우 가깝다고 확신할 수 있다.</p><p>여기서 직감할 수 있다시피, 정확한 기댓값을 추정하기 위해서는 상당히 많은 샘플이 필요하다.</p><h3 id="Implementation-Overview"><a href="#Implementation-Overview" class="headerlink" title="Implementation Overview"></a>Implementation Overview</h3><p>Episodic task로 예를 들려고 한다.</p><ol><li><p>일단 하나의 episode를 완주한다. 즉, 게임이 끝날 때 까지 일단 플레이를 한다. 지나온(또는 처해있었던) state, 취했던 action들, 받았던 reward들의 History는 기록해 둔다.</p></li><li><p>위 history를 $S_0, A_0, S_1, R_1, A_1, S_2, …, S_{T-1}, R_{T-1}, A_{t-1}, S_T, R_T$라는 sequence로 표현했을 떄, $T$에서 backward방향으로 reward 기댓값, 즉, value를 계산한다.</p><p>(Final state는 정의에 따라 value가 0이다)<br>$$<br>G_T = 0<br>$$</p><p>$$<br>G_{T-1} = R_{T} + \gamma G_T<br>$$</p><p>$$<br>G_{T-2} = R_{T-1} + \gamma G_{T-1}<br>$$</p><p>$$<br>\cdots<br>$$</p></li><li><p>$G_t$를 $t$일때의 state였던 놈, $S_t$에 대한 value의샘플이라고 간주한다. 하나의 episode에 그 state를 지난 횟수만큼 샘플이 생긴다</p></li><li><p>여러 episode를 플레이해본다.</p></li><li><p>모아진 value sample을 이용해서 state-value function을 추정한다(평균내기).</p></li></ol><p>하지만, 하나의 episode가 모든 state를 골고루 방문하지는 않으므로, 여러 episode를 시행해도, state마다 샘플 수는 다르다. 따라서 어떤 state는 state-value의 정확한 추정이 어려울 수 있다.</p><h3 id="Exploring-Starts"><a href="#Exploring-Starts" class="headerlink" title="Exploring Starts"></a>Exploring Starts</h3><p>Action value function도 state value function을 추정하는 방법과 똑같이 추정할 수 있다. Action value function을 굳이 쓰는 이유는 한 state에서 어떤 액션을 선택할지에 대한, 즉 policy를 찾는데 도움을 줄 수 있기 때문이다.</p><p>하지만, 만약, deterministic policy를 따르고 있으면, 각 state에서 특정 action만 수행한다. 따라서, 하나의 액션만 exploitation하게 되는데, 이러면, policy를 비교, 조정할 수 없다. 이에 대한 해결책 중 하나로, episode의 시작은 무조건 random state에서 random action을 취하도록 시작하는 것이다. 첫 번째 액션을 취한 이후로는 policy를 따르게 된다.</p><p>이 문제는 결국, exploration에 관한 문제이다.</p><h3 id="Monte-Carlo-Prediction"><a href="#Monte-Carlo-Prediction" class="headerlink" title="Monte Carlo Prediction"></a>Monte Carlo Prediction</h3><p>Reinforcement learning의 context에서, Monte Carlo prediction이란, 주어진 episode를 플레이한 history $S_0, A_0, R_1, S_1, A_1, …, R_T, S_T$를 이용해서 value function을 추정하는 것을 의미한다.</p><h2 id="Monte-Carlo-for-Policy-Control"><a href="#Monte-Carlo-for-Policy-Control" class="headerlink" title="Monte Carlo for Policy Control"></a>Monte Carlo for Policy Control</h2><p>Monte Carlo를 통해 generalized policy iteration을 구현할 수 있다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200125175225811.png" alt="image-20200125175225811"></p><ul><li>Policy Evaluation: 1번의 Episode 수행 및 Monte Carlo Estimation</li><li>Policy Improvement: 계산된 value function을 통한 policy의 greedify</li></ul><p>이전과 같이 policy evaluation과 improvement를 반복하게 되며, evaluation 단계에서 Monte Carlo prediction을 적용하여 value function을 추정하게 된다. Improvement 단계에서는 추정된 value function을 바탕으로 greedy한 policy를 생성해 낸다.</p><p>한 번의 반복(evaluation-improvement) 동안, 단 1번의 episode를 플레이하기 때문에 evaluation 단계에서 value function을 완전히 추정하지 않는다. Evaluation을 완성하려면 수많은 episode를 플레이하고 value function을 제대로 추정하고 improvement로 넘어가야 할 것이다. 하지만, 엄청 오래 걸릴 것이다.</p><p>Pseudo-code는 다음과 같다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">monte_carlo_gpi</span><span class="params">(states, actions, gamma)</span>:</span></span><br><span class="line">    pi = initialize_policies(states)</span><br><span class="line">    action_values = initialize_action_values(states, actions)</span><br><span class="line">    returns = initialize_rewards(states, actions)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s0, a0 = exploring_starts(states, actions)</span><br><span class="line">        estimated_action_values, history, T = play_one_episode(pi)</span><br><span class="line">        G = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(T<span class="number">-1</span>, <span class="number">0</span>, by=<span class="number">-1</span>):</span><br><span class="line">            G = history[t+<span class="number">1</span>][<span class="string">"reward"</span>] + gamma * G</span><br><span class="line">            </span><br><span class="line">            state = history[t+<span class="number">1</span>][<span class="string">"state"</span>]</span><br><span class="line">            action = history[t+<span class="number">1</span>][<span class="string">"action"</span>]</span><br><span class="line">            </span><br><span class="line">            returns[state][action].append(G)</span><br><span class="line">            </span><br><span class="line">            action_values[state][action] = mean(returns[state][action])</span><br><span class="line">            pi[state] = argmax(action_values[state][action])</span><br></pre></td></tr></table></figure><h3 id="Epsilon-soft-Policy"><a href="#Epsilon-soft-Policy" class="headerlink" title="Epsilon-soft Policy"></a>Epsilon-soft Policy</h3><p>Exploring starts 방식은 deterministic policy 환경에서 출발점에서나마 랜덤으로 state와 action을 선택하게 함으로써, 모든 state들이 그래도 한번씩은 다 방문되도록 하게끔 하는 것이다. 하지만, 다음 문제점이 있다.</p><ul><li>State 개수가 너무 많을 경우, 첫 시작을 임의로 시작한다고 한들, 모든 state를 다 방문하기엔 역부족이다. 계산 불가능할 정도로 많은 시도횟수를 요구할 것이다.</li></ul><p>하지만, exploring 방법은 여전히 필요하며, exploitation만 할 수는 없다. exploring starts의 대안으로 나온 것이 바로 $\epsilon$-soft 방식이다. 이것은 $\epsilon$-greedy을 포함하는 상위 개념으로, optimal action에는 좀 높은 확률을 두고, 나머지 액션은 확률 0이 아니라 작은 확률을 설정해 두는 것이다.</p><p>구현 방법은 value evaluation에서 계산된 value function으로부터 가장 좋은 action을 뽑아내고, 그 액션에 좀 높은 확률을 주고, 나머지 액션은 작은 확률을 준다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200126105656485.png" alt="image-20200126105656485"></p><p>$$\epsilon$$-soft는 stochastic policy이다. 즉, optimal policy보다는 value 기댓값이 적다. 하지만, 적절히 greedy한 액션도 취해가면서 확률적으로 많은 state를 방문할 수 있게 해 준다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Sample-based-Reinforcement-Learning&quot;&gt;&lt;a href=&quot;#Sample-based-Reinforcement-Learning&quot; class=&quot;headerlink&quot; title=&quot;Sample-based Reinforce
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Reinforcement Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Reinforcement-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="ReinforcementLearning" scheme="https://jaeyoung-blog.github.io/tags/ReinforcementLearning/"/>
    
  </entry>
  
  <entry>
    <title>05. Policy Evaluation &amp; Control</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/05-Policy-Evaluation-vs-Control/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/05-Policy-Evaluation-vs-Control/</id>
    <published>2020-03-03T01:00:04.000Z</published>
    <updated>2020-03-05T03:45:14.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Policy-Evaluation-amp-Control"><a href="#Policy-Evaluation-amp-Control" class="headerlink" title="Policy Evaluation &amp; Control"></a>Policy Evaluation &amp; Control</h1><p>참고: Coursera Reinforcement Learning (Alberta Univ.)</p><p>현재 가지고있는 policy가 좋은지 평가하고(evaluation) 더 좋은 policy로 향상시키는 작업(control)을 의미한다. 현재 가지고 있는 policy $\pi$와 dynamics of environment를 표현하는 $p(s’,r|s,a)$분포가 있으면, dynamic programming을 통해 value function을 계산해낼 수 있고, 그 value function을 이용해서 policy를 평가(evaluation)할 수 있다. 또한, dynamic programming을 통해 더 나은 policy를 찾을 수 있다(control).</p><p>Optimal policy를 찾기 위해서 policy evaluation과 control을 이용하게 된다.</p><h2 id="Policy-Evaluation"><a href="#Policy-Evaluation" class="headerlink" title="Policy Evaluation"></a>Policy Evaluation</h2><p>어떤 policy가 좋은지 평가하는 방법은 value function를 보는 것이 있겠다. Policy evaluation이란, 주어진 policy에 대해 value function을 구하는 것을 말한다.</p><p>임의의 policy를 하나 설정하고, 각 액션에 대해 immediate reward를 설정한 후에는 value function을 계산할 수 있을 것이다.</p><p><strong>어찌됬든 요약하면, policy evaluation은 그 policy를 이용한 value function을 계산하는 것을 말한다.</strong></p><p>주어진 policy에 대해 value function을 정확히 계산하기보단, approximation 방법을 이용한다.</p><h3 id="Iterative-Policy-Evaluation"><a href="#Iterative-Policy-Evaluation" class="headerlink" title="Iterative Policy Evaluation"></a>Iterative Policy Evaluation</h3><p>주어진 policy를 이용하여 value function을 approximation하는 한 가지 방법으로, dynamic programming을 통한 iterative 방법이다. 처음에 모든 state의 value를 0으로(또는 임의의 아무 숫자) 초기화시킨 후, state-Bellman equation을 통해 모든 state의 value를 수렴할때까지 업데이트하게 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iterative_policy_evaluation</span><span class="params">(policy, p, states, threshold=<span class="number">1e-3</span>)</span>:</span></span><br><span class="line">    values_curr = np.zeros(states.shape)</span><br><span class="line">    max_diff = <span class="number">1e6</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        </span><br><span class="line">        values_curr = compute_state_bellman_equation(policy, p, values_curr)</span><br><span class="line">        max_diff = np.max(np.sqrt((values_next - values_curr)**<span class="number">2</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> max_diff &lt; threshold:</span><br><span class="line">            <span class="keyword">return</span> values_curr</span><br></pre></td></tr></table></figure><p>일단 방법은 다음과 같다.</p><ol><li>두 개의 value matrix $V, V’$를 만든다. $V$는 현재 value function을 저장할 matrix, $V’$는 value function을 계산한 결과를 저장할 matrix이다.</li><li>State bellman equation $v_{\pi}(s)$을 통해 $V$만을 이용해서 $V’$를 계산한다.</li><li>$\epsilon = max|V - V’|^2$를 계산한다. 즉, 가장 value가 크게 변한 state를 찾는다.</li><li>어떤 작은 수 $\theta$에 대해 $\epsilon \leq \theta$이라면, value function이 충분히 수렴되었다고 간주하고 $V’$를 반환한다.</li><li>$\epsilon &gt; \theta$이라면, $V \leftarrow V’$로 대입하고 2번으로 돌아간다.</li></ol><h2 id="Policy-Control"><a href="#Policy-Control" class="headerlink" title="Policy Control"></a>Policy Control</h2><p>Policy control이란, 주어진 policy와 그것으로부터 만들어낸 value function을 가지고, optimal policy를 찾는 과정을 말한다.</p><h3 id="Policy-Improvement-Theorem"><a href="#Policy-Improvement-Theorem" class="headerlink" title="Policy Improvement Theorem"></a>Policy Improvement Theorem</h3><p>Action value를 비교하는데, 현재 상태에서 액션을 원래 policy $\pi$에 따라 선택한 후, policy $\pi$를 따르는 action value를 $q_{\pi}(s, \pi(s))$라고 하자. 또, 같은 상태에서 액션을 다른 policy $\pi’$에 따라 선택한 후, 원래 policy $\pi$를 따르는 action value를 $q_{\pi}(s, \pi’(s))$라고 하자.</p><p>$q_{\pi} (s, \pi’(s)) \geq q_{\pi} (s, \pi(s))$를 만족하면, 적어도 $\pi’$는 $\pi$보다는 좋다라는 이론이다. 만약, 두 action value가 같다면, 이미 optimal일 확률이 높다.</p><p>위 이론에 따라, 현재 policy보다 좀 더 좋은 policy를 찾는 방법은, 주어진 value function에 따라 확률적으로 action을 선택하던 현재 policy를 greedy한 deterministic한 policy로 바꾸는 것이다.<br>$$<br>\pi’ = \underset{a}{\text{argmax} } \sum_{s’,r} p(s’,r|s,a)[r + \gamma \cdot v_{\pi}(s’)] ~ \text{(for all state } s\text{)}<br>$$</p><h2 id="Policy-Iteration-Dynamic-Programming"><a href="#Policy-Iteration-Dynamic-Programming" class="headerlink" title="Policy Iteration - Dynamic Programming"></a>Policy Iteration - Dynamic Programming</h2><p><strong>Optimal policy를 찾는 알고리즘</strong>으로, 다음과 같은 과정으로 이루어진다. 일단 어떤 state에서 어떤 액션을 취하면 어떤 immediate reward를 받는지는 이미 알고 있다고 가정한다. Immediate reward의 분포 $p(r|s)$은 exploration &amp; exploitation 으로 추정해야 하거나 개발자가 이미 정해놓거나?</p><ol><li>Initialize $\pi_0$. 즉, 최초의 policy를 만들고 이를 현재의 policy $\pi$로 삼는다. 최초의 policy는 아무거나로 한다. 모든 액션을 uniform distribution에 따라 선택하는 policy로 해도 된다.</li><li>Evaluate $\pi$. 즉, 주어진 policy에 대해 value function을 계산한다.</li><li>Control $\pi$. 즉, 계산된 value function을 바탕으로 모든 상태에서 greedy한 action을 선택하는 새로운 policy $\pi’$를 만든다.</li><li>$\pi’ = \pi$라면, $\pi$를 반환하고 끝낸다. 아니라면, $\pi$에  $\pi’$를 대입하고 2번으로 간다.</li></ol><p>이 과정을 통틀어서 policy iteration 방법이라고 부른다. 다음은 전체 pseudo code.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200121183345364.png" alt="image-20200121183345364"></p><p>일단, 가장 처음 policy를 제외하고 이후 control에 의해 만들어진 모든 policy는 greedy하고 deterministic한 policy이다. 하지만, 이것은 새로 evaluate로 생성된 value function에서 greedy하지 않게 된다.</p><p>즉, evaluate과정을 거처서 만들어낸, 현 policy를 따르는 value function에서 현재 policy가 greedy하지 않게 되고,</p><p>control하는 과정을 거치면 greedy한 policy를 만들 수 있지만, 이건 또 다시 policy evalutation을 통해 더 좋은 policy가 있다는 것이 밝혀진다.</p><p>이 과정을 통해, 더 이상 좋은 policy가 없을 때 까지 수렴하게 된다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200121183703146.png" alt="image-20200121183703146"></p><h2 id="Generalized-Policy-Iteration"><a href="#Generalized-Policy-Iteration" class="headerlink" title="Generalized Policy Iteration"></a>Generalized Policy Iteration</h2><p>Policy Iteration의 일반적인 형태.</p><p>앞서 나온 policy iteration은 policy evaluation과 control를 번갈아가면서 수행했다. 그리고, evaluation에서는 value function이 수렴할때까지 loop를 돌렸고, 수렴한 다음에야 policy control을 시행했다. Policy control 또한 완전한 greedy한 deterministic policy를 선택했다. 하지만, generalized policy iteration은 다음처럼 작동한다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200122120728463.png" alt="image-20200122120728463"></p><p>Policy evaluation은 loop를 돌지 않고 한번만 회전하고 policy control또한 조금 완화된 greedy action을 선택하게끔 한다.</p><h3 id="Value-Iteration"><a href="#Value-Iteration" class="headerlink" title="Value Iteration"></a>Value Iteration</h3><p>Generalized policy iteration의 한 방법으로, policy evaluation과 control를 번갈아서 수행하지 않고 evaluation을 policy와 관계없이 value값에 대해서만 수행해서 수렴시키고 control를 최종적으로 수행한다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200122121014540.png" alt="image-20200122121014540"></p><p>알고리즘은 위와 같은데, value funciton을 계산할 때, “어떤 state에서는 무조건 이 액션을 선택해”라고 말하는 policy를 넣지 않고, 그냥 value를 최대로 하는 액션을 선택하도록 한다. 그리고 그 최대 value로 업데이트한다. 이 과정을 반복하면 value function 혼자서 optimal에 수렴하게 되고 optimal value function을 이용해서 policy를 뽑아낸다.</p><h3 id="Asynchronous-Dynamic-Programming"><a href="#Asynchronous-Dynamic-Programming" class="headerlink" title="Asynchronous Dynamic Programming"></a>Asynchronous Dynamic Programming</h3><p>한번 value function을 업데이트할때, 모든 state를 순차적으로 다 돌지 말고, 필요한 state에 대한 value만, 순서관계없이 업데이트하자는 것이라고 한다.</p><p>또한, 모든 state를 다 업데이트하는것이 아니라 관계있는 state들만 업데이트한다.</p><h3 id="Monte-Carlo-Methods"><a href="#Monte-Carlo-Methods" class="headerlink" title="Monte Carlo Methods"></a>Monte Carlo Methods</h3><p>지금까지 dynamic programming을 통해 value function과 policy를 계산 및 추정했는데, dynamic programming을 통한 방법 외에도 여러가지 방법이 존재한다.</p><p>Monte carlo method는 하나의 state에 대해 각 액션을 많이 취해보고 Monte carlo estimation을 통해 value 추정값을 계산하자는 방법이다. 즉, 그 state에서 각각 액션을 많이 취해보고 얻은 reward들을 단순 평균내자는 이야기이다. 이 방법은 optimal policy를 매우 정확하게 찾을 것을 보장해준다.(단, action을 해서 reward를 한 trial이 많아야 한다.)</p><p>Monte carlo estimation의 단점은 모든 state에서 모든 액션을 많이 취해봐야 정확한 value function을 추정할 수 있는데, 그게 현실적으로 불가능하다.</p><h3 id="Brute-Force-Estimation"><a href="#Brute-Force-Estimation" class="headerlink" title="Brute-Force Estimation"></a>Brute-Force Estimation</h3><p>Brute-force 방법은 간단하다. 가능한 모든 deterministic policy 조합을 나열하고 그중에서 optimal policy를 찾는 것을 말한다. 이 방법 역시 optimal policy를 반드시 찾을 것을 보장해준다. 하지만, action수에 따라 가능한 policy 조합이 exponential하게 증가한다. 그래서 사실상 적용이 불가능하다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Policy-Evaluation-amp-Control&quot;&gt;&lt;a href=&quot;#Policy-Evaluation-amp-Control&quot; class=&quot;headerlink&quot; title=&quot;Policy Evaluation &amp;amp; Control&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Reinforcement Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Reinforcement-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="ReinforcementLearning" scheme="https://jaeyoung-blog.github.io/tags/ReinforcementLearning/"/>
    
  </entry>
  
  <entry>
    <title>04. Policies and Value Functions</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/04-Policies-and-Value-Functions/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/04-Policies-and-Value-Functions/</id>
    <published>2020-03-03T01:00:03.000Z</published>
    <updated>2020-03-06T01:41:05.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Policies-and-Value-Functions"><a href="#Policies-and-Value-Functions" class="headerlink" title="Policies and Value Functions"></a>Policies and Value Functions</h1><p>참고: Coursera Reinforcement Learning (Alberta Univ.)</p><p>RL에서의 학습이란, action을 결정하는 policy와 value function을 추정하는 과정이라고 볼 수 있을 만큼, 두 과정의 RL에의 영향은 절대적이다.</p><h3 id="Policies"><a href="#Policies" class="headerlink" title="Policies"></a>Policies</h3><p>우리말로, <strong>정책</strong>이라고 하며, 말 그대로, 주어진 현재 상황에서 agent가 어떤 action을 선택할지 결정해주는 정책을 의미한다.</p><p><strong>Policy는 각 state에서 가능한 action들의 probability distribution이다.</strong></p><p>Value function과 그 의미가 매우 유사해보인다. 하지만, Value function은 reward의 기댓값을 계산해주는 것일 뿐, action을 결정하는 것은 policy에게 달려 있다.</p><ul><li><p>Deterministic Policies<br>$$<br>\pi(s)= a<br>$$<br>위 식처럼, deterministic policy란 state를 입력으로 받아서 action 1개를 반환하는 함수이다. 즉, state를 action으로 매핑하는 함수라고 볼 수 있다.</p></li><li><p>Stochastic Policies<br>$$<br>\pi(a|s) = \text{ {Probability distribution matrix} }<br>$$<br>Stochastic policy는 한 state를 주게 되면, 그 state에서의 action probability distribution을 반환하는 함수이다. 따라서, 한 state를 주면, 여러 action이 나오게 된다.</p><p>이때, action probability distribution matrix는 다음을 만족해야 한다.<br>$$<br>\sum_a \pi(a|s) = 1<br>$$<br>$$<br>\pi(a|s) \geq 0<br>$$</p><p>즉, 행렬의 각 row가 적법한 probability distribution이어야 한다.</p></li></ul><p>action probability distribution은 각 state마다 다르다.</p><h3 id="Valid-amp-Invalid-Policies"><a href="#Valid-amp-Invalid-Policies" class="headerlink" title="Valid &amp; Invalid Policies"></a>Valid &amp; Invalid Policies</h3><p>MDP에서 policies는 반드시 현재 타임에서의 상태에 존재하는 정보를 이용해서 action을 결정해야 한다. 즉, policies의 인자는 반드시 time $t$에서는 $s_t$만이 되어야 하며, 따라서 다음과 같다.<br>$$<br>\pi(s_t) \rightarrow a_t<br>$$<br>만약, policy가 이전 time의 state나 action을 이용해서 action을 결정한다면, 적법한 policy라고 부르지 않는다.</p><h3 id="Value-Functions"><a href="#Value-Functions" class="headerlink" title="Value Functions"></a>Value Functions</h3><p>다음 두 가지로 나뉜다.</p><ul><li><p>State Value Function $v_{\pi}(s_t)$</p><p>한 상태 $s_t$에서, 앞으로 어떤 policy $\pi$를 따른다고 했을 때, <strong>앞으로 얻을 수 있는</strong> reward 기댓값을 의미한다.</p></li></ul><p>$$<br>v_{\pi}(s_t) = \sum_{a_{t} } \pi(a_t|s_t) \sum_{s_{t+1},r_{t+1} } p(s_{t+1},r_{t+1}|s_{t},a_t)[r_{t+1} + \gamma \cdot v_{\pi}(s_{t+1})]<br>$$</p><ul><li><p>Action Value Function $q_{\pi}(s_t, a_t)$</p><p>한 상태 $s_t$에서, 어떤 액션 $a_t$를 취하고 난 후, 앞으로 어떤 policy $\pi$를 따른다고 했을 때, <strong>앞으로 얻을 수 있는</strong> reward의 기댓값을 의미한다.</p></li></ul><p>$$<br>  q_{\pi} (s_t, a_t) = \sum_{s_{t+1}, r_{t+1}} p(s_{t+1}, r_{t+1}|s_t, a_t) [r_{t+1} + \gamma \cdot \sum_{a_{t+1} } \pi(a_{t+1}|s_{t+1})q_{\pi}(s_{t+1}, a_{t+1})]<br>$$</p><p>둘 다 현재 어떤 상황에서 앞으로 얻을 수 있는 reward의 기댓값을 의미한다.</p><h2 id="Bellman-Equation"><a href="#Bellman-Equation" class="headerlink" title="Bellman Equation"></a>Bellman Equation</h2><p><strong>현재 시간 $t$에서의 value와 다음 시간 $t+1$에서의 value와의 관계식</strong>을 의미한다. State-value Bellman equation과 action-value Bellman equation이 존재하며, reinforcement learning 알고리즘 구현에 있어서 가장 중요한 알고리즘 중 하나이다.</p><h3 id="Bellman-Equation-vs-Value-Function"><a href="#Bellman-Equation-vs-Value-Function" class="headerlink" title="Bellman Equation vs Value Function"></a>Bellman Equation vs Value Function</h3><p>두 용어의 개념에 대한 차이는 거의 없다. Bellman equation도 value function이다. 다만,  $t$에서의 value function을 $t+1$에서의 value function에 대한 식으로 나타냈다 뿐. Recursive하게 표현한 value function을 Bellman equation이라고 부를 뿐이다.</p><h3 id="State-value-Bellman-Equation"><a href="#State-value-Bellman-Equation" class="headerlink" title="State-value Bellman Equation"></a>State-value Bellman Equation</h3><p>State-value function에 대한 Bellman equation으로, state-value function입장에서, $t$에서의 state value와 $t+1$에서의 state value와의 관계식이다.<br>$$<br>v_{\pi} (s_t) = \sum_a \pi(a|s_t) \sum_{s_{t+1},r} p(s_{t+1}, r|s_{t}, a)[r + \gamma \cdot v_{\pi}(s_{t+1})]<br>$$</p><h3 id="Action-value-Bellman-Equation"><a href="#Action-value-Bellman-Equation" class="headerlink" title="Action-value Bellman Equation"></a>Action-value Bellman Equation</h3><p>Action-value function에 대한 Bellman equation으로, action-value funciton입장에서, $t$에서의 actionvalue와 $t+1$에서의 action value와의 관계식이다.<br>$$<br>q_{\pi} (s_{t}, a_{t}) = \sum_{s_{t+1}, r} p(s_{t+1}, r|s_t, a_t)[r + \gamma \cdot \sum_{a_{t+1} } \pi(a_{t+1}|s_{t+1}) \cdot q_{\pi}(s_{t+1}, a_{t+1})]<br>$$</p><h3 id="Compute-Value-using-Bellman-Equation"><a href="#Compute-Value-using-Bellman-Equation" class="headerlink" title="Compute Value using Bellman Equation"></a>Compute Value using Bellman Equation</h3><p>Bellman equation의 가장 큰 장점은, value function을 매우 효율적으로 계산할 수 있게 해 준다는 것이다. Value function은 정의에서 보다시피, 미래의 reward의 기댓값이다. 즉, 현재 시간 $t$이후의 모든 시간에서의 reward 기댓값인데, 이 정의로는 value를 계산할 수 없다. Bellman equation은 이 무한 수열 계산문제를 단순한 linear equation으로 바꿔준다.</p><p>다음 board를 생각해 보자.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200119160231033.png" alt="image-20200119160231033"></p><p>보드에는 $A,B,C,D$라는 4개의 공간이 있으며, 말 하나를 이 공간 내에서 움직이려 한다. 즉, 각 공간이 곧 state이며, 총 4개의 state가 있는 environment이다.</p><p>Action은 상,하,좌,우 4개의 움직임이 존재한다. Policy는 총 4개의 움직임에 대해 uniform distribution이다. 말이 $B$로 들어오거나 $B$에 머무는 움직임에 대해서만 reward +5를 부여하고 나머지는 0을 부여한다. Discount factor는 0.7로 하자.</p><p>State $A$에서의 value는 무한 수열식이지만, Bellman equation을 이용한다면, 다음 state의 value를 이용해서 계산이 가능하다.<br>$$<br>V(A) = \sum_{a} \pi(a|A) \sum_{s’,r} p(s’,r|a,A)[r + \gamma \cdot V(s’)]<br>$$<br>그런데, action이 정해지면, state는 확정(deterministic)이므로, 위 Bellman equation을 다음처럼 변경할 수 있다.<br>$$<br>V(A) = \sum_a \pi (a|A) [0 + 0.7 \cdot V(s’)]<br>$$<br>$$<br>V(A) = \frac{1}{4} \cdot 0.7 \cdot V(C) + \frac{1}{2} \cdot 0.7 \cdot V(A) + \frac{1}{4} \cdot (5 + 0.7 \cdot V(B)))<br>$$</p><p>$V(B), V(C), V(D)$도 유사하게 $V(A), V(B), V(C), V(D)$에 대한 식으로 표현이 가능하며, 일차 연립방정식으롤 표현이 가능하다. 즉, 무한 수열을 푸는 문제가 일차 연립 방정식을 푸는 문제로 바뀐 것이다.</p><p>하지만, 현실에서는 approximation방법을 많이 이용한다. State개수가 많아서 그런가?</p><h2 id="Optimality"><a href="#Optimality" class="headerlink" title="Optimality"></a>Optimality</h2><p>Reinforcement learning의 목적은 단순히 value function과 policy를 계산하는게 아니라, optimal policy와 optimal value function, 즉, reward를 최대화하는 policy와 value function을 찾는 것이다.</p><h3 id="Optimal-Policies"><a href="#Optimal-Policies" class="headerlink" title="Optimal Policies"></a>Optimal Policies</h3><p>Optimal policy란, 모든 state에서 가장 높은 value를 반환하게 하는 policy를 말한다. 즉, 다음 그림처럼 어떤 여러개의 policies들보다 항상 큰 value를 반환하게 하는 policy는 항상 존재한다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200119163026023.png" alt="image-20200119163026023"></p><p>즉, $\pi_1, \pi_2$보다 항상 크거나 같은 value를 반환하는 policy는 항상 존재한다는 건데, 방법은 간단하다. $\pi_1 \leq \pi_2$인 state에서는 $\pi_2$의 policy를 따르고, $\pi_1 &gt; \pi_2$인 state에서는 policy $\pi_1$을 따르도록 하는 새로운 policy $\pi_3$를 만들면 된다.</p><p>이와 같은 방법으로, 언제나 모든 policy보다 크거나 같은 value를 반환하는 policy를 만들 수 있으며, 이런 policy는  unique할 수도 있고 여러개가 될 수도 있다(모든 state에 걸쳐서 똑같은 value를 반환하는 policy가 여러개일 수 있음).</p><p>어쨌든, 이런 과정을 거쳐서 가장 높은 value를 모든 state에 걸쳐서 반환하는 policy를 optimal policy라고 부른다. 방금 말했듯이, optimal policy는 반드시 존재하며, 여러개일 수 있다.</p><p>또 하나 생각할 점은, 위 그림에서 $\pi_3$은 분명히, $\pi_1, \pi_2$중 하나를 선택한 policy에 불과하므로, $\pi_1, \pi_2$둘 중 value가 높은 policy의 value와 같아야 할 것이데, 어느 지점에서는 $\pi_1, \pi_2$ 모두의 value보다 높다. 이것은, future value까지 반영해서 생기는 현상으로, 미래 state에서도 최선 policy인 $\pi_3$을 따르므로, value는 재료가 된 policy들보다 커질수도 있다.</p><h3 id="Optimal-Values"><a href="#Optimal-Values" class="headerlink" title="Optimal Values"></a>Optimal Values</h3><p>보통 optimal policy는 unknown으로, 바로 계산할 수 없다. 애초에 reinforcement learning의 목적은 optimal policy를 찾는 것이다. Optimal policy를 계산할때는 opimal value function를 이용하게 된다.</p><p>Optimal value function이란, 현재 state에서 가능한 모든 액션과 그에 다른 다음 value를 보고, 다음 value가 가장 높은 action을 deterministic하게 선택했을 때의 value function을 의미한다.<br>$$<br>v_* (s) = \underset{a}{ \text{max} } ~ \sum_{s’,r} p(s’,r|s,a)[r + \gamma \cdot v_* (s’) ]<br>$$<br>보다시피, action의 분포(policy)가 사라지고, 그냥 다음 state인 $s’$의 value $v_* (s’)$가 가장 높은 action을 무조건(deterministically) 취하게 한다. 또한, 이 value $v_* (s’)$만으로 $v_* (s)$를 계산하도록 한다.</p><p>앞서, value function은 두 가지가 있고, 두 가지 value function 모두 Bellman equation 형태로 바꿀 수 있었다. Optimal value function도 마찬가지이며, optimal한 value function을 Bellman equation형태로 바꾼 것을 Bellman optimality equation이라고 부른다.</p><ul><li><strong>Bellman optimality equation for state value function</strong></li></ul><p>$$<br>v_* (s) = \underset{a}{\text{max} } ~ \sum_{s’,r} p(s’,r|s,a) [r + \gamma \cdot v_* (s’)]<br>$$</p><ul><li><strong>Bellman optimality equation for action value function</strong></li></ul><p>$$<br>  q_* (s,a) = \underset{a}{\text{max} } \sum_{s’,r} p(s’,r|s,a)[r + \gamma \cdot \underset{a’}{\text{max} } ~ q_* (s’,a’)]<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Policies-and-Value-Functions&quot;&gt;&lt;a href=&quot;#Policies-and-Value-Functions&quot; class=&quot;headerlink&quot; title=&quot;Policies and Value Functions&quot;&gt;&lt;/a&gt;Po
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Reinforcement Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Reinforcement-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="ReinforcementLearning" scheme="https://jaeyoung-blog.github.io/tags/ReinforcementLearning/"/>
    
  </entry>
  
  <entry>
    <title>03. Markov Decision Process</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/03-Markov-Decision-Process/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/03-Markov-Decision-Process/</id>
    <published>2020-03-03T01:00:02.000Z</published>
    <updated>2020-03-05T03:46:15.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markov-Decision-Process"><a href="#Markov-Decision-Process" class="headerlink" title="Markov Decision Process"></a>Markov Decision Process</h1><p>참고: Coursera Reinforcement Learning (Alberta Univ.)</p><p>마르코드 결정 과정.</p><p>이름에서 유추할수 있다시피, Markov assumption에 기반한 decision process로, $t+1$에서의 상태 $s_{t+1}$는 오직 현재 $t$에서의 상태인 $s_{t}$에 있을 때, agent의 decision인 $a_{t}$에 의해서만 결정된다는 것이다.</p><h3 id="Markov-Decisoin-Process-vs-K-arm-Bandit-Problems"><a href="#Markov-Decisoin-Process-vs-K-arm-Bandit-Problems" class="headerlink" title="Markov Decisoin Process vs K-arm Bandit Problems"></a>Markov Decisoin Process vs K-arm Bandit Problems</h3><p>Markov decision process에서는 K-arm bandit에서 가정했던 여러가지 조건을 해제한 application에 적용이 가능하다.</p><ul><li>K-arm bandit problem에서는 항상 하나의 state만 존재했지만, Markov decision process는 액션을 취함에 따라 state가 변하는 application에도 적용이 가능하다.</li><li>K-arm bandit problem에는 언제나 선택할 수 있는 action 리스트가 고정되어 있었다. 하지만, Markov decision process가 적용되는 application은 그럴 필요가 없다. 각 state에 서로 다른 action list가 있을 수 있다.</li><li>K-arm bandit problem에는 state와 선택 가능한 액션 리스트가 하나임과 동시에 매 time마다 optimal action은 항상 고정되어 있었다. 하지만, 이번에 이야기할 reinforcement learning environment는 state마다 optimal action이 다를 수 있다.</li></ul><h3 id="Finite-Markov-Decision-Process"><a href="#Finite-Markov-Decision-Process" class="headerlink" title="Finite Markov Decision Process"></a>Finite Markov Decision Process</h3><p>Agent와 상호작용하는 environment에는 여러 state가 있을 수 있는데, 이 state의 개수가 finite 하며, 각 state에서 존재하는 action 개수도 finite한 경우에 적용되는 Markov decision process를 finite Markov decision process라고 한다. 물론 finite 하지 않는 경우가 매우 많다.</p><p>현재 상태를 $s$, 이 상태를 기준으로 내린 decision $a$, 그리고, 그 결정에 의해 변한 상태를 $s’$, 그로인해 받는 reward를 $r$라고 했을 때, Markov decision process의 <strong>state transition probability</strong>는 다음과 같다.<br>$$<br>p(s’,r|s,a)<br>$$</p><h3 id="Episodic-Tasks-vs-Continuous-Tasks"><a href="#Episodic-Tasks-vs-Continuous-Tasks" class="headerlink" title="Episodic Tasks vs Continuous Tasks"></a>Episodic Tasks vs Continuous Tasks</h3><ul><li><p><strong>Episodic Tasks</strong></p><p>바둑, 스타크래프트와 같은 게임처럼, “한번의 판(한 판), stage”이 존재하는 problem을 가리킨다. 따라서, terminal state 라는 것이 존재하며, 하나의 stage를 시작해서 끝난 후 최종 reward까지 받을 때 까지를 하나의 episode라고 부른다. Agent는 여러 episode를 체험해보면서 학습하게 된다. 한 episode에서 이런 선택을 했다면 다음 episode에서 다른 선택을 하면서 다른 결말 및 reward를 획득하면서 학습하게 되는 task이다.</p><p>Episode는 이전의 모든 episode와 독립적이다. 즉, 이전 episode가 어떻게 끝났던 간에, 현재 episode는 이전 episode에 의해 영향을 받지 않는다. 매 게임이 독립이라는 이야기이다.</p></li><li><p><strong>Continuous Tasks</strong></p><p>일반적인 로봇이 수행하는 작업들이 보통 continuous task이다. 이 경우, terminal state가 없으며, 그냥 life를 살아가면서 마주치는 state에서 action을 수행하면서 학습을 진행하게 된다.</p></li></ul><h2 id="Goals-of-MDP"><a href="#Goals-of-MDP" class="headerlink" title="Goals of MDP"></a>Goals of MDP</h2><p>MDP의 목적은 당장 action을 선택했을 때의 reward를 최대화 하는 것이 아닌, 현재 어떤 action을 선택한 후, 미래의 모든 reward들 합의 기댓값을 최대하하도록 하는 action을 선택하는 것이다. 즉, 다음과 같은 action $a_t^* $를 선택한다.<br>$$<br>a_t^* = \underset{a}{\text{argmax} } ~ \mathbb{E}[G_t] = \underset{a}{\text{argmax}} ~ \mathbb{E}[R_{t+1} + \cdots + R_T]<br>$$<br>이때, $T$는 final state에서의 time 이다. 즉, 한 episode의 끝일때의 time이다.</p><p>$G_t$는 random variable인데, $R_t$들이 random variable이고, random variable의 합이기 때문이다. 따라서, random variable $G_t$의 기댓값을 최대화하는 action $a$를 선택하도록 한다.</p><h3 id="Goals-of-MDP-for-Continuous-Tasks"><a href="#Goals-of-MDP-for-Continuous-Tasks" class="headerlink" title="Goals of MDP for Continuous Tasks"></a>Goals of MDP for Continuous Tasks</h3><p>위에서 소개한 action 선택법은 episodic task에만 적용이 가능하다. 미래의 모든 reward의 합의 기댓값이므로, terminal state가 존재해야 $\mathbb{E}[G_t]$가 finite($\infty$가 아님)하다. continuous task의 경우에는, $R_T$가 없고 무한히 더해지기 때문에, $\mathbb{E}[G_t] \approx \infty$가 된다. 따라서 <strong>discounting</strong>이라는 것을 통해 액션을 선택한다.<br>$$<br>a_t^* = \underset{a}{\text{argmax} } ~ G_t = \underset{a}{\text{argmax} } ~ [R_{t+1} + \gamma R_{t+2} + \gamma^2 R_{t+3} + \cdots] = \underset{a}{\text{argmax} } ~ [R_{t+1} + \gamma G_{t+1} ]<br>$$<br>Discounting을 하는 이유는 $G_t$를 finite하게 만들기 위함이며, 다음과 같기 때문에 finite하다. 이때, $0 \leq \gamma &lt; 1$이어야 한다. $R_{max}$를 agent가 한 액션을 취했을때 얻을 수 있는 액션의 최대치라고 하자.<br>$$<br>G_t = R_{t+1} + \gamma R_{t+2} + \gamma^2 R_{t+3} + \cdots<br>$$<br>$$<br>G_t \leq R_{max} + \gamma R_{max} + \gamma^2 R_{max} + \cdots<br>$$</p><p>$$<br>G_t \leq R_{max}(1 + \gamma + \gamma^2 + \cdots)<br>$$</p><p>$$<br>G_t \leq R_{max} \cdot \frac{1}{1 - \gamma} ~ \text{iff } 0 \leq \gamma &lt; 1<br>$$</p><p>따라서, $0 \leq \gamma &lt; 1$을 만족하면, $G_t$는 $R_{max} \cdot \frac{1}{1 - \gamma}$보다 작다. 그리고, finite하다($\infty$가 아니다).</p><p>굳이 episodic task라고 해서 discounting을 사용하지 말라는 법은 없다. discount rate $$\gamma$$를 통해 미래 reward 지향적일지, 즉각적인 reward 지향적일지 정할 수있기 때문에 discounting 방법은 episodic task에서도 많이 이용된다.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>MDP란, 현재 상태만을 바탕으로 action을 취하고 reward를 얻는 환경에서의 reinforcement learning 방법 또는 decision process중 하나이다. 액션은 다음과 같이 취한다.<br>$$<br>a^* (t) = \underset{a(t)}{\text{argmax} } ~ \mathbb{E}[G_t] = \underset{a(t)}{\text{argmax} } ~ \mathbb{E}[R_{t+1} + \gamma \cdot G_{t+1} ]<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markov-Decision-Process&quot;&gt;&lt;a href=&quot;#Markov-Decision-Process&quot; class=&quot;headerlink&quot; title=&quot;Markov Decision Process&quot;&gt;&lt;/a&gt;Markov Decision P
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Reinforcement Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Reinforcement-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="ReinforcementLearning" scheme="https://jaeyoung-blog.github.io/tags/ReinforcementLearning/"/>
    
  </entry>
  
  <entry>
    <title>02. K-arm Bandits Problems</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/02-K-arm-Bandits-Problems/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/02-K-arm-Bandits-Problems/</id>
    <published>2020-03-03T01:00:01.000Z</published>
    <updated>2020-03-06T01:38:11.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="K-arm-Bandits-Problems"><a href="#K-arm-Bandits-Problems" class="headerlink" title="K-arm Bandits Problems"></a>K-arm Bandits Problems</h1><p>참고: Coursera Reinforcement Learning (Alberta Univ.)</p><p>Reinforcement learning에서 가장 기본적인 문제로, K-arm bandit problem을 들 수 있다. K개의 arm이 있고, agent는 그 arm 중 하나를 골라야 하며, 하나를 골랐다면, environment는 그 arm의 reward를 반환한다.</p><h3 id="Multi-armed-Bandits-Problem"><a href="#Multi-armed-Bandits-Problem" class="headerlink" title="Multi-armed Bandits Problem"></a>Multi-armed Bandits Problem</h3><p>슬롯 머신문제, 의사의 치료법 선택 문제 등을 통칭해서 multi-armed bandits 종류의 문제라고 부른다.</p><ul><li><p>슬롯 머신 문제</p><p>내가 어떤 슬롯 머신을 선택하면 분명히 해당 슬롯 머신의 stationary distribution에 의해 어떤 결과를 얻을 것이고 그 결과를 바탕으로 reward를 얻게 될 것이다. 하지만, stationary distribution은 인공지능이 알 수 없다. 하지만, 어떤 슬롯 머신을 많이 돌려봤다면 해당 머신에 대해서는 stationary distribution을 어느정도 추정할 수 있다. 추정한 놈들중 높은 reward를 주는 결과를 뱉는 머신을 선택할 수도 있고 새로운 머신을 돌려서 그 머신의 stationary distribution을 추정해 볼 수 있다. 그 머신이 지금까지 알고 있는 머신보다 더 좋은 결과를 줄 수도 있기 때문에 새로운 머신도 조사해봐야 한다.</p></li><li><p>의사의 치료법 선택 문제(이름은 신경쓰지 말자)</p><p>의사는 심각한 환자에게 신생 치료법을 제안할 수도 있고 최선이라고 알려진 방법을 선택할 수도 있다. 신생 치료법은 최선이라고 알려진 방법보다 나을수도, 쪽박일 수도 있다.</p></li></ul><p>이런 종류의 문제를 K-armed bandits 문제라고 부른다.</p><h3 id="K-arm-Bandit-vs-Reinforcement-Learning"><a href="#K-arm-Bandit-vs-Reinforcement-Learning" class="headerlink" title="K-arm Bandit vs Reinforcement Learning"></a>K-arm Bandit vs Reinforcement Learning</h3><p>K-arm bandit problem은 reinforcement learning에서 다음과 같은 제약조건을 걸어버린, 쉬운 문제에 속한다.</p><ul><li>오직 하나의 state만 존재한다. 즉, 어떤 arm을 선택하는 액션을 취한다고 해서 state가 변하지는 않는다.</li><li>취할 수 있는 action 목록은 항상 동일하다. 시간이 지난다고 해서 가능한 액션이 늘어난다거나 줄어들지 않는다.</li><li>항상 optimal action이 일정하다. 시간에 따라 optimal action이 변하지 않는다.</li><li>유한한 환경이다. 즉, 선택 가능한 액션 개수, state개수 등이 finite하다.</li></ul><p>일반적으로 reinforcement learning은 위 제약조건들이 없다.</p><h3 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h3><p>$A_t$: 어떤 시간 $t$에서 취한 액션</p><p>$R_t$: 어떤 시간 $t$에서 취한 액션으로 얻은 reward</p><p>$q_* (a)$: 어떤 임의 액션 $a$를 취해서 얻는 reward의 기댓값 즉,<br>$$<br>q_* (a) = \mathbb{E}(R_t|A_t=a)<br>$$<br>(당연히 $q_* (a)$는 인공지능이 알 수 없는 값이다. 이걸 알면 기댓값이 높은 길만 선택하면 된다.)</p><p>$Q_* (a)$: 인공지능이 exploitation, exploration을 바탕으로 추정해낸 분포로 계산한, 임의 액션 $a$를 취했을 때의 reward 기댓값. 인공지능은 적절한 exploration을 통해 $Q_* (a)$를 업데이트해서 $q_* (a)$와 가깝게 추정해야 한다.</p><h2 id="Exploitation-vs-Exploration"><a href="#Exploitation-vs-Exploration" class="headerlink" title="Exploitation vs Exploration"></a>Exploitation vs Exploration</h2><p>Value function을 말하기 앞서서, exploitation과 exploration은 서로 균형을 이뤄야 한다. 이 둘의 균형을 맞춰야 적절히 최대 reward를 찾아가는 결정을 하면서 새로운 길을 개척할 수 있다.</p><p>이것을 달성하는 방법으로 다음과 같은 것들이 있다.</p><ul><li><p>$\epsilon$-greedy methods (Epsilon-greedy)</p></li><li><p>Optimal Initial Values</p></li><li><p>UCB(Upper Confidence Bound) Methods</p></li><li><p>Bayesian/Thompson Sampling</p></li></ul><h3 id="Trade-off-Between-Exploration-and-Exploitation"><a href="#Trade-off-Between-Exploration-and-Exploitation" class="headerlink" title="Trade-off Between Exploration and Exploitation"></a>Trade-off Between Exploration and Exploitation</h3><p>일단, agent는 어떤 결정을 할때, exploration과 exploitation을 동시에 수행할 수 없다. 반드시 exploration을 할지, exploitation을 할지 선택하고 액션을 취해야 하는데, exploration을 하게 되면 당장 최선의 결과를 얻을 수 없으며, exploitation을 하게 되면 당장 최선의 결과를 얻을 수 있으나, 더 최상이 되는 다른 것을 찾아나설 수 없다.</p><h3 id="epsilon-greedy-Methods"><a href="#epsilon-greedy-Methods" class="headerlink" title="$\epsilon$-greedy Methods"></a>$\epsilon$-greedy Methods</h3><p>매번 action을 선택할 때, $\epsilon$의 확률로 exploration을 하고, $1-\epsilon$의 확률로 exploitation을 하게 구현한 방법이다. 이 방식의 단점은 충분히 수렴한 뒤에도 $\epsilon$의 확률로 exploration을 하게 된다는 것이다(하지만 non-stationary distribution인 환경에서는 이게 더 도움이 된다).</p><p>$\epsilon$이 크면 빠르게 optimal한 action 기댓값을 찾도록 exploration을 할 수 있지만, 지나치게 exploration을 많이 하고 수렴 이후에는 greedy action을 해야 하는데 exploration을 하고 있는 경우를 볼 수 있다.</p><p>그렇다고 $\epsilon$이 작으면 global optimal을 찾는 속도가 너무 느리다.</p><h3 id="Optimistic-Initial-Values"><a href="#Optimistic-Initial-Values" class="headerlink" title="Optimistic Initial Values"></a>Optimistic Initial Values</h3><p>$\epsilon$-greedy 방법에서, 각 액션의 초기 기댓값을 어떻게 정하느냐에 따라 알고리즘의 성능이 달라지기도 한다. 가장 기본적인 방법은 초기 기댓값을 0으로 두는 것으로, 이렇게 되면, $\epsilon$값을 0보다 크게 둬서 어느정도 exploration을 유도해야 한다.</p><p>하지만, 최대 reward를 알고, initial value값을 최대 reward보다 높은 값을 설정해 두면, 오직 greedy하게 선택하게 하는 것으로도 초기 iteration에서 적절히 exploration이 가능하다. 하지만, 어느정도 지나게 되면 exploration을 하지 않는다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20191230212326720.png" alt="image-20191230212326720"></p><p>초기 reward 기댓값을 높게 설정하면, 아무리 좋은 reward를 얻는 액션이라 하더라도, 기댓값이 감소하기에, 다른 액션의 기댓값이 높아지게 된다. 따라서 자연스럽게 exploration을 하게 된다. 하지만, 초창기 iteration이 거의 exploration이 차지하기 때문에 수렴이 다소 느릴 수 있으나, 그 다음부터는 매우 빠르게 optimal에 수렴한다.</p><p>optimal에 수렴한 이후부터는 exploitation만 수행하게 되기 때문에(이미 최적 expectation을 계산해서 낮은 기대치를 갖는 액션은 취하지 않는다.) 만약, optimal reward expectation이 변하는 환경, 즉, stationary distirbution이 변하는 환경에선 이 방법은 적합하지 않다. 시간이 지남에 따라 최적의 액션이 바뀌게 되면 이 방법이 소용이 없어진다.</p><p>다음을 만족하는 action을 선택한다.<br>$$<br>a^* = \underset{a}{\text{argmax}} ~ q^* (a)<br>$$<br>Initial value estimation이 높기 때문에 오직 greedy하게 액션을 선택한다.</p><h3 id="UCB-Upper-Confidence-Bound"><a href="#UCB-Upper-Confidence-Bound" class="headerlink" title="UCB (Upper Confidence Bound)"></a>UCB (Upper Confidence Bound)</h3><p>Confidence interval을 이용해서 액션을 선택하는 방법으로, 각 action의 value 기댓값을 추정한 후, 그 기댓값의 confidence interval를 계산한다. 그리고, 특정한 p-value에 대해 confidence interval의 upper bound를 구한 후, 가장 높은 upper bound를 가지는 action을 선택하는 방식이다. </p><p>이 방법의 장점은, 굳이 $\epsilon$의 확률을 정해놓고 exploration을 하게 하는 것이 아니라, exploration이 얼마 이루어지지 않아 불확실한 confidence boundary를 가지는 것을 알아서 선택하게 하고, 많이 exploration되어 확실하지만, 높은 기댓값으로 확실한 값을 선택하게 함으로써, exploration과 exploitation을 자동으로 조절해서 선택하게 한다.</p><p>시간이 지날수록 수렴하게 되면 exploration은 자동으로 줄어들게 된다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200105142655161.png" alt="image-20200105142655161"></p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200105142946483.png" alt="image-20200105142946483"></p><p>즉 ,다음을 만족하는 action을 선택한다.<br>$$<br>a^* = \underset{a}{\text{argmax} } [q^* (a) + c\sqrt{\frac{\text{ln} ~ N} {N_a} } ]<br>$$<br>이때, $\underset{a}{\text{argmax}} ~ q^* (a)$는 greedy 한 선택을 위한 term, 즉, exploitation을 위한 term이고, $a^* = \underset{a}{ \text{argmax} } ~ c \sqrt{ \frac{ \text{ln} N } {N_a} }$은 exploration을 위한 term이다. 즉, confidence interval인데, 다음 식을 이용해서 유도할 수 있다고 한다.<br>$$<br>P(|\bar{X} - \mu| \geq \epsilon) \leq 2e^{-2 \epsilon^2 N}<br>$$</p><h3 id="Bayesian-Thompson-Sampling"><a href="#Bayesian-Thompson-Sampling" class="headerlink" title="Bayesian/Thompson Sampling"></a>Bayesian/Thompson Sampling</h3><p>UCB와 매우 유사하지만, value 기댓값의 confidence interval의 upper bound가 가장 큰 액션을 선택하는 것이 아니라, value의 posterior를 구하고 거기서 샘플링 한 후, 가장 큰 샘플을 가지는 액션을 선택하게 된다.<br>$$<br>a^* = \underset{a}{\text{argmax}} ~ [\bar{x} \sim \text{Posterior}(q^*(a))]<br>$$<br>이것은 UCB와 마찬가지로 confidence/credible interval과 관련되어 있는데, value 샘플링을 할 때, 가장 높은 value가 나온 경우는 두 가지로 생각할 수 있다.</p><ul><li>그 action에 대한 value estimation이 매우 불확실한 경우. 즉, credible interval이 매우 넓은 경우.</li><li>그 action의 value estimation이 그냥 높은 경우. 즉, optimal인 경우.</li></ul><p>하는 방법은 다음과 같다.</p><ol><li>한 액션의 value를 파라미터로 생각한다.</li><li>Value의  likelihood를 모델링하고, conjugate prior를 설정한다.</li><li>Value의 posterior를 계산한다.</li><li>Posterior를 계산했으면, posterior를 이용해서 value하나를 샘플링한다. Conjugate prior가 아니라면? MCMC를 써서 수렴시킨 후에 나온 샘플 하나를 가저오면 되나?</li><li>이것을 각 액션에 대해서 반복하고 가장 높은 value 샘플을 가지는 액션을 취한다.</li></ol><h2 id="Action-value-Methods"><a href="#Action-value-Methods" class="headerlink" title="Action-value Methods"></a>Action-value Methods</h2><p>어떤 액션을 골라야 할 때, 지금 현재 가지고 있는 지식만으로 각 액션을 취했을 때의 얻어지는 기댓값을 각각 계산하고, 가장 높은 기댓값을 가지는 액션을 취하는 방식이다. 즉, value function을 “가장 큰 액션의 기댓값을 가지는 액션”이라고 정의하는 것이다.</p><p>액션에 따른 reward의 기댓값 $Q_* (a)$을 계산하는 방법은, 다음과 같이 할 수도 있고, 다른 방법을 사용할 수도 있다.<br>$$<br> Q_* (a) \approx \frac{ \sum_{i=1}^{t-1} R_i \cdot I_{A_i=a} }{ \sum_{i=1}^{t-1} I_{A_i=a} }<br>$$<br>즉, 이때까지 $a$라는 액션을 취했을 때, 얻었던 reward들의 평균값으로 $a$의 reward 기댓값이라고 삼는 것이다.</p><p>그리고, 다음을 만족하는 액션 $A_t$를 선택한다.<br>$$<br>A_t = \text{argmax}_a ~ Q_t(a)<br>$$<br>Action-value methods는 greedy한 방식으로, $\epsilon$-greedy와 함께 사용해서 exploration과의 균형을 맞추려고 시도해 볼 수 있다.</p><h2 id="Associative-Search-Contextual-Bandits"><a href="#Associative-Search-Contextual-Bandits" class="headerlink" title="Associative Search (Contextual Bandits)"></a>Associative Search (Contextual Bandits)</h2><p>K-arm bandit problem은 매우 간단한 reinforcement learning 예제이다. 보통 흔히 이야기하는 reinforcement learning에 다음과 같은 제약조건을 걸면 K-arm bandit problem이 된다.</p><ul><li>단 한 가지의 situation만 존재한다.</li><li>그에 따라, 액션이 situation에 영향을 미치지 않는다.(액션을 취한다고 해서 다음 time의  situation이 다른 situation으로 바뀌지는 않는다.)</li></ul><p><strong>상황(situation 또는 state)</strong>이란, agent가 상호작용하는 environment의 한 객체라고 생각해도 되며, 상황이 바뀌면 reward를 샘플링하는 value function도 바뀐다. 따라서, 이 문제는 non-stationary problem이며, 각 상황들에 할당되어 있는 value function 역시 non-stationary일 수도 있다.</p><p>Associate search를 통한 reinforcement learning은 contextual bandit problem이라고도 부른다.</p><p>반대로 이야기하면, full reinforcement learning은 다음과 같은 점때문에 K-arm bandit problem이랑 다르다.</p><ul><li>Environment안에 여러개의 situation이 state로 존재한다.</li><li>각 state에는 서로 다른 value function이 있다. 즉, 어떤 state에서는 액션 $A_i$을 취하는게 optimal이지만, 다른 state에서는 액션 $A_j$를 취하는게 optimal이 되기도 한다. state마다 취할 수 있는 액션 집합이 다를 수도 있다.</li><li>하나의 state입장에서, value function은 non-stationary distribution이 될 수 있다.</li><li>Agent가 취하는 액션은 본인이 받는 reward에도 영향을 미치지만, 다음 time에서의 state에도 영향을 줄 수 있다. 즉, 액션이 state transition을 야기하기도 한다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;K-arm-Bandits-Problems&quot;&gt;&lt;a href=&quot;#K-arm-Bandits-Problems&quot; class=&quot;headerlink&quot; title=&quot;K-arm Bandits Problems&quot;&gt;&lt;/a&gt;K-arm Bandits Proble
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Reinforcement Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Reinforcement-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="ReinforcementLearning" scheme="https://jaeyoung-blog.github.io/tags/ReinforcementLearning/"/>
    
  </entry>
  
  <entry>
    <title>01. Introduction</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/01_Introduction/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/01_Introduction/</id>
    <published>2020-03-03T01:00:00.000Z</published>
    <updated>2020-03-03T04:27:46.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Reinforcement Learning이란, 무엇을 할지에 대해 학습하는 것이다. 다르게 말하면, 어떤 상황이 입력으로 들어가서 어떤 액션이 출력되는 함수를 학습하는 것이다.</p><p>Reinforcement learning에선, 두 가지 중요한 특징이 있는데, 다음과 같다.</p><ul><li>Trails &amp; erros search</li><li>Delayed rewards</li></ul><p>물론 그 전에 environment를 인지할 수 있는 센서가 있어서 상황을 바탕으로 위 두 가지 특징이 발현된다.</p><h2 id="Overview-of-Reinforcement-Learning"><a href="#Overview-of-Reinforcement-Learning" class="headerlink" title="Overview of Reinforcement Learning"></a>Overview of Reinforcement Learning</h2><p>Supervised learning과 unsupervised learning은 다음과 같은 특성을 지닌다.</p><ul><li>숫자로된 테이블 형태의 데이터가 존재한다. ($X: N × D$$, $$Y: N × 1$) 이 두가지 데이터를 모두 넣고 모델을 학습하게 된다.</li><li>Static한 학습만 가능하다. 데이터를 추가하려면, 기존 데이터도 모두 넣고 fine-tuning 해야 하는 경우가 많다. 따라서, online-learning에 매우 불리하다.</li><li>시간이라는 개념이 없다(Sequence라는 개념은 있어도…). 그저 $X$를 받으면 $Y$를 줄 뿐. </li><li>Supervised learning의 경우, $Y$$가 $$X$ 동시에 주어지기에, 즉각적인 피드백이 있다.</li></ul><p>반면, reinforcement learning은 다음과 같은 차이점이 있다.</p><ul><li>데이터가 매우 비정형적이다. 로봇의 경우, environment로부터 받은 카메라 정보와 여라가지 센서 정보나 environment representation 정보 등이 있을 수 있다.</li><li>Dynamic하게 학습한다. Reinforcement learning은 데이터를 모아서 데이터셋을 만들어서 학습하는 형태가 아니라, environment에서 action을 취한 결과 피드백을 얻고 학습하는 형태이다. 즉, 그 자체가 그냥 online learning이다.</li><li>어떤 액션을 취하면 즉각적인 피드백이 없을 수 있고, 게임이 끝날 때 까지 피드백을 얻지 못할 수도 있다. 따라서, 상대적으로 시간이라는 개념이 존재한다. 즉, 액션과 리워드가 동시에 주어지지 않고 중간에 일정 시간이 있을 수 있다.</li></ul><h3 id="Unusual-amp-Unexpected-Stretagy-in-RL"><a href="#Unusual-amp-Unexpected-Stretagy-in-RL" class="headerlink" title="Unusual &amp; Unexpected Stretagy in RL"></a>Unusual &amp; Unexpected Stretagy in RL</h3><p>Reinforcement learning은 최종 value를 최대화하면서 학습한다. 그리고, 최종 value를 가장 높게 하는 방법을 알아서 찾아나가는데, 이때, 그 방법이 소위 말해서 수단과 방법을 가리지 않는 방법일 수  있다. 또한, agent가 취하는 액션은 나중에 보면 최대 reward를 받는 방법이었다는 것이 드러나지만, 액션 하나하나를 보면 인간이 전혀 이해하지 못하는 방향의 액션일 수도 있다.</p><h3 id="Supervised-Learning-as-Reinforcement-Learning"><a href="#Supervised-Learning-as-Reinforcement-Learning" class="headerlink" title="Supervised Learning as Reinforcement Learning?"></a>Supervised Learning as Reinforcement Learning?</h3><p>액션을 취하고 리워드를 얻는다는 것은 어떻게 보면 supervised learning과 연관지을 수도 있을 것이다. Environment가 $X$가 되고 그에 적절한 optimal action이 $Y$가 되는 것이다.</p><p>하지만, supervised learning을 쓰지 않고 reinforcement learning을 쓰는 이유가 있다.</p><ul><li>계산 불가능할 정도로 많은 environment/state 경우의 수</li><li>Supervised learning은 $X$와 $Y$를 동시에 필요로 하지만, $Y$가 있긴 한데, $X$ 동시에 주지 못하는 경우가 있다. 이때는 supervised learning을 할 수 없다.</li></ul><h2 id="Exploitation-Exploration-Dilema"><a href="#Exploitation-Exploration-Dilema" class="headerlink" title="Exploitation-Exploration Dilema"></a>Exploitation-Exploration Dilema</h2><p>Reinforcement learning에서의 agent는 최대한 많은 reward를 얻으면서 문제를 해결해야 한다. 이미 알고 있는 문제 해결 방법중에서 가장 큰 reward를 얻을 수 있는 방법을 선택해서 문제를 해결하는 것이 합리적일 것이다(exploitation). 그러나, agent는 새로운 길을 탐색해 나가면서 더 나은 길을 찾을 필요가 있다(exploration). 하지만, exploration과정은 많은 비용이 들 수도 있고 탐험 결과가 좋은 reward를 주는 경로가 아닐 수도 있다. 그럼에도 exploration은 필요하다.</p><ul><li><p>Exploitation</p><p>이미 찾은 문제 해결 방법중에서 가장 나은 방법을 선택하는 것. 즉, 최대 reward를 찾아가는 것.</p></li><li><p>Exploration</p><p>새로운 길을 탐색하는 것. 많은 비용이 들지만, 새로운 길이 지금까지 가지고 있었던 해결 방법들 보다 더 나은 reward를 줄 수도 있다.</p></li></ul><p>Exploration은 많은 비용이 들기 때문에, 당장은 reward를 얻지 못할 수도 있다. Exploitation을 하면 당장은 많은 reward를 얻을 수 있다. 이를 exploitaiton-exploration dilema라고 부른다.</p><h2 id="Elements-of-Reinforcement-Learning"><a href="#Elements-of-Reinforcement-Learning" class="headerlink" title="Elements of Reinforcement Learning"></a>Elements of Reinforcement Learning</h2><p>크게 4가지로 나눌 수 있다.</p><ul><li><p>Policy</p><p>어떤 주어진 환경/상황에서 어떤 동작을 취해야 하는지에 대한 규칙 또는 정책, 또는 매핑 함수이다. RL에서 핵심 역할을 하며, 단순한 매핑 테이블일수도, 아주 복잡한 함수나 확률적인 모델일 수도 있다.</p></li><li><p>Reward signal</p><p>액션에 대한 결과적인 상황에 따라 agent가 어떤 reward를 받을지에 대한, 즉, 시스템의 목표를 어떻게 할 것인지에 대한 것이다.</p></li><li><p>Value</p><p>Reward는 액션마다 주어질 수 있는 것으로, 이것만 있으면 greedy하게 갈 수 있다. 이를 방지하기 위해 reward를 누적하고 시스템 전체의 reward를 바라볼 수 있게 하는 것이 value이다. 즉, 어떤 state $s_{i}$에 대한 value $value(s_i)$는 그 상태 이후, 미래의 상태들 $s_{i+1}, s_{i+2},…$로부터 얻을 수 있는 reward 기댓값이다. 즉, $\text{argmax} ~ value(s)$라 함은, 당장 greedy한 선택이 아니라, 미래에 총 reward가 높은 방향으로 액션을 선택할 수 있게 해 준다.</p><p>value-function은 당장 앞에 놓인 action에 대해 value를 계산해주는 함수?</p><p>Reinforcement learning의 주요 task는 이 value function을 추정하는 것이다. agent는 value function이 가장 높은 value를 리턴해주는 액션을 선택하면 되니까.</p></li><li><p>Model of environment</p><p>Agent가 상호작용하는 환경을 정의한 것.</p></li></ul><p>이외에, episode라는 것이 있다. episode란, agent가 게임을 시작하고 끝날 때 까지의 기간, 즉, 한 게임을 의미한다. 다만, 게임같이 “한 게임”이라는 개념이 존재하는 episodic task가 있는 반면(바둑, 스타크래프트), “한 게임”을 정의할 수 없는, continuous task도 존재한다(로봇은 수명이 다할 때 까지 끊임없이 환경과 통신함). 이 경우에는 episode가 없다.</p><p>Reinforcement learning은 궁극적으로 reward를 최대화하는 것이지만, agent는 어떤 상황에서 높은 reward를 고르는게 아니라 value가 높은 쪽을 골라야 한다.</p><p>이 value function을 정의하는 방법은 두 가지가 있을 수 있다.</p><ul><li><p>Tabular solution method</p><p>Value function은 deterministic하다. 보통 deterministic한 함수들은 입력과 출력 매핑을 테이블 형태로 표현가능하다. 따라서, deterministic한 방법을 tabular method라고 부른다.</p><ul><li>Markov Decision Process</li></ul></li><li><p>Approximate solution method</p><p>Value function은 확률적이다.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Reinforcement Learning이란, 무엇을 
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Reinforcement Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Reinforcement-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="ReinforcementLearning" scheme="https://jaeyoung-blog.github.io/tags/ReinforcementLearning/"/>
    
  </entry>
  
  <entry>
    <title>Lagrangian Multiplication</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Lagrangian-Multiplication/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Lagrangian-Multiplication/</id>
    <published>2020-03-01T23:51:55.000Z</published>
    <updated>2020-03-06T03:03:35.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lagrangian-Multiplication"><a href="#Lagrangian-Multiplication" class="headerlink" title="Lagrangian Multiplication"></a>Lagrangian Multiplication</h1><p>Constraint optimization.</p><p>어떤 objective function을 파라미터에 대해 최대화하거나 loss function을 최소화하려고 하는데, 파라미터가 가질 수 있는 값에 제약조건이 있는 경우, Lagrangian multiplication을 사용할 수 있다.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Lagrangian multiplication은 gradient vector의 방향 특성을 이용한, constraint optimization을 푸는 방법론중 하나이다. Lagrangian을 알기 위해서는 gradient vector의 특성을 파악해야 한다.</p><h3 id="Gradient-Vectors"><a href="#Gradient-Vectors" class="headerlink" title="Gradient Vectors"></a>Gradient Vectors</h3><p>원 함수 $F(x, y) = x^2 + y^2 - 4 = 0$을 생각해보자. 이 함수의 differential $d F(x, y)$는 다음과 같다.<br>$$<br>d F(x, y) = \frac{\partial F(x, y)}{\partial x} \Delta x + \frac{\partial F(x, y)}{\partial y} \Delta y<br>$$<br>왜냐하면, $\frac{\partial F(x, y)}{\partial x} \Delta x$만을 봤을 때, $\frac{\partial F(x, y)}{\partial x}$는 $y$가 고정되어 있고, $x$만 변화시켰을때의 $F(x, y)$의 변화량이다. 즉, $x$방향의 기울기이다. 즉, $\frac{\partial F(x, y)}{\partial x}$는 $\Delta x$ 양 만큼의 미세한 변화를 $x$축에 가했을 때, $F(x, y)$의 변화량이다. 이건 $\frac{\partial F(x, y)}{\partial y}$도 마찬가지로 해석이 가능하다. 따라서, $d F(x, y)$는 $x, y$방향으로 각각 $\Delta x, \Delta y$만큼 변화를 가했을 때의 $F(x, y)$의 변화량이라고 볼 수 있다.</p><p>위 식은 다음처럼 표현할 수 있다.<br>$$<br>d F(x, y) = \begin{bmatrix}<br>\frac{\partial F(x, y)}{\partial x} \newline<br>\frac{\partial F(x, y)}{\partial y}<br>\end{bmatrix} \cdot \begin{bmatrix}<br>\Delta x \newline<br>\Delta y<br>\end{bmatrix} =<br>\nabla F(x, y) \cdot \Delta v<br>$$<br>이때, $$\cdot$$은 내적이고, $\nabla F(x, y)$는 gradient vector, $\Delta v$는 $x, y$가 변화하는 방향 벡터이다.</p><p>Gradient vector $\nabla F(x, y)$는 $F(x, y)$의 surface(tangent plane)에 수직인 특징이 있다.</p><h3 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h3><p>어떤 함수 $F(x, y)$를 최소화하는 $x, y$를 찾고 싶을 때는, 최소가되는 그 지점에서의 gradient vector가 $\nabla F(x, y)=0$를 만족한다는 성질을 이용하면 된다. 이렇게 계산된다면, closed form으로 minimum점을 계산할 수 있다. 하지만, parameter(여기선 $x, y$)의 수가 많거나 식이 복잡해지면 그게 쉽지가 않고, 적절한 시간 안에 계산불가능할 수 있다.</p><p>Gradient descent는 어떤 함수 $F(x, y)$가 있을 때, 이 함수의 최솟값을 iterative한 방식으로 계산하는 방법 중 하나이다. 특히, 최솟값을 찾기 위해 gradient vector를 이용해서 함수 $F(x, y)$의 그래프를 따라 하강하게 된다.</p><p>다음의 과정을 통해 gradient descent가 동작한다.</p><ol><li><p>일단, $x_0, y_0$을 설정(초기값)</p></li><li><p>$(x_0, y_0)$에서의 gradient vector $\nabla F(x_0, y_0)$을 계산한다.</p></li><li><p>여기서 $F(x, y)$의 변화량이 가장 작은(가장 큰 음수) 방향으로 $x, y$를 이동시켜야 하는데, 즉, $\Delta v = \begin{bmatrix} \Delta x \newline \Delta y \end{bmatrix}$를 구해야 한다.</p></li><li><p>Gradient vector에서 나온 식에서, $dF(x, y)$를 최소화하는, 내적을 구해야 하는데, gradient vector는 이미 계산했고, $\Delta v$의 step size가 정해졌을 때, $\Delta v$의 방향을 gradient vector와 180도 반대방향으로 가게 한다면, $dF(x, y)$가 절댓값이 가장 큰 음수가 될 것이다. 즉,<br>$$<br>\Delta v = -\nabla F(x, y)<br>$$<br>하지만, step size를 1로 두면 너무 크다. 따라서, 작은 수 $\eta$를 곱해준다.<br>$$<br>\Delta v = - \eta \nabla F(x, y)<br>$$</p></li></ol><h3 id="Contraint-Optmization"><a href="#Contraint-Optmization" class="headerlink" title="Contraint Optmization"></a>Contraint Optmization</h3><p>다음과 같이, 어떤 함수 $F(x, y)$를 최소화 또는 최대화하는데, 파라미터 $x, y$의 범위에 조건이 걸린 경우를 말한다.<br>$$<br>\underset{x, y}{ \text{min} } [F(x, y) = x^2 + y^2] ~ \text{ s.t } ~ x + y = 1<br>$$<br>즉, $x + y = 1$을 만족하는 $x, y$중에서 $x^2+ y^2$를 최소화하는 $x, y$를 찾아야 한다는 것.</p><p>이 경우는 매우 간단하게 contraint 식을 $F(x, y)$에 대입해주면 된다.<br>$$<br>F(x, y) = (1 - y)^2 + y^2<br>$$<br>따라서, 이를 미분하고 gradient vector가 0이 되는 지점을 찾으면 될 것이다.</p><p>하지만, $F(x, y)$가 복잡하고, constaint 식 역시 복잡하며, 심지어 contraint가 여러개일 경우, 이렇게 closed form으로 구하는게 불가능해진다. 이를 좀 더 보편적으로 해결하기 위한 방법이 Lagrangian multiplication을 이용하는 것이다.</p><h2 id="Lagrangian-Multiplication-1"><a href="#Lagrangian-Multiplication-1" class="headerlink" title="Lagrangian Multiplication"></a>Lagrangian Multiplication</h2><p>어떤 objective function $F(x, y)$가 있고, constraint 함수인 $g(x, y)$가 있을 때, $g(x, y)$를 만족하면서 $F(x, y)$를 최대화하는 지점 $(x’, y’)$에서는, $F$의 gradient vector $\nabla F(x’, y’)$와 $g$의 gradient vector $\nabla g(x’, y’)$의 방향은 같거나 180도 방향이다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200206200220651.png" alt="image-20200206200220651"></p><p>그리고, 그 외 지점에서는 이게 성립되지 않는다. 따라서, 다음을 만족하는 $(x’, y’)$은 maximum 또는 minimum point라고 볼 수 있다.<br>$$<br>\nabla F(x’, y’) = \lambda \nabla g(x’, y’)<br>$$<br>$\lambda$는 상수이며, 두 gradient vector가 반드시 같은 크기일 필요는 없다는 의미로 해석될 수 있다. 하지만, 방향은 반드시 평행하다.</p><p>이 수식을 이용해서 constraint optimization을 해결하는 방식을 lagrangian multiplication이라고 부르며, $\lambda$는 lagrangian constant라고 부른다.</p><p>예를들어, 다음을 만족하는 점을 찾는다고 가정한다.<br>$$<br>\underset{x, y}{ \text{min} } [F(x, y) = xy] ~ \text{ s.t } ~ x^2 + y^2 - 4 = 0<br>$$<br>즉, $g(x, y) = x^2 + y^2 - 4 = 0$이다.</p><p>이 수식은 대입법을 이용해서 closed form으로 바로 풀 수 있지만, lagrangian muliplication방법으로 풀어볼 수도 있다.<br>$$<br>\nabla F(x, y) = \begin{bmatrix}<br>\frac{\partial F(x, y)}{\partial x} \newline<br>\frac{\partial F(x, y)}{\partial y}<br>\end{bmatrix}<br>= \lambda \cdot \begin{bmatrix}<br>\frac{\partial g(x, y)}{\partial x} \newline<br>\frac{\partial g(x, y)}{\partial y}<br>\end{bmatrix}<br>$$<br>이므로,<br>$$<br>\begin{bmatrix}<br>y \newline<br>x<br>\end{bmatrix}<br>= \begin{bmatrix}<br>2 \lambda x \newline<br>2 \lambda y<br>\end{bmatrix}<br>$$<br>일 것이다. 또한, 3변수 연립방정식을 풀기 위해 $g(x, y) = x^2 + y^2 - 4 = 0$도 같이 이용한다. 이 세 가지 수식을 이용한 연립방정식을 풀면, constraint를 만족하는 극점(극대, 극소)을 얻을 수 있다.</p><p>요약하면, 다음을 만족하는 점 $(x, y)$는 optimal point이다. 따라서, 다음 연립방정식을 풀면 된다.<br>$$<br>\begin{bmatrix}<br>\frac{\partial F(x, y)}{\partial x} \newline<br>\frac{\partial F(x, y)}{\partial y}<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>\frac{\partial g(x, y)}{\partial x} \newline<br>\frac{\partial g(x, y)}{\partial y}<br>\end{bmatrix}<br>$$</p><p>$$<br>g(x, y) = 0<br>$$</p><h3 id="Constraint-to-non-Constraint-Problem"><a href="#Constraint-to-non-Constraint-Problem" class="headerlink" title="Constraint to non-Constraint Problem"></a>Constraint to non-Constraint Problem</h3><p>Lagrangian multiplication을 푸는 것은 다음 식을 만족하는 $\vec{x}$를 구하는 것이다.<br>$$<br>\nabla F(\vec{x}) = \lambda \cdot \nabla g(\vec{x})<br>$$<br>이 식을 조금 변형해보면,<br>$$<br>\nabla F(\vec{x}) = \nabla \lambda g(\vec{x})<br>$$<br>$$<br>\nabla F(\vec{x}) - \nabla \lambda g(\vec{x}) = 0<br>$$</p><p>$$<br>\nabla (F(\vec{x}) - \lambda g(\vec{x})) = 0<br>$$</p><p>$Q(\vec{x}, \lambda) = F(\vec{x}) - \lambda g(\vec{x})$라고 정의해보면,<br>$$<br>\bigtriangledown Q(\vec{x}, \lambda) = 0<br>$$<br>으로 정리할 수 있다. 이것은, $Q(\vec{x},\lambda)$를 non-constaint optimization을 한 식이 된다.</p><p>즉, $F(\vec{x})$를 어떤 constraint $g(\vec{x})$에 맞게 optimization을 한다는 것은, $F(\vec{x}) - \lambda g(\vec{x})$를 non-constraint 환경에서 optimization하는 것과 같다.</p><p>Neural network regularization도 해당 constraint ($l_1 norm, l_2 norm$) 에 맞게 $loss$함수를 최적화하는 것이라고 해석할 수도 있지 않을까. 다만, 차이점은, lagrangian 에선, $\lambda$도 파라미터이고, $\vec{x}$뿐 아니라 $\lambda$에 대해서도 최적화를 수행한다. Neural network regularization에서는 $\vec{x}$에 대해서만 최적화를 하며, $\lambda$는 하이퍼파라미터로 한다. 제약조건을 완전히 지키지는 않고, 약간의 제제만 가하는 것이라고 볼 수 있겠다.</p><h3 id="Multi-constraint-Optimization"><a href="#Multi-constraint-Optimization" class="headerlink" title="Multi-constraint Optimization"></a>Multi-constraint Optimization</h3><p>만약, $F(\vec{x})$를 최적화하는데, constraint가 $g_1(\vec{x}), g_2(\vec{x}), \cdots, g_k(\vec{x})$ 등 $k$개가 있다고 해 보자. 이때, $F(\vec{x})$의 극점이면서, 위 constraint들을 만족시키는 $\vec{x}$를 구하는 것은 다음의 식을 푸는 것과 같다.<br>$$<br>\nabla (F(\vec{x}) - \lambda_1 g_1(\vec{x}) - \lambda_2 g_2 (\vec{x}) - \cdots - \lambda_k g_k (\vec{x})) = 0<br>$$<br>또는 $Q(\vec{x}, \lambda) = F(\vec{x}) - \lambda_1 g_2(\vec{x}) - \cdots - \lambda_k g_k(\vec{x})$의 극점을 구하는 것과 같다.<br>$$<br>\nabla Q(\vec{x}, \lambda) = 0 ~ \text{w.r.t} ~ \vec{x}, \lambda<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lagrangian-Multiplication&quot;&gt;&lt;a href=&quot;#Lagrangian-Multiplication&quot; class=&quot;headerlink&quot; title=&quot;Lagrangian Multiplication&quot;&gt;&lt;/a&gt;Lagrangian 
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Machine Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Machine-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="MachineLearning" scheme="https://jaeyoung-blog.github.io/tags/MachineLearning/"/>
    
  </entry>
  
</feed>
