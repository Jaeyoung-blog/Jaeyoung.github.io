<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jaeyoung&#39;s Blog</title>
  
  <subtitle>Jaeyoung&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jaeyoung-blog.github.io/"/>
  <updated>2020-03-03T01:58:11.178Z</updated>
  <id>https://jaeyoung-blog.github.io/</id>
  
  <author>
    <name>Lee Jaeyoung</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KL Divergence</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/KL%20Divergence/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/KL Divergence/</id>
    <published>2020-03-03T13:28:59.000Z</published>
    <updated>2020-03-03T01:58:11.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KL-Divergence"><a href="#KL-Divergence" class="headerlink" title="KL-Divergence"></a>KL-Divergence</h1><p>KL-Divergence에는 두 가지가 있다.</p><ul><li>Forward KL-Divergence</li><li>Reverse KL-Divergence</li></ul><p>기본적으로 KL-divergence라고 하면 forward 방식을 가리키며, variational autoencoder에는 reverse방식을 사용한다.</p><h2 id="Forward-KL-Divergence"><a href="#Forward-KL-Divergence" class="headerlink" title="Forward KL-Divergence"></a>Forward KL-Divergence</h2><p>다음이 forward KL-divergence의 식이다.<br>$$<br>KLD(P||Q) = \sum_x P(x) \cdot log(\frac{P(x)}{Q(x)})<br>$$<br>KL-divergence는 두 확률분포 $P,Q$의 유사도를 나타낼 수 있다. 즉, $P,Q$가 서로 비슷한 모양으로 분포된 확률분포라면, KLD값은 낮다.</p><p>이 KL-divergence는 entropy와 관련이 있는데, entropy는 정보량의 기댓값으로, 정보량은 두 확률 사이의 차이가 크면 큰 값을 가진다. 즉, 확률값이 많이 다르면 entropy가 높다.</p><p>두 확률분포간 거리를 최소화하는게 목적이 아니라면, $P,Q$에 두 확률분포를 넣고 거리를 구하면 된다. 보통 $P$는 target, true 확률분포가 들어가고 $Q$에는 측정하고자 하는 대상이 들어간다.</p><p>두 확률분포간 거리를 최소화시키고자 할때는, $P(x)$는 target 확률 분포, 즉, 목표로 하는 확률분포이며, $Q(x)$는 최적화시키고자 하는 확률분포, 즉, 파라미터가 있는 확률분포이다. 그리고 KLD 식을 최소화하는 $Q(x)$를 수정한다. 즉, $P(x)$에 가깝게 $Q(x)$를 수정하게 된다.</p><h3 id="Forward-KLD의-특징"><a href="#Forward-KLD의-특징" class="headerlink" title="Forward KLD의 특징"></a>Forward KLD의 특징</h3><p>Forward KLD는 $P(x)&gt;0$인 모든 지점에 대해서 확률 분포간의 차이를 줄이려고 노력한다. 최적화된 결과, <strong>$P(x)&gt;$*를 만족하는 모든 $x$의 범위를 $Q(x)$가 커버하게 된다.</strong></p><p>다만, 다음처럼, 최소화된 이후의 KLD 값은 상당히 클 수가 있다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/1569470523821.png" alt="1569470523821"></p><p>(그림 출처: <a href="https://wiseodd.github.io/techblog/2016/12/21/forward-reverse-kl/" target="_blank" rel="noopener">https://wiseodd.github.io/techblog/2016/12/21/forward-reverse-kl/</a>)</p><p>위의 경우, KLD를 최소화한 결과지만, 결과값도 상당히 큰 KLD값을 가진다. 왜냐하면, $P(x)&gt;0$인 전체 범위를 커버하려고 하기 때문에, $Q(x)$를 정확하게 모델링하지 않으면(위의 경우, 두 가우시안의 mixture model로 해야 할 것이다) 위와 같은 문제가 생긴다.</p><h2 id="Reverse-KL-Divergence"><a href="#Reverse-KL-Divergence" class="headerlink" title="Reverse KL-Divergence"></a>Reverse KL-Divergence</h2><p>다음이 Reverse KL-divergence의 식이다.<br>$$<br>RKLD(Q||P) = \sum_x Q(x) \cdot log(\frac{Q(x)}{P(x)})<br>$$</p><h3 id="Reverse-KLD의-특징"><a href="#Reverse-KLD의-특징" class="headerlink" title="Reverse KLD의 특징"></a>Reverse KLD의 특징</h3><p>만약, 두 분포간의 거리를 측정하고자 하면, forward 방식과 별 다를게 없다. 다만, 값의 차이는 있다. KLD는 대칭함수가 아니기 때문이다.</p><p>하지만, 최소화하려고 할 경우, 이번엔 파라미터가 있는 $Q(x)$분포와 target 분포 $P(x)$의 자리가 바뀌었다. 이때는, $Q(x)$가 굳이 $P(x)&gt;0$를 만족하는 모든 $x$범위를 커버하려고 하지 않는다. 식에서 보면, $Q(x) \approx 0$으로 맞춰버리면 그 $x$범위는 최소화가 된다. 즉, 필요한 곳만 볼록 솟게 해서 그 범위에서 최소화를 시키고 나머지 봉우리는 $Q(x) \approx 0$으로 해버리므로, <strong>특정 부분만 캡쳐해서 분포간 거리를 최소화한다.</strong></p><p>따라서 다음 그림처럼 된다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/1569470891541.png" alt="1569470891541"></p><p>(그림 출처: <a href="https://wiseodd.github.io/techblog/2016/12/21/forward-reverse-kl/" target="_blank" rel="noopener">https://wiseodd.github.io/techblog/2016/12/21/forward-reverse-kl/</a>)</p><h2 id="어떤-KLD를-사용해야-할까"><a href="#어떤-KLD를-사용해야-할까" class="headerlink" title="어떤 KLD를 사용해야 할까"></a>어떤 KLD를 사용해야 할까</h2><p>만약, 모델링한 $Q(x)$가 target 분포 $P(x)$와 매우 가깝다고 자신이 있을 경우, 또는 $P(x)&gt;0$인 모든 $x$를 커버해야 할 경우, forward KLD를 사용하자.</p><p>하지만, 모델링한 $Q(x)$가 target 분포 $P(x)$와 가깝다는 자신이 없고, 분포의 major한 부분만 캡쳐해도 좋은 경우, Reverse KLD를 사용하자.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://wiseodd.github.io/techblog/2016/12/21/forward-reverse-kl/" target="_blank" rel="noopener">https://wiseodd.github.io/techblog/2016/12/21/forward-reverse-kl/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;KL-Divergence&quot;&gt;&lt;a href=&quot;#KL-Divergence&quot; class=&quot;headerlink&quot; title=&quot;KL-Divergence&quot;&gt;&lt;/a&gt;KL-Divergence&lt;/h1&gt;&lt;p&gt;KL-Divergence에는 두 가지가 있다.&lt;
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Machine Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Machine-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="MachineLearning" scheme="https://jaeyoung-blog.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Hidden Markov Models 2</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Hidden_Markov_Models-2/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Hidden_Markov_Models-2/</id>
    <published>2020-03-03T13:28:57.000Z</published>
    <updated>2020-03-03T01:58:01.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hidden-Markov-Models"><a href="#Hidden-Markov-Models" class="headerlink" title="Hidden Markov Models"></a>Hidden Markov Models</h1><p>Udemy 강좌: <a href="https://www.udemy.com/course/unsupervised-machine-learning-hidden-markov-models-in-python" target="_blank" rel="noopener">https://www.udemy.com/course/unsupervised-machine-learning-hidden-markov-models-in-python</a></p><p>Hidden Markov model(HMM)은 다음과 같이 maximum likelihood estimation을 이용해서 파라미터를 추정하게 된다.<br>$$<br>\theta^* = \underset{\theta}{\text{argmax}} ~ p(x|\theta)<br>$$<br>다음으로, HMM의 파라미터가 무엇인지 적어본다. $\theta = ?$</p><h3 id="Parameters-of-HMM"><a href="#Parameters-of-HMM" class="headerlink" title="Parameters of HMM"></a>Parameters of HMM</h3><p>Markov model에서의 parameter는 initial distribution vector $$\pi$$와 state transition matrix $A$였다. HMM에서는 state-to-observation matrix $B$가 추가된다. 즉, $\pi, A, B$가 학습 parameter가 된다.</p><ul><li><p>$\pi$</p><p>Initial distribution. row vector이며, hidden state 개수가 $M$개일때, $\pi$는 $(1, M)$ 모양이다. $\pi(i)$하면, $i$번재 state의 initial 확률이다.</p></li><li><p>$A$</p><p>Hidden state transition matrix. 간단하게 state transition matrix이라고도 하며, $t$에서의 hidden state가 주어졌을 때, $t+1$에서의 hidden state의 확률분포이다. 즉, $p(s_{t+1}|s_t)$을 표현한다. 따라서, observation의 종류가 $D$개일때, $M \rightarrow D$이므로, $(M, D)$ 모양이다. $A(i, j)$의 원소는 $p(s_{t+1} = j | s_t = i)$를 의미한다.</p></li><li><p>$B$</p><p>Observation transition matrix이며, $t$에서의 hidden state가 주어졌을 때, $t$에서의 observation의 확률분포이다. $p(x_t|s_t)$를 표현한다. $B(j, k)$의 원소는 $p(x_t = k|s_t = j)$를 의미한다.</p></li></ul><p>이들을 이용한 연산의 예를 잠깐 몇개 들어보면, (Sequence의 시작 index는 1이다.)</p><ul><li>$\pi B = \sum_i \pi(i) B(i,:) = \sum_{z_1} p(z_1)p(x_1|z_1) =  p(x_1)$이다.</li><li>$\pi A B = \sum_{i,j} \pi(i) B(i,j) A(j,:) = \sum_{z_1, z_2} p(z_1)p(z_2|z_1)p(x_2|z_2) = p(x_2)$이다.</li></ul><h2 id="Algorithms-of-HMM"><a href="#Algorithms-of-HMM" class="headerlink" title="Algorithms of HMM"></a>Algorithms of HMM</h2><p>HMM에서도 다른 확률 모델과 마찬가지로 forward propagation, backward propagation과정이 존재한다.</p><h3 id="Forward-Algorithms"><a href="#Forward-Algorithms" class="headerlink" title="Forward Algorithms"></a>Forward Algorithms</h3><p>HMM의 forward 알고리즘은 데이터셋의 확률, 즉, likelihood를 계산하는 알고리즘으로 대표된다. Markov model과는 달리, HMM의 likelihood는 곧바로 파라미터로 나타낼 수가 없어서 likelihood를 적절히 변형해야 한다. 그리고 단순히 변형해도, 그 계산의 time complexity가 매우 커서 계산 최적화를 위한 작업을 해 줘야 한다.</p><h3 id="Problem-1-Find-Likelihood-Distribution"><a href="#Problem-1-Find-Likelihood-Distribution" class="headerlink" title="Problem 1: Find Likelihood Distribution"></a>Problem 1: Find Likelihood Distribution</h3><p>파라미터 $\pi, A, B$를 바탕으로 likelihood를 계산할 수 있어야 한다. Likelihood가 있어야 ML 추정법을 적용할 수 있기 때문. Likelihood는 $p(x|\pi, A,B)$와 같으며, observation $x$의 joint distribution에 해당한다.</p><p>파라미터는 수식의 모든 term에 존재하므로, 생략한다. 먼저, likelihood는 다음과 같다. $T$는 전체 sequence 길이이다. 이 likelihood를 파라미터에 대한 식으로 바꿔주어야 한다.<br>$$<br>p(x) = p(x_1, x_2, …, x_T)<br>$$<br>이것을 hidden Markov model 구조(확률 그래프 모델이니까)에 따라 factorize하기 위해, hidden variable $z$를 삽입한다 (Marginalize).<br>$$<br>p(x) = \sum_{z_1} \sum_{z_2} \cdots \sum_{z_T}p(x_1, x_2, …, x_T, z_1, z_2, …, z_T)<br>$$<br>이제 factorize한다.<br>$$<br>p(x) = \sum_{z_1} \sum_{z_2} \cdots \sum_{z_T} p(z_1) p(x_1|z_1) \prod_{t=2}^{T} p(z_{t}|z_{t-1})p(x_t|z_t)<br>$$<br>이제 parameter에 대한 식으로 바꿀 수 있다.<br>$$<br>p(x) = \sum_{z_1} \sum_{z_2} \cdots \sum_{z_T} \pi(z_1) B(z_1, x_1) \prod_{t=2}^T A(z_{t-1}, z_t) B(z_t, x_t)<br>$$<br>그런데, 이 식의 time complexity를 봐야 한다. 위 식은 결국, 모든 hidden state 조합을 더하는 것이다. Hidden state의 개수는 $M$개이고, 이게 $T$-time 만큼 있으므로, $M^T$개의 hidden state조합이 존재한다. 또한, 하나의 hidden state 조합을 구하기 위해서는 $O(T)$시간이 걸리며, 총 $O(TM^T)$ 시간이 걸리게 된다. 이것은 exponential한 time으로, 매우 비효율적이다.</p><h3 id="Answer-to-Problem-1-Forward-Backward-Algorithm"><a href="#Answer-to-Problem-1-Forward-Backward-Algorithm" class="headerlink" title="Answer to Problem 1: Forward/Backward Algorithm"></a>Answer to Problem 1: Forward/Backward Algorithm</h3><p>그런데, 위 $p(x)$에는 겹치는 연산이 상당히 많다. 이것을 factorize해서(인수분해) 좀 더 효율적으로 $p(x)$를 계산할 수 있을 것 같다.</p><p>우선, $T=2, M=2$인 경우를 생각해본다.<br>$$<br>p(x) = \sum_{z_1} \sum_{z_2} \pi(z_1)B(z_1, x_1)\prod_{t=2}^T A(z_{t-1}, z_t)B(z_t, x_t) \</p><p>= \pi(1)B(1, x_1)A(1, 1)B(1, x_2) \</p><ul><li>\pi(1)B(1, x_1)A(1, 2)B(2, x_2) \</li><li>\pi(2)B(2, x_1)A(2, 1)B(1, x_2) \</li><li>\pi(2)B(2, x_1)A(2, 2)B(2, x_2) \<br>$$</li></ul><p>그런데, 중복된 연산이 너무 많다. 따라서, factorize를 해 주자.<br>$$<br>p(x) = \<br>\pi(1)B(1, x_1)[A(1, 1)B(1, x_2) + A(1, 2)B(2, x_2)] \<br>\pi(2)B(2, x_1)[A(2, 1)B(1, x_2) + A(2, 2)B(2, x_2)]<br>$$<br>$T=3, M=2$인 경우도 마찬가지로 할 수 있다. 수식으로 보면 다음처럼 표현할 수 있다.<br>$$<br>p(x) = \sum_{z_1} \sum_{z_2} \sum_{z_3} p(z_1) p(x_1|z_1) \prod_{t=2}^3 p(z_t|z_{t-1})p(x_t|z_t) \<br>= \sum_{z_1} \sum_{z_2} \sum_{z_3} p(z_1)p(x_1|z_1)p(z_2|z_1)p(x_2|z_2)p(z_3|z_2)p(x_3|z_3) \<br>= \sum_{z_3} p(x_3|z_3) \sum_{z_2} p(x_2|z_2)p(z_3|z_2) \sum_{z_1} p(z_1)p(x_1|z_1)p(z_2|z_1)<br>$$<br>위 식을 다음처럼 변형해본다.<br>$$<br>\sum_{z_3} p(x_3|z_3) \sum_{z_2} p(z_3|z_2) [p(x_2|z_2) \sum_{z_1} p(z_2|z_1)[p(x_1|z_1) p(z_1)]]<br>$$<br>여기서, $\alpha$라고 하는 놈을 정의한다.<br>$$<br>\alpha(3, z_3) = p(x_3|z_3) \sum_{z_2} p(z_3|z_2) \alpha(2, z_2) \<br>\alpha(2, z_2) = p(x_2|z_2) \sum_{z_1} p(z_2|z_1) \alpha(1, z_1) \<br>\alpha(1, z_1) = p(x_1|z_1)p(z_1)<br>$$<br>이때, $p(x)$는 다음처럼 된다.<br>$$<br>p(x) = \sum_{z_3}\alpha(3, z_3)<br>$$<br>즉, 다음처럼 일반화가 가능하다.<br>$$<br>p(x) = \sum_{z_T} \alpha(T, z_T) \<br>\alpha(t, z_t) = p(x_t|z_t) \sum_{z_{t-1}} p(z_t|z_{t-1}) \alpha(t-1, z_{t-1}) \<br>\alpha(1, z_1) = p(x_1|z_1)p(z_1)<br>$$<br>이렇게 되면, likelihood $p(x)$를 계산하는데, $O(MT)$면 끝이 난다.</p><h3 id="Problem-2-Find-the-Most-Likely-Sequence-of-Hidden-States"><a href="#Problem-2-Find-the-Most-Likely-Sequence-of-Hidden-States" class="headerlink" title="Problem 2: Find the Most Likely Sequence of Hidden States"></a>Problem 2: Find the Most Likely Sequence of Hidden States</h3><p>Likelihood를 구했다면, 이번엔 가장 probable한 hidden states의 sequence를 찾을 수 있어야 한다. 즉,<br>$$<br>z^* = \underset{z}{\text{argmax}} ~ p(z|x)<br>$$</p><p>를 만족하는 hidden states $$z$$의 joint distribution을 계산할 수 있어야 한다.</p><p>그런데, 이때, 위 식은 다음처럼 정리가 가능하다.<br>$$<br>z^* = \underset{z}{\text{argmax}} ~ p(z|x) = \underset{z}{\text{argmax}} ~ \frac{p(x,z)}{p(x)} = \underset{z}{\text{argmax}} ~ p(x, z)<br>$$<br>그런데, 여기서, $p(x, z)$는 $p(x)$를 구하는 식에서 marginalization만 빼면 된다. 즉,<br>$$<br>p(x, z) = p(z_1)p(x_1|z_1) \prod_{i=2}^T p(z_{t}|z_{t-1})p(x_t|z_t)<br>$$<br>이다. 하나의 joint probability를 계산하려면 $O(T)$시간이 걸리는 셈. 그러면, observations들에 맞게 가장 그럴듯한 hidden state들을 찾으려면, hidden state의 모든 조합을 저 식에 넣어보고 가장 큰 확률값을 주는 조합을 고르면 될 것이다. 그러나, 이 방법은 $O(TM^T)$가 걸린다.</p><h3 id="Answer-to-Problem-2-Viterbi-Algorithm"><a href="#Answer-to-Problem-2-Viterbi-Algorithm" class="headerlink" title="Answer to Problem 2: Viterbi Algorithm"></a>Answer to Problem 2: Viterbi Algorithm</h3><p>지금, $p(x, z)$가 가장 큰 $z$조합을 구해야 한다. HMM은 Markov model이기 때문에 $t-1$까지 최적의 $z$ sequence를 구해놨다면, $t$에서의 $z_t$는 greedy하게 선택하면 $t$까지의 $z$ sequence는 optimal이다. 즉, $t=1$에서, $p(z_1)p(x_1|z_1)$이 최대가 되는 $z_1$를 구하고, $t=2$에서, $p(z_2|z_1)p(x_2|z_2)$이 최대가 되는 $z_2$를 구하고 이런식으로 앞에서부터 greedy하게 선택해도 된다는 것이다.</p><h3 id="Problem-3-Training-HMM"><a href="#Problem-3-Training-HMM" class="headerlink" title="Problem 3: Training HMM"></a>Problem 3: Training HMM</h3><p>다음을 만족하는 parameter $$\pi, A, B$$를 계산한다.<br>$$<br>A^<em>, B^</em>, \pi^* = \underset{A,B,\pi}{\text{argmax}} ~ p(x|A,B,\pi)<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hidden-Markov-Models&quot;&gt;&lt;a href=&quot;#Hidden-Markov-Models&quot; class=&quot;headerlink&quot; title=&quot;Hidden Markov Models&quot;&gt;&lt;/a&gt;Hidden Markov Models&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Machine Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Machine-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="MachineLearning" scheme="https://jaeyoung-blog.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Hidden Markov Models 1</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Hidden_Markov_Models-1/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Hidden_Markov_Models-1/</id>
    <published>2020-03-03T13:28:55.000Z</published>
    <updated>2020-03-03T01:57:54.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hidden-Markov-Models"><a href="#Hidden-Markov-Models" class="headerlink" title="Hidden Markov Models"></a>Hidden Markov Models</h1><p>Udemy 강좌: <a href="https://www.udemy.com/course/unsupervised-machine-learning-hidden-markov-models-in-python" target="_blank" rel="noopener">https://www.udemy.com/course/unsupervised-machine-learning-hidden-markov-models-in-python</a></p><h2 id="Markov-Assumption"><a href="#Markov-Assumption" class="headerlink" title="Markov Assumption"></a>Markov Assumption</h2><p>Markov property라고도 부르며, time-series 데이터나, 상태 기반 데이터에서, 현재의 상태는 오로지 바로 이전 상태만으로부터 영향을 받는다는 가정이다. 즉 다음과 같다.<br>$$<br>P(s_t|s_{t-1}s_{t-2}\cdots s_1) = P(s_t|s_{t-1})<br>$$<br>이전 상태들이 주어졌을 때, 현재 상태의 확률 분포는 오로지 바로 앞전 상태만으로부터 영향을 받는다. 즉, $s_{t-1}$이 주어진다면, $s_t$는 $s_{t-2},…,s_1$와 독립이다(Conditional independence).</p><p>Markov assumption은 상당히 강력한 가정으로, 많은 분야에 응용되지만(자연어와 같은 time-series, state machine 기반 모델 등), 바로 이전 상태를 제외한 그 이전 상태들을 모두 무시하므로, 성능에 한계가 있다.</p><p>보통 markov assumption하면 first-order markov assumption을 의미하며, 이전 몇 개의 데이터로부터 영향을 받게 할 것인가에 따라 second-order, third-order 등이 있다.</p><p>Second-order markov assumption은 다음과 같다.<br>$$<br>P(s_t|s_{t-1}, \cdots, s_1) = P(s_t|s_{t-1}, s_{t-2})<br>$$<br>Third-order markov assumption은 다음과 같다.<br>$$<br>P(s_t|s_{t-1},\cdots,s_{1}) = P(s_t|s_{t-1},s_{t-2},s_{t-3})<br>$$<br>그런데, 예상하다시피, 마르코프 가정으로 구현한 모델은 이전 모든 상태에 영향을 받게 모델링한 모델보다 성능이 떨어질 가능성이 높다. 그럼에도 불구하고 사용하는 이유는, 우리가 관심있는것은 지금까지 지나온 상태들의 joint distribution인데, 마르코프 가정이 없다면, joint distribution계산 과정이 매우 복잡해진다. 그래서, 쉽게 모델링하기 위해 마르코프 가정을 사용하며, 성능도 쓸만한 편이다.</p><h2 id="Markov-Models"><a href="#Markov-Models" class="headerlink" title="Markov Models"></a>Markov Models</h2><p>마르코프 가정(Markov assumption)을 바탕으로 모델링한 모델을 말한다. 다음과 같이 state machine도 마르코프 모델 중 하나이다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20191120062127996.png" alt="image-20191120062127996"></p><p>State machine은 일반적으로 다음 상태의 확률은 오직 현재 상태에 의해 영향을 받고 결정된다. 위와 같은 state machine에서의 transition probabilities는 행렬로 표현이 가능하며 이러한 행렬을 <strong>state transition probability matrix</strong>라고 부른다. 마르코프 모델에서는 현재에 기반한, 다음 상태 또는 다음 무언가의 확률 분포를 matrix로 표현이 가능하며, $M$개의 노드가 있을 때, transition probability matrix는 $M$x$M$행렬로 표현한다.</p><p>State transition probability matrix의 한 행 원소의 합은 1이어야 한다. $i$번째 행이 의미하는 것은 $s_i$를 기반으로 다음 state의 확률분포이기 때문이다.</p><h3 id="Starting-Position"><a href="#Starting-Position" class="headerlink" title="Starting Position"></a>Starting Position</h3><p>지금까지 지나온 상태들의 joint distribution을 계산해 보면 다음과 같다.<br>$$<br>P(s_t,s_{t-1},\cdots,s_1) = P(s_1) \prod_{i=2}^{t} P(s_i|s_{i-1})<br>$$<br>State transition probability matrix를 정의했다면, $P(s_i|s_{i-1})$는 알 수 있다. 그런데, 초기 상태인 $P(s_1)$는 행렬에 없다.</p><p>따라서, initial distribution을 정의해 주어야 하며, $1$x$M$ 벡터로 구성된다.</p><h3 id="Training-of-Markov-Models"><a href="#Training-of-Markov-Models" class="headerlink" title="Training of Markov Models"></a>Training of Markov Models</h3><p>마르코프 모델의 학습은 MLE(Maximum Likelihood Estimation)으로 이루어진다. 즉, $s_j \rightarrow s_i$로의 확률 분포는 데이터셋에서 $s_j$ 다음으로 $s_i$가 얼만큼의 비율로 등장하느냐에 따라 결정된다.</p><p>예를들어, 다음의 문장이 있다.</p><p>“I like cats”</p><p>“I like dogs”</p><p>“I love kangaroos”</p><p>그럼 상태의 집합은 ${\text{I}, \text{like}, \text{cats}, \text{dogs}, \text{love}, \text{kangaroos}}$이렇게 6개의 원소로 구성되어 있으며, initial distribution은 $P(\text{I})=1$이고, 나머지 단어의 경우, 0이다.</p><p>또한, $P(\text{like}|\text{I})=0.66, P(\text{love}|\text{I})=0.33, P(else|\text{I})=0$이다.</p><h3 id="Smoothing"><a href="#Smoothing" class="headerlink" title="Smoothing"></a>Smoothing</h3><p>그런데, 확률이 0이라는 것은 매우 위험하다. 반대로, 어떤 것의 확률이 1이라는 것 또한 매우 위험하다. MLE에 의해 트레이닝 데이터에 나오지 않은 것들은 모두 0이 되버리는데, 이는 오버피팅을 야기한다. 따라서 학습 데이터에 모든 경우의 수가 다 들어있기를 바래야 하는데, 이는 비현실적이다. 따라서 어떤 것에 1 또는 0의 확률을 할당하는 것을 피해야 하는데, 방법으로는 <strong>smoothing</strong>이라는 것이 있다.</p><p>smoothing이란, 0확률을 막아주는 기법을 의미하는데, 다음의 경우가 있다.</p><ul><li><p>No smoothing</p><p>기본적인, smoothing을 적용하지 않은 경우.<br>$$<br>P(s_i|s_j) = \frac{\text{count}(s_j \rightarrow s_i)}{\text{count}(s_j \rightarrow *)}<br>$$</p></li><li><p>Add-one smoothing</p><p>분자에 +1, 분모에 +$M$을 해 준다.<br>$$<br>P(s_i|s_j) = \frac{\text{count}(s_j \rightarrow s_i) + 1}{\text{count}(s_j \rightarrow *) + M}<br>$$<br>이때, $M$은 상태의 개수(자연어의 경우엔, 단어 개수)이다. 이러면, 모든 확률은 1 또는 0이 되지 않으며, $\sum_i P(s_i|s_j)=1$이 유지된다.</p></li><li><p>Add-epsilon smoothing</p><p>분자에 +1이 아니라, +$\epsilon$을 해 준다. 분모에는 +$\epsilon M$을 해 준다.<br>$$<br>P(s_i|s_j) = \frac{\text{count}(s_j \rightarrow s_i) + \epsilon}{\text{count}(s_j \rightarrow *) + \epsilon M}<br>$$<br>이때, $\epsilon$은 학습 파라미터로써, 추론해도 되고 hyper parameter로 해도 된다. Add-one 스무딩이 때로는 너무 강하거나 너무 약할때가 있다. 따라서, 스무딩의 강도를 조정하겠다는 이야기가 된다.</p></li></ul><h2 id="Markov-Chains"><a href="#Markov-Chains" class="headerlink" title="Markov Chains"></a>Markov Chains</h2><p>마르코프 모델이면서, 확률 과정(stochastic process)을 모델링한 것을 의미한다. 보통 통계에서샘플링이라 함은 샘플 하나를 얻는 과정을 말하지만, stochastic(random) process에서의 샘플링은 sequence of random variables을 얻는 과정이고, 하나의 샘플이 time series이다. 마르코프 체인 역시 stochastic process이며, 하나의 샘플은 time-series이다.</p><p>State transition probability distribution matrix를 $A$라고 하고, initial distribution을 $\pi$라고 했을 때, $t$번째 상태에서의 marginal distribution은 다음과 같다.<br>$$<br>P(s_t) = \pi A^{t}<br>$$<br>이때, $A$의 $i$번째 row는 $i$번 상태에서 다른 상태로 갈 확률분포이며, $A$는 $M$x$M$ 행렬이고, $\pi$는 1x$M$벡터이다. 따라서, 위 식은 1x$M$벡터가 나온다.</p><p>Marginal distribution에 대해 잠깐 설명해보면, 예를들어, 첫번째 상태 $s_1$의 확률분포는 다음과 같다.<br>$$<br>P(s_1) = \sum_{s_0} P(s_1,s_0) = \sum_j \pi_j A_{j,i} = \pi A<br>$$</p><h3 id="Stationary-Distribution"><a href="#Stationary-Distribution" class="headerlink" title="Stationary Distribution"></a>Stationary Distribution</h3><p>그런데, $A$를 반복해서 곱하다 보면(확률 과정을 반복), 어느 순간 marginal distribution의 변화가 다음과 같은 상태가 된다.<br>$$<br>P(s_t) = \pi A^t = P(s_{t-1}) = \pi A^{t-1}<br>$$<br>이때, $p(s)=p(s)A$를 만족한다. 이때, $p(s)$를 <strong>stationary distribution</strong>이라고 부른다. 이 stationary distribution $p(s)$을 보면, 행렬 $A$의 전치행렬인 $A^T$의 eigenvector($p(s)$는 벡터이다)와 같은 성질이다는 것을 알 수 있다. 다만, 그에 상응하는 eigen value는 1이다.</p><h3 id="Limiting-Distribution"><a href="#Limiting-Distribution" class="headerlink" title="Limiting Distribution"></a>Limiting Distribution</h3><p>그래서, 어떤 stochastic process의 최종 distribution은 무엇일까. 이 최종 distribution은 <strong>limiting distribution</strong> 또는 <strong>equilibrium distribution</strong>이라고 부른다. 즉, 다음과 같다.<br>$$<br>p(s_\infty) = \pi A^\infty<br>$$<br>그런데, 이건 stationary distribution과 같은가?</p><p>일단, <strong>limiting distribution은 stationary distribution이다. 하지만, 모든 stationary distribution이 다 limiting distribution이 되는 건 아니다.</strong> Eivenvector는 최대 $A$의 차원만큼 개수가 존재하며, 그중에서 eigen value가 1인 eigen vector는 여러개 일 수 있다. 이들 중 어느놈이 limiting distribution일까..</p><p>일단, limiting distribution이 구해지면, 그 stochastic process를 통해 앞으로 나올 time series를 샘플링할 수 있다(MCMC의 원리?).</p><h3 id="Perron-Frobenius-Theorem"><a href="#Perron-Frobenius-Theorem" class="headerlink" title="Perron-Frobenius Theorem"></a>Perron-Frobenius Theorem</h3><p>선형 대수학에서의 어떤 이론인데, stochastic process에 맞아떨어지는 이론이다.</p><p>어떤 행렬 $A = (a_{i,j})$에 대해, $A$는 $n$-by-$n$ matrix이고, 모든 원소가 양수이면, $A$의 가장 큰 양수 eigenvalue $r$이 존재하고 그와 상응하는 eigenvector의 모든 원소는 양수이다. 그리고, 모든 원소가 양수인 eigenvector는 이 eigenvector가 유일하며, 다른 eigenvector는 반드시 음수가 하나이상 포함되어 있다.</p><p>Stochastic process에서 다음 두 가지 조건을 만족시킨다면, 그 Markov chain은 반드시 유일한 stationary distribution을 가지며, 따라서, 해당 stationary distribution은 limiting distribution이라고 확신할 수 있다. Transition matrix $A$에 대해,</p><ul><li>$\sum_j a_{i,j} = 1$, 즉, 한 row의 모든 원소 합이 1이다. 하나의 row는 probability distribution이다.</li><li>$a_{i,j} \not = 0$, 어떠한 원소도 0이 아니다.</li></ul><p>여기서, transition matrix $A$의 eigenvector는 distribution으로써의 역할을 해야 하므로 모두 양수여야 하는데, 그런 조건을 만족하는 eigenvector는 오직 하나밖에 없으므로, 이놈이 limiting distribution이라고 확신할 수 있다.</p><h2 id="Application-of-Markov-Models"><a href="#Application-of-Markov-Models" class="headerlink" title="Application of Markov Models"></a>Application of Markov Models</h2><h3 id="Language-Models‌"><a href="#Language-Models‌" class="headerlink" title="Language Models‌"></a>Language Models‌</h3><p>Second-order language model을 예로 들자. 먼저, 문장의 첫 두 단어에 대한 initial distribution을 만들고 앞 두 단어가 주어졌을 때, 현재 단어에 대한 transition matrix를 만든다.‌</p><p>학습은 실제 문장들로 학습하며, 문장에서 앞 두 단어가 주어졌을 때, 현재 자리에 오는 단어의 비율을 transition matrix로 한다. 만약, 현재 단어가 끝 단어라면, 이 단어가 끝 단어일 확률 계산에 추가해준다.‌</p><p>앞 $$k$$개의 단어를 바탕으로 현재 단어를 추정하는 Markov model이다.</p><h3 id="Google’s-PageRank-Algorithms‌"><a href="#Google’s-PageRank-Algorithms‌" class="headerlink" title="Google’s PageRank Algorithms‌"></a>Google’s PageRank Algorithms‌</h3><p>Google의 페이지랭크 알고리즘은 각 페이지를 방문할 확률인 stationary distribution(정확히는 limiting distribution)이 높은 순서대로 랭크를 매기는 것을 말한다. 한 페이지에서 다른 페이지로 가는 링크가 있을 것이고, $A$페이지에서 $M$개의 링크가 있고, $B$페이지로 가는 링크가 존재한다면, $A→B$ 로의 transition probability는 $\frac{1}{M}$이 된다. 이렇게 transition matrix를 정의하고, matrix에서 0인 원소들을 smoothing을 이용해서 없앤 후, stationary distribution을 계산한다.</p><p>현재 페이지에서 다음 페이지로 갈 확률이 존재하는 Markov model이다.</p><h2 id="Hidden-Markov-Models-1"><a href="#Hidden-Markov-Models-1" class="headerlink" title="Hidden Markov Models"></a>Hidden Markov Models</h2><p>마르코프 모델에서 hidden state상태를 추가한 형태. hidden state가 markov chain을 이루고 hidden unit에서 visible variable이 컨디셔닝 되어 나온다. 다음 그림은 markov chain과 hidden markov chain을 표현한 것인데, 노란색이 hidden unit들, 파란색이 visible unit을 표현한 것이다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20191201145914442.png" alt="image-20191201145914442"></p><p>Hidden markov model에서는 observable state $o_t$가 이전 observable state $o_{t-1}$에 영향을 받지 않는다. 대신 같은 시간의 hidden state인 $h_t$에 의해서만 영향을 받는다는 가정을 한다.</p><p>Markov model은 initial distributoin $$\pi$$와 transition probability matrix $A$가 존재하지만, hidden markov model에서는 initial distribution $$\pi$$와 hidden state transition matrix $A$, hidden state로부터 visible state로의 변환을 의미하는 transition matrix $B$가 존재한다.</p><h3 id="Application-of-HMM"><a href="#Application-of-HMM" class="headerlink" title="Application of HMM"></a>Application of HMM</h3><p>다음과 같은 application이 존재할 수 있다.</p><ul><li>Parts of Speech (POS) Tagging Systems</li><li>Stock Price Models</li></ul><h4 id="Parts-of-Speech-POS-Tagging-Systems"><a href="#Parts-of-Speech-POS-Tagging-Systems" class="headerlink" title="Parts of Speech (POS) Tagging Systems"></a>Parts of Speech (POS) Tagging Systems</h4><p>각 단어를 visible unit으로, 명사인지 동사인지, 형용사인지 등을 hidden state로 삼아서 HMM을 모델링하는 것을 말한다.</p><p>크게, 음성 시그널을 최외곽 visible variable, 단어를 hidden state로 삼아서 markov chain을 구성하는데, 이 애들이 다시 다른 HMM에 들어가는 방식이라고 생각하면 된다.</p><h4 id="Stock-Price-Models"><a href="#Stock-Price-Models" class="headerlink" title="Stock Price Models"></a>Stock Price Models</h4><p>HMM이 hidden time series($$z$$들)를 캐치할 수 있다는 것에 주목해서 stock price의 hidden factor를 HMM으로 캐치하게 한 모델을 말한다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20191201151728545.png" alt="image-20191201151728545"></p><p>이때, visible variable은 deterministic한 것이 아니라 generative하게 distribution으로 모델링할 수도 있다(위 그림처럼).</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hidden-Markov-Models&quot;&gt;&lt;a href=&quot;#Hidden-Markov-Models&quot; class=&quot;headerlink&quot; title=&quot;Hidden Markov Models&quot;&gt;&lt;/a&gt;Hidden Markov Models&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Machine Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Machine-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="MachineLearning" scheme="https://jaeyoung-blog.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Distillation Methods</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Distillation-Methods/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Distillation-Methods/</id>
    <published>2020-03-03T13:07:01.000Z</published>
    <updated>2020-03-03T01:57:49.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Distillation-Methods"><a href="#Distillation-Methods" class="headerlink" title="Distillation Methods"></a>Distillation Methods</h1><p>다음을 참고했다.</p><p><a href="https://arxiv.org/pdf/1511.04508.pdf" target="_blank" rel="noopener">Distillation as a Defense to Adversarial<br>Perturbations against Deep Neural Networks</a></p><p><a href="https://arxiv.org/pdf/1503.02531.pdf" target="_blank" rel="noopener">Distilling knowledge in a Neural Network</a></p><h2 id="Distilling-Knowledge-in-a-Neural-Network"><a href="#Distilling-Knowledge-in-a-Neural-Network" class="headerlink" title="Distilling Knowledge in a Neural Network"></a>Distilling Knowledge in a Neural Network</h2><p>Distillation이란, [Distilling knowledge in a Neural Network]라는 논문에서 등장한 것으로 보이며, 이 논문에서는 다음과 같은 과정을 통해 <strong>네트워크의 지식</strong>을 다른 네트워크에게 전달해 줄 수 있다고 한다.</p><ol><li><p>먼저, 데이터 $(X, Y)$를 충분히 잘 학습할 수 있도록 큰 네트워크 $F$를 충분히 학습한다. 학습은 $F$의 정확도를 최대한 올리도록 진행한다.</p></li><li><p>작은 네트워크 $F_d$를 만들고, 같은 데이터셋 $(X, Y)$를 이용해서 그 네트워크를 학습하는데, 다음과 같은 과정을 거친다.</p><ol><li><p>데이터 $X$를 큰 네트워크 $F$에 통과시켜서 softmax에 들어가기 바로 전 값, 즉, logit $F(X)$를 얻는다. 큰 네트워크의 파라미터는 모두 고정시킨다.</p></li><li><p>데이터 $X$를 작은 네트워크 $F_d$에 통과시켜서 logit 값 $F_d(X)$를 얻는다.</p></li><li><p>$\sigma(F_d(X))$를 ground  truth인 $Y$와 가깝게 학습시키는 loss를 정의한다. $\sigma$는 softmax이다.<br>$$<br>L_{CE}(F_d(X), Y)<br>$$</p></li><li><p>또, 작은 네트워크가 예측한 결과는 큰 네트워크가 예측한 결과를 최대한 따라가도록 학습하도록 한다. 그에 맞는 loss를 정의한다.<br>$$<br>L_{CE}(\sigma(\frac{F_d(X)}{T}), \sigma(\frac{F(X)}{T}))<br>$$<br>이때, logit을 하이퍼파라미터 $T$로 나눠줌으로써, 조금 약하게 한다.</p><p>이것은, 작은 네트워크가 큰 네트워크의 데이터셋 $(X, Y)$를 학습한 결과를 최대한 따라가도록 만드는 효과가 있으며, 큰 네트워크의 지식을 작은 네트워크에게 전수한다고 볼 수 있다.</p></li></ol></li></ol><p>이러한 방법으로, 매우 유사한 성능을 내는 compact한 네트워크를 만들 수 있으며, 큰 네트워크 대신 작은 네트워크를 이용하면 computation complexity를 크게 줄일 수 있을 것이다.</p><h2 id="Generalization-using-Distillation"><a href="#Generalization-using-Distillation" class="headerlink" title="Generalization using Distillation"></a>Generalization using Distillation</h2><p>Distillation은 모델을 generalization하는 방법으로도 응용할 수 있다. 이 방법으로 상당한 adversarial attack 또한 방어가 가능하다(한때는 adversarial attack에 대한 state-of-the-art 기술이었다고 하는 듯 하다).</p><p>방법은 다음과 같다.</p><ol><li><p>똑같은 구조를 가지지만 weight를 공유하지 않는 두 네트워크 $F, F_d$를 생성한다.</p></li><li><p>먼저, 데이터셋 $(X,Y)$를 이용해서 $F$를 충분히 학습한다. 이후, $F$의 파라미터는 고정시킨다.</p></li><li><p>같은 데이터셋 $(X, Y)$를 이용해서 $F_d$를 다음과 같이 학습한다.</p><ol><li><p>데이터 $X$를 $F$에 통과시킨, softmax 결과 $F(X)$를 구한다.</p></li><li><p>데이터 $X$를 $F_d$에 통과시킨, softmax 결과 $F_d(X)$를 구한다.</p></li><li><p>$F(X)$과 $F_d(X)$를 가깝게 학습한다.<br>$$<br>\text{argmin} ~ KLD(F(X)||F_d(X))<br>$$<br>(KL-divergense말고 다른걸 써도 됨)</p></li></ol></li></ol><p>이 방식은, 첫 번째 네트워크 $F$를 학습할 때, one-hot label $Y$를 이용하지만, 두 번째 네트워크 $F_d$를 학습할 때는, one-hot label이 아니라 $F$의 softmax값을 사용하게 된다. One-hot label $Y$를 이용하게 되면, 해당 정답 라벨에 모델이 over-confident하게 된다. Softmax값을 이용하게 되면, 정답 라벨이 될 확률이 크게 학습되는것은 같다. 그러나, 덜 confident하게 되어 overfitting확률이 줄어든다. 이 방법으로 학습된 네트워크는 adversarial attack을 매우 효과적으로 막아냈으며,  generalization이 그 이유라고 분석되고 있는 듯 하다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Distillation-Methods&quot;&gt;&lt;a href=&quot;#Distillation-Methods&quot; class=&quot;headerlink&quot; title=&quot;Distillation Methods&quot;&gt;&lt;/a&gt;Distillation Methods&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Machine Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Machine-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="MachineLearning" scheme="https://jaeyoung-blog.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>01. Introduction</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/01_Introduction/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/reinforcement-learning/01_Introduction/</id>
    <published>2020-03-03T01:00:00.000Z</published>
    <updated>2020-03-03T00:54:07.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Reinforcement Learning이란, 무엇을 할지에 대해 학습하는 것이다. 다르게 말하면, 어떤 상황이 입력으로 들어가서 어떤 액션이 출력되는 함수를 학습하는 것이다.</p><p>Reinforcement learning에선, 두 가지 중요한 특징이 있는데, 다음과 같다.</p><ul><li>Trails &amp; erros search</li><li>Delayed rewards</li></ul><p>물론 그 전에 environment를 인지할 수 있는 센서가 있어서 상황을 바탕으로 위 두 가지 특징이 발현된다.</p><h2 id="Overview-of-Reinforcement-Learning"><a href="#Overview-of-Reinforcement-Learning" class="headerlink" title="Overview of Reinforcement Learning"></a>Overview of Reinforcement Learning</h2><p>Supervised learning과 unsupervised learning은 다음과 같은 특성을 지닌다.</p><ul><li>숫자로된 테이블 형태의 데이터가 존재한다. ($X: N × D$$, $$Y: N × 1$) 이 두가지 데이터를 모두 넣고 모델을 학습하게 된다.</li><li>Static한 학습만 가능하다. 데이터를 추가하려면, 기존 데이터도 모두 넣고 fine-tuning 해야 하는 경우가 많다. 따라서, online-learning에 매우 불리하다.</li><li>시간이라는 개념이 없다(Sequence라는 개념은 있어도…). 그저 $X$$를 받으면 $$Y$를 줄 뿐. </li><li>Supervised learning의 경우, $Y$$가 $$X$ 동시에 주어지기에, 즉각적인 피드백이 있다.</li></ul><p>반면, reinforcement learning은 다음과 같은 차이점이 있다.</p><ul><li>데이터가 매우 비정형적이다. 로봇의 경우, environment로부터 받은 카메라 정보와 여라가지 센서 정보나 environment representation 정보 등이 있을 수 있다.</li><li>Dynamic하게 학습한다. Reinforcement learning은 데이터를 모아서 데이터셋을 만들어서 학습하는 형태가 아니라, environment에서 action을 취한 결과 피드백을 얻고 학습하는 형태이다. 즉, 그 자체가 그냥 online learning이다.</li><li>어떤 액션을 취하면 즉각적인 피드백이 없을 수 있고, 게임이 끝날 때 까지 피드백을 얻지 못할 수도 있다. 따라서, 상대적으로 시간이라는 개념이 존재한다. 즉, 액션과 리워드가 동시에 주어지지 않고 중간에 일정 시간이 있을 수 있다.</li></ul><h3 id="Unusual-amp-Unexpected-Stretagy-in-RL"><a href="#Unusual-amp-Unexpected-Stretagy-in-RL" class="headerlink" title="Unusual &amp; Unexpected Stretagy in RL"></a>Unusual &amp; Unexpected Stretagy in RL</h3><p>Reinforcement learning은 최종 value를 최대화하면서 학습한다. 그리고, 최종 value를 가장 높게 하는 방법을 알아서 찾아나가는데, 이때, 그 방법이 소위 말해서 수단과 방법을 가리지 않는 방법일 수  있다. 또한, agent가 취하는 액션은 나중에 보면 최대 reward를 받는 방법이었다는 것이 드러나지만, 액션 하나하나를 보면 인간이 전혀 이해하지 못하는 방향의 액션일 수도 있다.</p><h3 id="Supervised-Learning-as-Reinforcement-Learning"><a href="#Supervised-Learning-as-Reinforcement-Learning" class="headerlink" title="Supervised Learning as Reinforcement Learning?"></a>Supervised Learning as Reinforcement Learning?</h3><p>액션을 취하고 리워드를 얻는다는 것은 어떻게 보면 supervised learning과 연관지을 수도 있을 것이다. Environment가 $X$가 되고 그에 적절한 optimal action이 $Y$가 되는 것이다.</p><p>하지만, supervised learning을 쓰지 않고 reinforcement learning을 쓰는 이유가 있다.</p><ul><li>계산 불가능할 정도로 많은 environment/state 경우의 수</li><li>Supervised learning은 $X$$와 $$Y$를 동시에 필요로 하지만, $Y$가 있긴 한데, $X$ 동시에 주지 못하는 경우가 있다. 이때는 supervised learning을 할 수 없다.</li></ul><h2 id="Exploitation-Exploration-Dilema"><a href="#Exploitation-Exploration-Dilema" class="headerlink" title="Exploitation-Exploration Dilema"></a>Exploitation-Exploration Dilema</h2><p>Reinforcement learning에서의 agent는 최대한 많은 reward를 얻으면서 문제를 해결해야 한다. 이미 알고 있는 문제 해결 방법중에서 가장 큰 reward를 얻을 수 있는 방법을 선택해서 문제를 해결하는 것이 합리적일 것이다(exploitation). 그러나, agent는 새로운 길을 탐색해 나가면서 더 나은 길을 찾을 필요가 있다(exploration). 하지만, exploration과정은 많은 비용이 들 수도 있고 탐험 결과가 좋은 reward를 주는 경로가 아닐 수도 있다. 그럼에도 exploration은 필요하다.</p><ul><li><p>Exploitation</p><p>이미 찾은 문제 해결 방법중에서 가장 나은 방법을 선택하는 것. 즉, 최대 reward를 찾아가는 것.</p></li><li><p>Exploration</p><p>새로운 길을 탐색하는 것. 많은 비용이 들지만, 새로운 길이 지금까지 가지고 있었던 해결 방법들 보다 더 나은 reward를 줄 수도 있다.</p></li></ul><p>Exploration은 많은 비용이 들기 때문에, 당장은 reward를 얻지 못할 수도 있다. Exploitation을 하면 당장은 많은 reward를 얻을 수 있다. 이를 exploitaiton-exploration dilema라고 부른다.</p><h2 id="Elements-of-Reinforcement-Learning"><a href="#Elements-of-Reinforcement-Learning" class="headerlink" title="Elements of Reinforcement Learning"></a>Elements of Reinforcement Learning</h2><p>크게 4가지로 나눌 수 있다.</p><ul><li><p>Policy</p><p>어떤 주어진 환경/상황에서 어떤 동작을 취해야 하는지에 대한 규칙 또는 정책, 또는 매핑 함수이다. RL에서 핵심 역할을 하며, 단순한 매핑 테이블일수도, 아주 복잡한 함수나 확률적인 모델일 수도 있다.</p></li><li><p>Reward signal</p><p>액션에 대한 결과적인 상황에 따라 agent가 어떤 reward를 받을지에 대한, 즉, 시스템의 목표를 어떻게 할 것인지에 대한 것이다.</p></li><li><p>Value</p><p>Reward는 액션마다 주어질 수 있는 것으로, 이것만 있으면 greedy하게 갈 수 있다. 이를 방지하기 위해 reward를 누적하고 시스템 전체의 reward를 바라볼 수 있게 하는 것이 value이다. 즉, 어떤 state $s_{i}$에 대한 value $value(s_i)$는 그 상태 이후, 미래의 상태들 $s_{i+1}, s_{i+2},…$로부터 얻을 수 있는 reward 기댓값이다. 즉, $\text{argmax} ~ value(s)$라 함은, 당장 greedy한 선택이 아니라, 미래에 총 reward가 높은 방향으로 액션을 선택할 수 있게 해 준다.</p><p>value-function은 당장 앞에 놓인 action에 대해 value를 계산해주는 함수?</p><p>Reinforcement learning의 주요 task는 이 value function을 추정하는 것이다. agent는 value function이 가장 높은 value를 리턴해주는 액션을 선택하면 되니까.</p></li><li><p>Model of environment</p><p>Agent가 상호작용하는 환경을 정의한 것.</p></li></ul><p>이외에, episode라는 것이 있다. episode란, agent가 게임을 시작하고 끝날 때 까지의 기간, 즉, 한 게임을 의미한다. 다만, 게임같이 “한 게임”이라는 개념이 존재하는 episodic task가 있는 반면(바둑, 스타크래프트), “한 게임”을 정의할 수 없는, continuous task도 존재한다(로봇은 수명이 다할 때 까지 끊임없이 환경과 통신함). 이 경우에는 episode가 없다.</p><p>Reinforcement learning은 궁극적으로 reward를 최대화하는 것이지만, agent는 어떤 상황에서 높은 reward를 고르는게 아니라 value가 높은 쪽을 골라야 한다.</p><p>이 value function을 정의하는 방법은 두 가지가 있을 수 있다.</p><ul><li><p>Tabular solution method</p><p>Value function은 deterministic하다. 보통 deterministic한 함수들은 입력과 출력 매핑을 테이블 형태로 표현가능하다. 따라서, deterministic한 방법을 tabular method라고 부른다.</p><ul><li>Markov Decision Process</li></ul></li><li><p>Approximate solution method</p><p>Value function은 확률적이다.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Reinforcement Learning이란, 무엇을 
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Reinforcement Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Reinforcement-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="ReinforcementLearning" scheme="https://jaeyoung-blog.github.io/tags/ReinforcementLearning/"/>
    
  </entry>
  
  <entry>
    <title>Principal Component Analysis</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Principal-Component-Analysis/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/machine-learning/Principal-Component-Analysis/</id>
    <published>2020-03-01T13:28:55.000Z</published>
    <updated>2020-03-01T14:03:13.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Principal-Component-Analysis-PCA"><a href="#Principal-Component-Analysis-PCA" class="headerlink" title="Principal Component Analysis (PCA)"></a>Principal Component Analysis (PCA)</h1><p>데이터는 signal과 noise로 구성되어 있다. PCA의 핵심 목표는 데이터로부터 signal만 분리해 내는 것이다. PCA는 데이터 feature space를 회전시켜서 signal에 가까운 축과 noise에 가까운 축을 찾아준다. 그리고 데이터를 signal 축에 사영시킴으로써, 다른 축을 날려버리는데, 이때 데이터 정보 손실이 발생할 수 있다. 그러나, 그걸 감수하는 뛰어난 이득이 있기 때문에 PCA는 매우 유용하다.</p><p>PCA의 주 활용 목적은 다음과 같이 크게 두 가지로 분류가 가능하다. (둘 다 dimensionality reduction이다)</p><ul><li><p><strong>Feature Transformation</strong></p><p>Feature 공간의 축을 변환시켜서 signal축과 noise축을 구분되게 한다. 이때, 주의할 점은, PCA는 feature 공간을 non-linear하게 변환하는게 아니라 회전만 시킨다. 정확히 말하면, 축들만 회전시켜서 signal축과 noise축을 찾겠다는 것이다.</p></li><li><p><strong>Data Whitening</strong></p><p>Data whitening이란, 각 feature의 scale을 맞춰 주는 것을 말한다. PCA로 공간을 회전시킨 후엔, 각 축이 독립적이다. 그리고, 각 축의 variance가 구해지므로, 각 축을 standard deviation으로 나눠주면 whitening이 가능하다.</p></li><li><p><strong>Visualization</strong></p><p>PCA를 통해 signal에 가까운 축과 noise에 가까운 축을 찾아냈다면, signal에 가까운 축이 있을 것이다. Visualization을 위해 가장 signal다운 축 2개만 선택하는 방법도 있는데, 이럴 경우, 데이터에 대한 정보 상당수를 잃어버리지만, 데이터의 정보 상당량을 유지한 체, visualization을 할 수 있다.</p></li></ul><p>다음은 2차원 데이터를 PCA를 통해 축 2개를 찾은 것을 보여준다. 파란색 방향의 축이 signal이 되고, 빨간색 방향의 축이 noise가 될 수 있다(이것은 상대적인 것으로, 절대적으로 어떤것이 noise라고는 판단할 수 없다).</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20191219132645587.png" alt="image-20191219132645587"></p><p>여기서 만약에, 모든 데이터포인트를 파란색 축으로 사영시킨다고 하자. 그러면, 빨간색 방향의 정보는 사라지고, 데이터를 파란색 축 1차원으로만 표현이 가능하다. 빨간색 방향이 사라졌으므로 어느 정도의 데이터 분포에 대한 정보 손실이 있지만, 파란색 축은 대다수 정보를 보전하고 있는 축이다. 이렇게 데이터의 dimension을 reduction할 수 있는데, 이건 머신러닝 알고리즘의 속도를 크게 향상시킬 수 있다.</p><p>이건 매우 중요한 요소이다. 데이터의 모든 정보를 다 머신러닝에 때려넣기보단, 가장 메이저한 정보만 줘도 성능 하락없이 빠른 속도로 비슷한 결과를 달성할 수 있다. 이건 머신러닝에서 매우 중요하게 여기는, latent vector를 찾는다는 방향성과 일치한다.</p><h2 id="PCA-Methods"><a href="#PCA-Methods" class="headerlink" title="PCA Methods"></a>PCA Methods</h2><p>그럼 signal 축은 무엇으로 정의해야 할지에 대해서 고민해야 한다. 정답을 말하면, signal 축은 데이터 분포가 가장 널리 퍼진 방향이다. 그래야, 사영 후에, 퍼진 정도의 정보를 최대한 보존할 수 있다. 즉, 데이터들을 이 축에 사영시키면, 다른 어느 축에 사영시키는 것보다 분산이 커야 한다.</p><p>즉,</p><ol><li>분산이 가장 큰 축에 해당하는 벡터를 찾고,</li><li>데이터포인트를 그 벡터에 정사영시킨다.</li></ol><p>참고로, 정보 이론을 잠깐 가져오면, 분산이 클수록 정보량이 많다. 즉, 정보량이 많은 축을 찾는 것이다.</p><h3 id="Data-Rotation"><a href="#Data-Rotation" class="headerlink" title="Data Rotation"></a>Data Rotation</h3><p>PCA는 데이터 feature space안에서 데이터간의 관계를 건들지 않는다. 그저 rotation만 시킴으로써, 축만 변화시킬 뿐이다. 변화시킨 축이 signal이라고 할 수 있는 축들이 있고, noise 라고 할 수 있는 축이 있어서, 축을 골라서 사영시킬 수 있을 뿐이다. 데이터 자체를 non-linear하게 변형시키지는 않는다.</p><h2 id="PCA-Derivation"><a href="#PCA-Derivation" class="headerlink" title="PCA Derivation"></a>PCA Derivation</h2><p>우리가 원하는 축의 <strong>단위 벡터를 $$e$$라고 하자.</strong> 기본적으로 transpose가 없으면 column vector로 간주한다. 데이터들을 $x$라고 한다.</p><p>먼저, 데이터를 0-centerize시킨다.<br>$$<br>x’<em>i = x_i - \mu<br>$$<br>그리고 난 후, 데이터 $x’$를 축 $e$에 사영시킨 결과는, $e^Tx’$ 또는 $x’^Te$가 될 것이다. 이 사영시킨 결과로 나온 데이터들의 분포의 분산이 최대화되도록 하는 벡터 $e$를 찾아야 한다. 또한, 여기서, $e$는 단위 벡터로 제한하고자 한다. 즉,<br>$$<br>\underset{e}{\text{max}} \frac{1}{N} \sum</em>{i=1}^N (e^Tx_i’)^2 =<br>\underset{e}{\text{max}} \frac{1}{N} \sum_{i=1}^N e^Tx_i’x_i’^Te \<br>\text{s.t} <del>~ e^Te = 1<br>$$<br>참고로, $e^Tx’ = x’^Te = \text{scalar value}$이므로, $(e^Tx’<em>i)^2$을 위 식처럼 표현이 가능하다. 여기서, $e$는 $\sum$에 영향을 받지 않는 변수이므로 밖으로 뺄 수 있다.<br>$$<br>\underset{e}{\text{max}} ~e^T (\frac{1}{N}\sum</em>{i=1}^N x’_i x_i’^T) e \<br>\text{s.t} ~</del> e^Te = 1<br>$$<br>그런데, $x’$는 column vector이므로, $()$안의 값은 $x’$의 covariance matrix와 같다는 것을 알 수 있다. 이를 $\Sigma$라고 하자.<br>$$<br>\underset{e}{\text{max}} ~ e^T \Sigma e \<br>\text{s.t} <del>~</del> e^Te = 1<br>$$<br>이를 Lagrangian multiplier를 이용해서 식을 변형한다.<br>$$<br>\underset{e}{\text{max}} ~ e^T \Sigma e - \lambda (e^Te - 1) = \underset{e}{\text{max}} ~F(e)<br>$$<br>이제 미분을 수행해서 그 결과가 0이 나오는 지점을 찾아야 한다.<br>$$<br>\frac{dF(e)}{de} = 2\Sigma e - 2\lambda e = 0 \<br>\Sigma e = \lambda e<br>$$<br>즉, 우리가 찾던 벡터 $e$는 0-centered 된 데이터 $x’$의 covariance matrix의 eigen vector라는 사실을 알 수 있다.</p><p>그런데, 그럼, $\Sigma$에겐 eigen vector가 많을 것인데, 어떤 eigen vector에다가 사영할 것인지 결정해야 할 것이다. 다음으로 다시 돌아가보면,<br>$$<br>\underset{e}{\text{max}} ~ e^T \Sigma e<br>$$<br>위 식은 벡터 $e$ 방향으로의 분산에 대한 식을 변형시킨 결과로 얻었던 것이었다. 그런데, $e$가 $\Sigma$의 eigen vector라는 사실을 알았으므로,<br>$$<br>\underset{e}{\text{max}} ~ e^T \Sigma e =  \underset{e}{\text{max}} ~ e^T \lambda e<br>$$<br>가 되고, $\lambda$는 eigen value, 즉 스칼라값이므로, 맨 앞으로 올 수 있다.<br>$$<br>\underset{e}{\text{max}} ~ \lambda e^Te<br>$$<br>근데, $e^Te = 1$이라고 이미 제약을 걸어놓았다. 즉,<br>$$<br>\underset{e}{\text{max}} ~ \lambda<br>$$<br>다시말해, eigen value가 가장 큰 eigen vector를 고르면, 분산이 가장 큰 축을 찾을 수 있다는 말이 된다.</p><p>이 축은 데이터의 첫번째 principal component라고 부르며, 데이터의 가장 많은 정보를 포함하는 축이다.</p><h2 id="Principal-Components-After-1st-Component"><a href="#Principal-Components-After-1st-Component" class="headerlink" title="Principal Components After 1st Component"></a>Principal Components After 1st Component</h2><p>그래서, 가장 정보량이 많은 방향을 구했다. 그런데, dimensionality reduction을 하려고 할 때, 1차원으로만 압축해버리면 잃어버리는 정보가 매우 많다. 그래서, 첫번째 principal component(PC)를 제외하고 다른 방향으로 가장 많은 정보를 포함하는 축을 찾으려고 한다. 즉, 두번째 principal component를 찾을 것이다.</p><p>그런데 다음의 제한 사항이 있어야 한다.</p><ul><li><p>PC들은 모두 서로 직교해야 한다.</p><p>직교한다는 의미는 각 축이 서로 캡쳐하지 못하는 순수한 정보만 캡쳐할 수 있다는 이야기이다. 첫번째 PC와 비슷한 방향 축을 고른다고 해서 그 축이 정보를 많이 포함할까? 그 축은 첫번째 PC와 정보가 매우 많이 겹칠 것이다.</p></li></ul><p>그래서, 첫번째 PC에 수직인 sub-space에서 다시 분산이 가장 큰 방향을 구하게 된다.</p><p>두 번째 PC를 $e_2$라고 했을 때, $e_1^Te_2 = 0, e_2^Te_2 = 1$이라는 제약 조건을 만족시키면서 다음 variance를 최대화시켜야 한다. ($X$는 zero-centered 시켰다고 가정)<br>$$<br>\text{Var}(e_2) = (Xe_2)^T(Xe_2) \<br>= e_2^T \Sigma e_2<br>$$<br>Lagrangian multiplier에 의해,<br>$$<br>\underset{e_2}{\text{argmax}} ~ e_2^T \Sigma e_2 - c_1(e_2^Te_2 - 1) - c_2(e_1^Te_2)<br>$$<br>이를 미분한 결과가 0이 나와야 하므로,<br>$$<br>2 \Sigma e_2 - 2c_1e_2 - c_2 e_1 = 0<br>$$<br>양변에 $e_1^T$를 곱하면,<br>$$<br>2 e_1^T \Sigma e_2 - 2 c_1 e_1^T e_2 - c_2 e_1^T e_1 = 0 \<br>2 e_1^T \Sigma e_2 - c_2 = 0<br>$$<br>그런데 이때, $\Sigma$는 eigen decomposition에 의해 다음과 같다. ($d$는 데이터의 차원이라고 하자)<br>$$<br>\Sigma = \begin{pmatrix}<br>v_1 &amp; v_2 &amp; \cdots v_d<br>\end{pmatrix}<br>\begin{pmatrix}<br>\lambda_1 &amp; 0 &amp; \cdots &amp; 0 \<br>0 &amp; \lambda_2 &amp; \cdots &amp; 0 \<br>\cdots \<br>0 &amp; 0 &amp; \cdots &amp; \lambda_d<br>\end{pmatrix}<br>\begin{pmatrix}<br>v_1^T \<br>v_2^T \<br>\cdots \<br>v_d^T<br>\end{pmatrix}<br>$$<br>따라서 위 식을 다음처럼 고칠 수 있다.<br>$$<br>2 e_1^T \begin{pmatrix}<br>v_1 &amp; v_2 &amp; \cdots v_d<br>\end{pmatrix}<br>\begin{pmatrix}<br>\lambda_1 &amp; 0 &amp; \cdots &amp; 0 \<br>0 &amp; \lambda_2 &amp; \cdots &amp; 0 \<br>\cdots \<br>0 &amp; 0 &amp; \cdots &amp; \lambda_d<br>\end{pmatrix}<br>\begin{pmatrix}<br>v_1^T \<br>v_2^T \<br>\cdots \<br>v_d^T<br>\end{pmatrix} e_2 - c_2 = 0 \</p><p>2 \begin{pmatrix}<br>1 &amp; 0 &amp; \cdots 0<br>\end{pmatrix}<br>\begin{pmatrix}<br>\lambda_1 &amp; 0 &amp; \cdots &amp; 0 \<br>0 &amp; \lambda_2 &amp; \cdots &amp; 0 \<br>\cdots \<br>0 &amp; 0 &amp; \cdots &amp; \lambda_d<br>\end{pmatrix}<br>\begin{pmatrix}<br>v_1^T \<br>v_2^T \<br>\cdots \<br>v_d^T<br>\end{pmatrix} e_2 - c_2 = 0 \</p><p>\begin{pmatrix}<br>2 \lambda_1 &amp; 0 &amp; \cdots 0<br>\end{pmatrix}<br>\begin{pmatrix}<br>v_1^T \<br>v_2^T \<br>\cdots \<br>v_d^T<br>\end{pmatrix} e_2 - c_2 = 0 \</p><p>2\lambda_1 v_1^T e_2 - c_2 = 0<br>$$<br>근데, $v_1$는 첫 번째 eigen vector로, $e_1$과 같다.<br>$$<br>2 \lambda_1 e_1^T e_2 - c_2 = 0 \<br>c_2 = 0<br>$$<br>다시 원래 최대화 식으로 돌아가보자.<br>$$<br>\underset{e_2}{\text{argmax}} ~ e_2^T \Sigma e_2 - c_1(e_2^Te_2 - 1) - c_2(e_1^Te_2)<br>$$<br>이건 다음처럼 변경된다.<br>$$<br>\underset{e_2}{\text{argmax}} ~ e_2^T \Sigma e_2 - c_1(e_2^Te_2 - 1)<br>$$<br>얘네를 미분하는 것? 첫 번째 PC를 구할때 지나왔던 길과 같다. 따라서, 다음처럼 유도될 것이다.<br>$$<br>\Sigma e_2 = \lambda_2 e_2<br>$$<br>즉, $e_2$ 역시, eigen vector이며, 이 $e_2$방향으로도 $e_1$ 방향을 제외하고 분산이 가장 커야 한다. 다음의 식에 의해 $e_2$방향의 분산은 eigen value $\lambda_2$와 같다.<br>$$<br>\text{Var}(e_2) = e_2^T \Sigma e_2 = e_2^T \lambda_2 e_2 = \lambda_2<br>$$<br>따라서, $e_1$방향의 분산인 $\lambda_1$보다 작으면서 가장 큰 eigen value, 즉, 두번째로 큰 eigen value가 두 번째 PC의 분산값이 된다. 즉, 두번째로 큰 eigen value에 해당하는 eigen vector가 두 번째 PC축이다.</p><p>(사실, 두 번째 PC를 다음처럼 추측도 가능하다. 왜냐하면, covariate matrix는 symmetric matrix이다. 그런데, symmetric matrix의 eigen vector들은 모두 서로 직교한다. 따라서, 첫 번째 PC가 eigen vector임이 밝혀진 상황에서, 두 번째 PC는 첫 번째 PC와 직교하므로, 두 번째 PC 역시 eigen vector라는 사실을 알 수 있다.)</p><h3 id="Covariance-between-PCs"><a href="#Covariance-between-PCs" class="headerlink" title="Covariance between PCs"></a>Covariance between PCs</h3><p>데이터를 각 PCs(covariate matarix의 eigen vector들)에 사영시켰을 때, 사영된 데이터들간 covariance 또는 correlation은 0이다.</p><p>편의를 위해 2차원이라고 생각해보자. 2차원에 분포된 데이터들 $x_i$가 있고, 그들의 principal component를 $e_1, e_2$라고 했을 때, $x_1$을 $e_1$에 사영시킨 것은 $(x_i^T e_1)e_1$이고, $e_2$에 사영시킨 것은 $(x_i^T e_2)e_2$이다. 따라서 이들의 covariance가 0이라는 것은 다음을 만족한다는 의미이다.<br>$$<br>((x_i^Te_1)e_1)^T \cdot (x_i^T e_2)e_2 = 0<br>$$<br>이때, $()$안에 있는 term들은 모두 scalar값이므로(내적이니까),<br>$$<br>(x_i^T e_1)e_1^T \cdot (x_i^T e_2) e_2 = 0 \<br>(x_i^T e_1)(x_i^T e_2)e_1^Te_2 = 0 \<br>(x_i^T e_1)(x_i^T e_2)0 = 0 \<br>0 = 0<br>$$<br>Symmetric matrix의 eigen vector끼리는 orthogonal하므로 $e_1^Te_2 = 0$이다.</p><p>따라서, 등식이 성립하고, 데이터 포인트에 대해 PC축들은 서로 covariance가 0이다. 그러니까, covariance matrix $\text{Cov}(i,j)$에서, $\text{Cov}(i,j) = 0 ~ \text{if} ~ i \not = j$라는 의미.</p><h2 id="Implementation-of-PCA-Dimensionality-Reduction"><a href="#Implementation-of-PCA-Dimensionality-Reduction" class="headerlink" title="Implementation of PCA (Dimensionality Reduction)"></a>Implementation of PCA (Dimensionality Reduction)</h2><p>구현에서는 데이터 행렬 $X$의 각 데이터 포인트는 row-vector임을 명시한다. 나머지는 모두 column-vector이다.</p><p>PCA의 구현은 다음과 같이 요약이 가능하다.</p><ol><li><p>데이터를 0-centered 한다. $Z = X - \mu_X$</p></li><li><p>$Z$의 covariate matrix를 계산한다. $\Sigma = Z^TZ$ 또는, <figure class="highlight plain"><figcaption><span>바로 계산</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. $\Sigma$의 eigen decomposition을 계산한다. $V\Lambda V^T$, ```np.linalg.eig(cov_mat)```로 계산</span><br><span class="line"></span><br><span class="line">4. Eigen value를 내림차순으로 정렬한다. 당연히 eigen vector들도 동반 정렬되어야 한다.</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   evalues, evectors  = np.linalg.eig(cov_mat)</span><br><span class="line">   lst = sorted(zip(evalues, evectors), key=lambda item: item[0], reverse=True)</span><br><span class="line">   # result:</span><br><span class="line">   # [(e1, v1), (e2, v2), ...]</span><br></pre></td></tr></table></figure></p></li><li><p>최상위 $k$개의 eigen vector를 뽑아낸다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">evectors = list(map(<span class="keyword">lambda</span> item: item[<span class="number">1</span>], lst))[:k]</span><br><span class="line">E = np.hstack(evectors)</span><br></pre></td></tr></table></figure></li><li><p>데이터 포인트를 각 eigen vector에 사영시킨다. $\text{inner prod}(x_i, e_j)$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_reduced = np.matmul(X, E)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Implementation-of-Data-Whitening"><a href="#Implementation-of-Data-Whitening" class="headerlink" title="Implementation of Data Whitening"></a>Implementation of Data Whitening</h2><p>데이터 whitening이란, 데이터의 분포를 타원형에서 원형으로 re-scaling해주는 것을 말한다. 각 feature들의 scale을 일치시킨다. PCA를 이용하면 이를 수행할 수 있다. 단, feature는 eigen vector로 변환된 상태로 whitening이 이루어진다.</p><p>방법은, PCA로 데이터를 rotation시킨 후(basis가 eigen vector들이 된다), 각 eigen vector축 방향을 그 방향의 standard deviation으로 나눠준다. PCA로 변환된(rotation된) 데이터들을 $Z$라고 했을 때,<br>$$<br>\begin{pmatrix}<br>1 \over \sqrt{\lambda_1} &amp; 0 &amp; \cdots &amp; 0 \<br>0 &amp; 1 \over \sqrt{\lambda_2} &amp; \cdots &amp; 0 \<br>\cdots \<br>0 &amp; 0 &amp; \cdots &amp; 1 \over \sqrt{\lambda_d}<br>\end{pmatrix} Z<br>$$<br>왜냐하면, 각 축 방향의 variance는 eigen vector들이기 때문.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200221092153746.png" alt="image-20200221092153746"></p><p>구현은 다음과 같다.</p><ol><li><p>데이터를 0-centered 한다. $Z = X - \mu_X$</p></li><li><p>$Z$의 covariate matrix를 계산한다. $\Sigma = Z^TZ$ 또는, <figure class="highlight plain"><figcaption><span>바로 계산</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. $\Sigma$의 eigen decomposition을 계산한다. $V\Lambda V^T$, ```np.linalg.eig(cov_mat)```로 계산</span><br><span class="line"></span><br><span class="line">4. 데이터 $X$를 eigen vector에 사영시킨다. (정렬은 해도되고 안해도되는데, dimensionality reduction까지 하려면 정렬하고 $k$개만 뽑고 거기에 사영시킨다)</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   evalues, evectors = np.linalg.eig(cov_mat)</span><br><span class="line">   E = np.hstack(evectors)</span><br><span class="line">   X_transformed = np.matmul(X, E)</span><br></pre></td></tr></table></figure></p></li><li><p>얘네에다가 $\Lambda^{-\frac{1}{2}}$를 곱해준다. (Dimensionality reduction했으면 $k$개만 있는 diagonal matrix이다)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LAMBDA = np.diag(evalues)</span><br><span class="line">X_whitened = np.matmul(LAMBDA, X_transformed)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Principal-Component-Analysis-PCA&quot;&gt;&lt;a href=&quot;#Principal-Component-Analysis-PCA&quot; class=&quot;headerlink&quot; title=&quot;Principal Component Analysis
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Machine Learning" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Machine-Learning/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="MachineLearning" scheme="https://jaeyoung-blog.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Appendix 2. Empirical Bayes</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/APPENDIX-2-Empirical-Bayes/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/APPENDIX-2-Empirical-Bayes/</id>
    <published>2020-03-01T13:08:16.000Z</published>
    <updated>2020-03-03T01:57:15.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Empirical-Bayes"><a href="#Empirical-Bayes" class="headerlink" title="Empirical Bayes"></a>Empirical Bayes</h1><p><strong>하이퍼파라미터 또한 데이터로 구하자.</strong></p><p>베이지안 모델링을 하게 되면, likelihood를 모델링하고, 그 파라미터를 prior로 모델링을 하게 된다.<br>$$<br>D \sim \text{Lieklihood}(\theta) <del>~</del> [P(D|\theta)]\<br>\theta \sim \text{prior}(\lambda)<br>$$<br>그런데, 이때, prior의 파라미터(위에서는 $\lambda$)는 하이퍼파라미터로, 사용자가 직접 constant로 세팅해 주게 된다. Empirical bayes는 이 하이퍼파라미터를 사용자 대신, 데이터를 이용해서 MAP으로 추론하는 것을 말한다(point estimation).</p><p>즉,<br>$$<br>\hat{\lambda} = \underset{\lambda}{\text{argmax}} ~ P(\lambda|D)<br>$$<br>하이퍼파라미터의 posterior를 구하는 방법은 다음과 같다.<br>$$<br>P(\lambda|D) \approx P(\lambda) \int P(D|\theta)P(\theta|\lambda) d\theta<br>$$<br>그런데, 이때, $\lambda$의 prior가 필요해지는데, 그냥 uniform prior로 둔다. 그럼 다음과 같다.<br>$$<br>P(\lambda|D) \approx \int P(D|\theta)P(\theta|\lambda) d\theta \approx P(D|\lambda)<br>$$<br> 그리고, 이놈을 최대화하는 $\lambda$를 구하는 것이다.<br>$$<br>\hat{\lambda} = \underset{\lambda}{\text{argmax}} ~ \int P(D|\theta)P(\theta|\lambda) d\theta<br>$$</p><h2 id="Examples-beta-binomial-Model"><a href="#Examples-beta-binomial-Model" class="headerlink" title="Examples: beta-binomial Model"></a>Examples: beta-binomial Model</h2><p>어떤 데이터에 대해 다음처럼 모델링했다 치자.<br>$$<br>x_i \sim \text{binom}(x_i|N_i, \theta_i) \<br>\theta_i \sim \text{beta}(\theta_i|a, b)<br>$$<br>이때, 각 데이터 샘플이 서로 다른 binomial distribution에서 왔다는 것에 주목한다. 즉, $N_i, \theta_i$가 데이터마다 모두 다르다.</p><p>따라서, likelihood는 다음과 같다.<br>$$<br>\text{Likelihood}(X|\Theta) = \prod_i \text{binom}(x_i|N_i, \theta_i)<br>$$<br>그럼 다음처럼 EB(Empirical Bayes)를 이용해서 $a, b$에 대한 posterior에 비례(approximate)하는 함수를 구할 수 있다.<br>$$<br>P(a, b|D) \approx \prod_i \int \text{binom}(x_i|N_i, \theta_i) \cdot \text{beta}(\theta_i|a, b) ~ d\theta_i<br>$$<br>이 식을 최대화하는 $a, b$를 구하면 된다.<br>$$<br>= \prod_i \frac{\text{beta}(a + x_i, b + N_i - x_i)}{\text{beta}(a, b)}<br>$$</p><p>(왜 저렇게 나오지??) </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Empirical-Bayes&quot;&gt;&lt;a href=&quot;#Empirical-Bayes&quot; class=&quot;headerlink&quot; title=&quot;Empirical Bayes&quot;&gt;&lt;/a&gt;Empirical Bayes&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;하이퍼파라미터 또한
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Bayesian Statistics" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Bayesian-Statistics/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="BayesianStatistics" scheme="https://jaeyoung-blog.github.io/tags/BayesianStatistics/"/>
    
  </entry>
  
  <entry>
    <title>Appendix 1. Maximize a Posterior</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/APPENDIX-1-MAP/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/APPENDIX-1-MAP/</id>
    <published>2020-03-01T13:08:15.000Z</published>
    <updated>2020-03-03T01:57:13.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maximize-a-Posterior"><a href="#Maximize-a-Posterior" class="headerlink" title="Maximize a Posterior"></a>Maximize a Posterior</h1><p><strong>사후확률 최대화 추정법(MAP Estimation).</strong></p><p>Likelihood를 최대화하는 추정법(MLE - Maximum Likelihood Estimation)은 오직 데이터만을 이용해서 파라미터를 point estimation하는 방법이다. 하지만, MAP는 선행 지식 또는 개인의 믿음을 파라미터 추정에 집어 넣고, 데이터의 정보와 합해서 파라미터를 point estimation하는 방법이다.</p><p>방법은 다음과 같다.</p><ol><li><p>데이터에 대한 likelihood $P(D|\theta)$를 모델링한다.</p></li><li><p>Likelihood $P(D|\theta)$의 파라미터 $\theta$의 prior $P(\theta)$를 모델링한다.</p></li><li><p>Prior $P(\theta)$와 likelihood $P(D|\theta)$를 이용해서 posterior $P(\theta|D)$를 직접 계산할 수 있으면 계산하되, 불가능하다면, posterior와 비례하는 함수 $g(\theta|D)$를 계산한<br>$$<br>P(\theta|D) = \frac{P(D|\theta)P(\theta)}{\sum_{\theta’}P(D|\theta’)P(\theta’)}<br>$$<br>분모인 normalization constant가 계산 불가능할 수도 있다. 그럼, $g(\theta|D)$를 대신 구한다.<br>$$<br>P(\theta|D) \approx g(\theta|D) = P(D|\theta)P(\theta)<br>$$<br>보통, 파라미터의 prior $P(\theta)$가 likelihood $P(D|\theta)$와 conjugate를 이루면, posterior를 직접 계산할 수 있을 것이다. 그렇지 못하면서 가능한 $\theta$의 개수가 많다면, $g(\theta|D)$를 계산해야 하는 경우가 많다.</p></li><li><p>Posterior $P(\theta|D)$가 가장 커지는 $\theta$를 구한다.<br>$$<br>\hat{\theta} = \underset{\theta}{\text{argmax}} ~ P(\theta|D)<br>$$<br>또는 $g(\theta|D)$가 가장 커지는 $\theta$를 구한다.<br>$$<br>\hat{\theta} = \underset{\theta}{\text{argmax}} ~ g(\theta|D)<br>$$<br>미분을 통한 극점을 이용하자. (Gradient descent 같은)</p></li></ol><h3 id="Is-MAP-a-Bayesian-Method"><a href="#Is-MAP-a-Bayesian-Method" class="headerlink" title="Is MAP a Bayesian Method?"></a>Is MAP a Bayesian Method?</h3><p>Bayes 통계의 특징은, 파라미터를 하나의 값이 아닌 분포로 본다는 것이다. 하지만, MAP는 파라미터의 분포를 추정하는게 최종 목표가 아니라 파라미터를 <strong>point estimation</strong>하는 것이 최종 목표이다.</p><p>MAP의 계산 과정상 파라미터의 posterior를 계산하게 되지만, 결국은 point estimation으로, 파라미터를 하나의 값으로 본다는 점에서 완전한 베이지안 통계적 방법이라고 보지 않는 경우가 많다고 한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Maximize-a-Posterior&quot;&gt;&lt;a href=&quot;#Maximize-a-Posterior&quot; class=&quot;headerlink&quot; title=&quot;Maximize a Posterior&quot;&gt;&lt;/a&gt;Maximize a Posterior&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Bayesian Statistics" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Bayesian-Statistics/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="BayesianStatistics" scheme="https://jaeyoung-blog.github.io/tags/BayesianStatistics/"/>
    
  </entry>
  
  <entry>
    <title>14. Predictive Simulations</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/14_Predictive_Simulation/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/14_Predictive_Simulation/</id>
    <published>2020-03-01T13:08:14.000Z</published>
    <updated>2020-03-03T01:55:44.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Predictive-Simulation"><a href="#Predictive-Simulation" class="headerlink" title="Predictive Simulation"></a>Predictive Simulation</h1><p>어떤 예측해야 할 변수 $\lambda$의 분포에서 샘플링하는 시뮬레이션을 말한다. $\lambda$를 데이터를 관찰하기 전의 분포 $p(\lambda)$에서 시뮤레이션하는가, 관찰한 후의 분포 $p(\lambda|D)$에서 시뮬레이션 하는가에 따라 다음과 같이 나뉜다.</p><ul><li>Prior Predictive Simulation</li><li>Posterior Predictive Simulation</li></ul><h2 id="Prior-Predictive-Simulation"><a href="#Prior-Predictive-Simulation" class="headerlink" title="Prior Predictive Simulation"></a>Prior Predictive Simulation</h2><p>Prior를 설정한 후, predictive simulation을 수행하는 것을 말한다. 다음처럼 모델링한 모델이 있다고 하자.<br>$$<br> y_i|\lambda_{j} \sim \text{Pois}(\lambda_{j}) \<br> \lambda_j|\alpha,\beta \sim \text{Gamma}(\alpha, \beta) \<br> \alpha \sim p(\alpha), \beta \sim p(\beta)<br>$$<br>이때, $\alpha,\beta$에 대한 prior를 각각 설정했다면, 그 prior를 바탕으로 $\alpha^<em>, \beta^</em>$를 샘플링할 수 있다. 그런 다음, $\lambda^<em>$를 샘플링한다. 이때, $\lambda^</em>$를 샘플링하는 확률분포는 다음처럼 표시할 수 있다.<br>$$<br>p(\lambda^<em>) = \int p(\lambda^</em>|\alpha,\beta) p(\alpha) p(\beta) ~d\alpha ~d\beta<br>$$<br>위 확률 분포에 따라 $\lambda^*$를 샘플링하는 것을 prior predictive simulation이라고 부르고, 위 확률 분포를 prior predictive distribution이라고 부른다. 이 분포는 likelihood와 prior의 곱의 합으로 이루어진다.</p><p>$\lambda^<em>$를 샘플링했다면, $\lambda$와 마찬가지로 $y^</em>$를 샘플링할 수 있다. 일단 $\lambda^<em>$를 얻었다면, 다음 식에 의해 $y^</em>$를 샘플링할 수 있다.<br>$$<br>p(y^<em>) = \int p(y^</em>|\lambda)p(\lambda) ~d\lambda<br>$$<br>이렇게 계층을 올라가면서 각 파라미터와 예측값에 대해 prior predictive simulation을 할 수 있다.</p><h2 id="Posterior-Predictive-Simulation"><a href="#Posterior-Predictive-Simulation" class="headerlink" title="Posterior Predictive Simulation"></a>Posterior Predictive Simulation</h2><p>데이터를 관측해서 prior를 credential distribution(posterior)로 수정한 이후, predictive simulation하는 것을 말한다. 이때, $\lambda$에 대한 시뮬레이션은 다음과 같다.<br>$$<br>p(\lambda|D) = \int p(\lambda|D,\alpha,\beta)p(\alpha|D)p(\beta|D) ~d\alpha ~d\beta<br>$$<br>위 식을 posterior predictive distribution이라고 부르는데, prior predictive distribution과 다른 점은 각 파라미터 분포에 prior 대신 posterior가 쓰였다는 점이다.</p><p>$y$의 경우도 마찬가지.<br>$$<br>p(y|D) = \int p(y|D,\lambda)p(\lambda|D) ~p\lambda<br>$$<br>시뮬레이션할 때는, posterior로부터 $\alpha^<em>,\beta^</em>$를 샘플링하고, 그 $\alpha^<em>, \beta^</em>$를 이용해서 $\lambda^<em>$를 샘플링한다. 그리고 그 $\lambda^</em>$를 이용해서 $y^*$를 샘플링하면 된다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Predictive-Simulation&quot;&gt;&lt;a href=&quot;#Predictive-Simulation&quot; class=&quot;headerlink&quot; title=&quot;Predictive Simulation&quot;&gt;&lt;/a&gt;Predictive Simulation&lt;/
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Bayesian Statistics" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Bayesian-Statistics/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="BayesianStatistics" scheme="https://jaeyoung-blog.github.io/tags/BayesianStatistics/"/>
    
  </entry>
  
  <entry>
    <title>13. Hierarchical Models</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/13_Hierarchical_models/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/13_Hierarchical_models/</id>
    <published>2020-03-01T13:08:13.000Z</published>
    <updated>2020-03-03T01:55:41.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hierarchical-Models"><a href="#Hierarchical-Models" class="headerlink" title="Hierarchical Models"></a>Hierarchical Models</h1><p>데이터 생성 프로세스를 계층적으로 모델링한 것을 의미한다. 즉, likelihood의 파라미터는 또 다른 파라미터를 갖는 분포를 가지는 형태. 예를들어 likelihood는 poisson 분포를 따른다고 모델링하고, 그 파라미터 $\lambda$는 또 다른 파라미터 $\alpha, \beta$를 가지는 gamma 분포를 따른다고 모델링했다고 하자. 이 경우가 계층적 모델링에 속한다.<br>$$<br>y_i|\lambda_{j} \sim \text{Pois}(\lambda_{j}) \<br>\lambda_j|\alpha,\beta \sim \text{Gamma}(\alpha, \beta) \<br>\alpha \sim p(\alpha), \beta \sim p(\beta)<br>$$<br>이때, 각 $\lambda$는 여러개가 있고, 그중 하나에서 $y$가 생성되지만, $\lambda$는 모두 같은 분포에서 나온 녀석들이라고 모델링 한 것이다. $p(\alpha),p(\beta)$는 각각 $\alpha,\beta$의 prior이다.</p><p>이 경우의 장점은, 데이터가 모두 독립이지 않고 같은 성질을 갖는 놈들(같은 $\lambda$에서 나온 놈들에 해당)은 비슷하고 다른 성질은 갖는 놈들은 조금 다르다는, 약간의 correlation이 있는 데이터를 모델링할 수 있다.</p><p>$\alpha,\beta$는 고정적으로 줘도 될 것인데, 왜 궂이 prior를 할당해서 샘플링하는가? 이건 $$\alpha,\beta$$에 대한 uncertainty(불확실성) 때문이다.</p><p>$$\alpha,\beta$$는 독립적으로 샘플링된다. 그러나, 샘플링된 $\lambda$들 끼리는 독립이 아니다. 대신, $\alpha,\beta$가 주어진다면, 각 $\lambda$끼리는 해당 특정한 $\alpha, \beta$를 파라미터로 하는 분포에서 독립적으로 샘플링됬을 것이므로 조건부 독립이다. $y$끼리도 독립이 아니지만, $\lambda$가 주어진다면 $y$들 끼리 독립(조건부 독립)이다. $\lambda$가 주어졌다는 의미는 어느 한 그룹으로 좁혔고, 그 그룹 내에서 샘플들끼리는 독립이기 때문이다(그렇게 모델링 했으니까).</p><p>이렇게 함으로써, 다른 그룹은 다른 모델로 모델링하기 보다는 계층적인 하나의 모델로 모델링할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hierarchical-Models&quot;&gt;&lt;a href=&quot;#Hierarchical-Models&quot; class=&quot;headerlink&quot; title=&quot;Hierarchical Models&quot;&gt;&lt;/a&gt;Hierarchical Models&lt;/h1&gt;&lt;p&gt;데이
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Bayesian Statistics" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Bayesian-Statistics/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="BayesianStatistics" scheme="https://jaeyoung-blog.github.io/tags/BayesianStatistics/"/>
    
  </entry>
  
  <entry>
    <title>12. Prior Sensitivity Analysis</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/12_Prior_Sensitivity_Analysis/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/12_Prior_Sensitivity_Analysis/</id>
    <published>2020-03-01T13:08:12.000Z</published>
    <updated>2020-03-03T01:55:38.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prior-Sensitivity-Analysis"><a href="#Prior-Sensitivity-Analysis" class="headerlink" title="Prior Sensitivity Analysis"></a>Prior Sensitivity Analysis</h1><p>Prior sensitivity analysis란, 하나의 파라미터에 대해 여러가지 prior 분포를 적용해보고 만든 여러 모델의 성능을 분석하는 과정을 말한다.</p><p>여러가지 prior를 적용해서 여러 모델을 만들었다고 하자. 그럼 여러 모델들이 내놓는 결과를 바탕으로 다음과 같이 해석할 수 있다. (Prior sensitivity analysis의 결과로 다음 두 가지의 경우가 나온다)</p><ul><li><p>결과가 prior-sensitive하다.</p><p>어떤 prior를 선택하느냐에 따라 추정 성능 및 결과가 크게 달라지는 경우를 말한다. 즉, 데이터보다는 prior가 결과에 영향을 많이 미치는 경우이다. 이 경우, 내가 왜 이 prior를 선택해야 하고 이 모델을 선택해야 하는지 팀에게 설명할 필요가 있다.</p></li><li><p>결과가 prior-insensitive하다.</p><p>이 경우, prior보다는 데이터가 결과에 지대한 영향을 미치는 경우로, prior의 선택에 큰 힘을 쏟을 필요가 없음을 보일 수 있다.</p></li></ul><p>Prior sensitivity analysis는 내가 선택한 prior가 적절하다는 가정을 증명하기 위해서도 사용한다(즉, 가설검정에 사용할 수 있음). 내가 원하는 prior를 선택해서 모델을 구성하고, 내가 원하지 않는 prior를 선택해서 모델을 구성하게 된다. 이때, 내가 원하지 않는 prior를 <strong>skeptical prior</strong>라고 한다. 만약, skeptical prior로 시도해본 여러 모델들이 모두 내가 원한 prior 모델보다 일정 이상 성능이 좋지 않으면 나의 prior 선택을 증명 또는 설명할 수 있다.</p><p>Prior sensitivity analysis를 할때, 해당 prior로 posterior estimation을 통해 성능을 측정하게 된다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prior-Sensitivity-Analysis&quot;&gt;&lt;a href=&quot;#Prior-Sensitivity-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Prior Sensitivity Analysis&quot;&gt;&lt;/a&gt;Prior Se
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Bayesian Statistics" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Bayesian-Statistics/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="BayesianStatistics" scheme="https://jaeyoung-blog.github.io/tags/BayesianStatistics/"/>
    
  </entry>
  
  <entry>
    <title>11. Linear Regression</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/11_Linear_Regression/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/11_Linear_Regression/</id>
    <published>2020-03-01T13:08:11.000Z</published>
    <updated>2020-03-03T01:55:35.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h1><p>선형 회귀라고도 불리며, 예측해야할 dependent variable이 continuous할때, 유용하다.</p><p>선형 회귀는 다음과 같다.<br>$$<br>y_i \sim \mathbb{N}(\mu_i, \sigma^2) \<br>\mu_i = \beta_0 + \beta_1 x_1 + \cdots + \beta_k x_k<br>$$<br>또는 다음과 같이 표현할 수 있다.<br>$$<br>y_i = \beta_0 + \beta_1 x_1 + \cdots + \beta_k x_k + \epsilon \<br>\epsilon \sim \mathbb{N}(0, \sigma^2)<br>$$<br>즉, 예측값 $y_i$는 일직선 값에 오차값(residual) $\epsilon$을 더한 값이며, 이 residual값은 normal distribution을 따른다.</p><p>베이지안 통계에서는 $\beta$들은 분포를 갖는 random variable들이다. 따라서, 선형 회귀를 학습시킬때, 각 $\beta$에 대해 prior를 설정하고 posterior를 계산하게 된다.</p><p>각 $\beta$값에는 normal prior를 주는게 보통이지만, 다른 prior도 상관없다.</p><p>단, 어떤 variable $x_i$가 $y_i$에 영향을 주는 놈인지 알고 싶다면, $\beta_i$의 prior로 <strong>Laplace prior</strong>를 설정하기도 한다. Laplace distribution은 double exponential 이라고도 불리며, 0점에서 뾰족한 모양이고 $y$축 대칭이다.</p><p>만약, 어떤 $i$번째 $\beta_i$의 posterior 분포가 그냥 Laplace처럼 0점에 뾰족한 모양에 가깝다면, 그 $\beta_i$에 대응되는 $x_i$는 영향력이 거의 없다고 할 수 있다. 이런 방법을 <strong>Lasso</strong> 라고 부른다.</p><p>JAGS 문법으로 표현하면 다음과 같다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rjags</span></span><br><span class="line"></span><br><span class="line">mod.string &lt;- <span class="string">"model &#123;</span></span><br><span class="line"><span class="string">    # likelihood</span></span><br><span class="line"><span class="string">    for (i in 1:length(y)) &#123;</span></span><br><span class="line"><span class="string">        y[i] ~ dnorm(mu[i], prec)</span></span><br><span class="line"><span class="string">        mu[i] = b0 + b[1]*x1[i] + b[2]*x2[i]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # prior</span></span><br><span class="line"><span class="string">    # prec의 사후샘플들의 effective size가 5, variability가 2라고 기대하는 경우의</span></span><br><span class="line"><span class="string">    # inverse-gamma는 다음과 같다.</span></span><br><span class="line"><span class="string">    prec ~ dgamma(5/2, 5*2/2)</span></span><br><span class="line"><span class="string">    b0 ~ dnorm(0, 1e-6)</span></span><br><span class="line"><span class="string">    for (i in 1:2) &#123;</span></span><br><span class="line"><span class="string">        b[i] ~ dnorm(0, 1e-6)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;"</span></span><br></pre></td></tr></table></figure><h2 id="Poison-Regression"><a href="#Poison-Regression" class="headerlink" title="Poison Regression"></a>Poison Regression</h2><p>선형 회귀의 일종으로, response variable인 $y$가 count 값인 경우에 사용되는 경우가 있다. poison 분포는 0보다 크거나 같은 값을 도메인으로 가지므로, $y$역시 0보다 같거나 큰 값이어야 한다. 반대로, $y$의 범위가 0이상이라면, Poison regression을 생각해 볼 수 있다.</p><p>Poison regression은 likelihood가 poison distribution으로 모델링된 형태이다. 그런데, 이 경우, $y$가 0 이상 값이므로, 선형 회귀처럼 $y_i = \beta_0 + \beta_1 x_{1,i}$로 할 수 없다. 대신, $y$를 적절히 변형해서 $[-\infin, \infin]$범위로 만들어 준다면, 선형 함수로 적용이 가능할 것이다. 이때 사용하는 것이 $\text{log}$함수이다. 즉, 다음과 같다.<br>$$<br>\text{log}~y_i = \beta_0 + \beta_1x_{1,i} + \beta_2 x_{2,i} + \cdots \<br>y_i = \text{exp}(\beta_0 + \beta_1x_{1,i} + \beta_2 x_{2,i} + \cdots)<br>$$<br>위의 방법으로 모델링한다. Poison distribution의 파라미터 $\lambda$는 곧 분포의 기댓값이다. 즉, $y_i = \lambda_i$로 생각하면 된다.  JAGS 문법으로 표현하면 다음과 같다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rjags</span></span><br><span class="line"></span><br><span class="line">mod.string &lt;- <span class="string">"model &#123;</span></span><br><span class="line"><span class="string">    # likelihood</span></span><br><span class="line"><span class="string">    for (i in 1:length(y)) &#123;</span></span><br><span class="line"><span class="string">        y[i] ~ dpois(lambda[i])</span></span><br><span class="line"><span class="string">        log(lambda[i]) = b0 + b[1]*x1[i] + b[2]*x2[i]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # prior</span></span><br><span class="line"><span class="string">    b0 ~ dnorm(0, 1e-6)</span></span><br><span class="line"><span class="string">    for (i in 1:2) &#123;</span></span><br><span class="line"><span class="string">        b[i] ~ dnorm(0, 1e-6)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linear-Regression&quot;&gt;&lt;a href=&quot;#Linear-Regression&quot; class=&quot;headerlink&quot; title=&quot;Linear Regression&quot;&gt;&lt;/a&gt;Linear Regression&lt;/h1&gt;&lt;p&gt;선형 회귀라고도 불
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Bayesian Statistics" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Bayesian-Statistics/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="BayesianStatistics" scheme="https://jaeyoung-blog.github.io/tags/BayesianStatistics/"/>
    
  </entry>
  
  <entry>
    <title>10. Markov Chain Monte Carlo</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/10_Markov_chain_Monte_Carlo/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/10_Markov_chain_Monte_Carlo/</id>
    <published>2020-03-01T13:08:10.000Z</published>
    <updated>2020-03-03T01:55:33.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markov-Chain-Monte-Carlo"><a href="#Markov-Chain-Monte-Carlo" class="headerlink" title="Markov Chain Monte Carlo"></a>Markov Chain Monte Carlo</h1><p>MCMC라고도 불린다. 파라미터 $\theta$의 분포 $p(\theta)$를 추정하고자 한다. 그러기 위해, bayesian inference를 하려고 하는데, 그러려면, 데이터를 수집한 후 posterior $p(\theta|Y)$를 계산해야 한다. 그러나, 이 posterior를 계산하기에 상당히 어려울 수 있기 때문에(특히, normalization constant) 대신, posterior를 추정하기로 한다. 이 posterior를 추정할때 쓰일 수 있는 알고리즘 중 하나가 MCMC이다.</p><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>우리가 추정하고자 하는 파라미터 $\theta$의 분포인 $\mathbb{p}(\theta)$를 추정하고자 한다. 그래서 $\theta$를 파라미터로 하는 어떤 데이터 분포 $y|\theta$로부터 $y_1,…y_k$를 샘플링했다. 이를 바탕으로 $\theta$의 prior $p(\theta)$를 설정하고, 데이터로 posterior $p(\theta|y_1,…y_k)$를 계산해서 $\mathbb{p}(\theta)$에 대한 베이지안 추론을 하고자 한다. 그런데, posterior인 $p(\theta|y_1,…,y_k)$를 계산하는게 매우 어렵거나 불가능한 경우가 있다. 이때, posterior 분포 $p(\theta|y_1,…,y_k)$를 추정하기 위한 방법으로 MCMC가 사용될 수 있다.</p><h3 id="MCMC"><a href="#MCMC" class="headerlink" title="MCMC"></a>MCMC</h3><p>MCMC는 posterior의 분포 $p(\theta|y_1,…y_k)$를 추정하기 위해 마치 이 posterior로부터 샘플링됬을 법한 샘플 $\theta^<em>_1,…,\theta^</em>_m$을 생성해 준다. 이들은 posterior로부터 샘플링 되었을 거라고 가정하고 posterior를 monte carlo estimation으로 추정한다.</p><p>MCMC의 알고리즘으로 여러 개가 있다고 하는데, 대표적으로 Metropolis-Hastings 알고리즘이 있다.</p><h2 id="Matropolis-Hastings-Algorithms"><a href="#Matropolis-Hastings-Algorithms" class="headerlink" title="Matropolis-Hastings Algorithms"></a>Matropolis-Hastings Algorithms</h2><p>알고리즘은 다음과 같다.</p><ol><li><p>시작하기에 앞서 posterior $p(\theta|y_1,…,y_k)$를 정확히 계산할 수는 없더라도, 이 posterior에 비례하는 어떤 함수는 알고 있어야 한다. 즉, 다음을 만족하는 $g(\theta)$는 알고 있어야 한다.<br>$$<br>p(\theta|y_1,…,y_k) \propto g(\theta)<br>$$</p></li><li><p>$\theta$와 도메인이 같거나 최대한 비슷한 분포 아무거나 고른다. 이 분포는 마르코프 체인을 만족하면 좋다. 즉, $q(\theta^*|\theta_{i-1})$.</p></li><li><p>적당히 큰 수 $m$번을 반복하는데, $m$개의 $\theta^*$를 1개씩 샘플링할 것이다.</p><ol><li><p>$\theta^<em>$를 $q(\theta^</em>|\theta_{i-1})$로부터 1개를 샘플링한다.</p></li><li><p>다음을 계산한다.<br>$$<br>\alpha = \frac{g(\theta^<em>)q(\theta^</em>|\theta_{i-1})}{g(\theta_{i-1})q(\theta_{i-1}|\theta^*)}<br>$$</p></li><li><p>$\alpha \geq 1$이면, $\theta_i \leftarrow \theta<em>$로 accept한다. $0 \leq \alpha &lt; 1$이면, $\alpha$의 확률로 $\theta_i \leftarrow \theta^</em>$로 accept하고, reject되면 $\theta_i \leftarrow \theta_{i-1}$한다.</p></li></ol></li></ol><p>분자에 $g(\theta^*)$가 있고, 분모에 $g(\theta_{i-1})$가 있어서, 이전에 뽑은 $\theta$보다 현재 뽑은 $\theta$가 더 $p(\theta|y_1,…,y_k)$에서 확률이 높다면, $\alpha \geq 1$이 되어서 accept된다. $g$가 $p$에 비례하기 때문에 그렇다.</p><p>이렇게 뽑은 $\theta^*$는 초반 샘플링된 놈들을 제외하면, posterior $p(\theta|y_1,…,y_k)$에서 샘플링된 것처럼 역할을 할 수 있다. 분포로부터 샘플링된 놈이 있으므로 posterior에 대해 monte carlo estimation이 가능해진다.</p><h2 id="Random-Walk-Algorithm"><a href="#Random-Walk-Algorithm" class="headerlink" title="Random Walk Algorithm"></a>Random Walk Algorithm</h2><p>Matropolis-hastings 알고리즘에서, proposal distribution $q(\theta^<em>|\theta_{i-1})$를 $\theta_{i-1}$을 평균으로 하는 normal distribution으로 놓은 것을 말한다. Normal distribution은 대칭 분포이기 때문에, $\alpha=\frac{g(\theta^</em>)}{g(\theta_{i-1})}$이 된다.</p><h2 id="Gibbs-Sampling"><a href="#Gibbs-Sampling" class="headerlink" title="Gibbs Sampling"></a>Gibbs Sampling</h2><p>파라미터가 여러개라면, gibbs sampling이 Metropolis-hastings 알고리즘 보다 편할 수 있다. Metropolis-hastings 알고리즘에서는 파라미터 $\theta_1, …, \theta_k$에 대해 proposal distribution을 각 파라미터마다 정의하고, accept, reject과정을 거칠 테지만, gibbs sampling과정에서는 이 과정을 없앴다. 대신 다음의 과정이 있다.</p><p>이때, parameter $\theta_1,…,\theta_k$를 모두 업데이트 1번씩 하는 과정을 1번의 iteration이라고 하자.</p><ol><li><p>일단, $p(\theta_1,…,\theta_k|y) \propto g(\theta_1,…,\theta_k)$를 만족하는 $g(\theta_1, …, \theta_k)$를 알고 있어야 한다. $p(\theta_1,…,\theta_k|y) \propto p(y|\theta_1,…,\theta_k)p(\theta_1,…,\theta_k)$를 활용.</p></li><li><p>하나의 parameter에 대한 full conditional distribution의 proportion을 계산해야 하는데, 다음과 같이 posterior 분포에 비례하므로(Bayes’ rule에 의해), $g$에 비례한다.<br>$$<br>p(\theta_i|\theta_1,…,\theta_{i-1},\theta_{i+1},…,\theta_k,y) \propto p(\theta_1,…,\theta_k|y) \propto g(\theta_1,…,\theta_k)<br>$$<br>그리고, 나머지 파라미터는 모두 주어진 것으로 가정한다. 나머지 파라미터는 초기값이거나 가장 최근에 업데이트한 값으로 들어간다.</p></li><li><p>그렇게 되면, $g$에서 $\theta_i$에 의해 parameterize되지 않는 항은 모두 constant로 취급할 수 있으며, proportion에서 제외할 수 있다. 그럼 $g$가 간소화된다.</p></li><li><p>이렇게 되면, $\theta_i$에 대한 full conditional distribution이 우리가 아는 분포, 즉 샘플링이 가능한 분포가 되는 경우가 있다. 이럴 경우, 그냥 그 분포에서 샘플링하면 되기 때문에 accept, reject과정이 필요가 없다. 하나를 샘플링하고 $\theta_i$를 업데이트한다.</p></li><li><p>파라미터 $\theta_{i+1}$에 대해 같은 과정을 반복하는데, $\theta_{1,…i}$은 이전 iteration의 값이 아니라, 현재 iteration값을 이용한다.</p></li><li><p>만약, 4번 과정에서 샘플링이 가능한 표준적인 분포가 아니라면, 그 안에서, $\theta_i$ 하나에 대해서 matropolis-hastings 알고리즘의 방식을 사용해서, 하나의 샘플을 accept 혹은 reject로 업데이트한다.</p></li><li><p>업데이트 이전 값은 어디다가 저장해두자. 그 값들이 샘플들이다.</p></li></ol><h2 id="Assessing-Convergence-of-MCMC"><a href="#Assessing-Convergence-of-MCMC" class="headerlink" title="Assessing Convergence of MCMC"></a>Assessing Convergence of MCMC</h2><p>MCMC알고리즘에서 샘플링한 샘플들 $\theta^<em>_1, …, \theta^</em>_k$의 평균값 $\bar{\theta^<em>}$이 $\theta$의 posterior 분포 $p(\theta|Y)$를 잘 추정하려면, 마르코프 체인이 충분히 수렴해야 하고, 수렴한 체인으로부터 $\theta^</em>$가 충분히 샘플링되어야 한다. 하지만, 마르코프 체인이 언제 수렴할지를 모르기 때문에 몇 개의 샘플까지가 수렴이 안된 상태의 샘플인지, 몇 개가 유용한 샘플인지 알 수가 없다.</p><h3 id="Stationary-Distribution"><a href="#Stationary-Distribution" class="headerlink" title="Stationary Distribution"></a>Stationary Distribution</h3><p>마르코프 체인이 추정하고자 하는 target distribution(parameter의 posterior가 된다)을 최대한 추정한 distribution을 의미하며, 마르코프 체인이 충분히 수렴한 상태에서의 distribution을 의미한다. 당연히 알 수 없으며, 여기서 마르코프체인으로 샘플링만 가능하다.</p><h3 id="Monte-Carlo-Effective-Sample-Size"><a href="#Monte-Carlo-Effective-Sample-Size" class="headerlink" title="Monte Carlo Effective Sample Size"></a>Monte Carlo Effective Sample Size</h3><p>진짜 Stationary distribution으로부터 독립적으로 샘플링한 샘플을 $\theta_{eff}$이라고 하자. 즉, 이들은 실제로 posterior로부터 샘플링한 샘플과 매우 유사할 것이다.</p><p>우리가 마르코프 체인으로부터 샘플링한 샘플의 개수를 $n$이라고 하자. 하지만, 수렴이 제대로 되지 않은 상태에서 뽑은 것은 독립적인 샘플일 수가 없고, 마르코프 체인이기에, 완전히 독립적이기는 어렵다. 따라서, 유용한 샘플들은 일부일 것이다.</p><p>이 $n$개의 샘플이 가지고 있는 정보가 과연 몇 개의 $\theta_{eff}$들이 가지는 정보와 같은지를 나타내는게 monte carlo effective sample size이다. 즉, $n=1000000$개의 샘플을 뽑았는데, effective sample size $n_{eff}=500$이라고 하면, 이 100만개의 샘플들은 실제로 posterior에서 500개를 샘플링한 것과 같은 정보를 가진다.</p><p>이는, 마르코프 체인이 posterior를 완전히 추정하지 못하기 때문이다. 또한, $n_{eff}$이 너무 작다면, 수렴 속도가 느린 것일수도 있다.</p><h3 id="Auto-correlation"><a href="#Auto-correlation" class="headerlink" title="Auto-correlation"></a>Auto-correlation</h3><p>마르코프 체인에서 샘플링한 한 샘플이 과거 샘플들과 얼마나 많은 dependency가 있는가를 나타낸다. [-1,1] 범위의 값을 가지며, 0에 가까울수록 그 샘플은 과거 샘플들과 관계없는, 독립적인 샘플들이다. monte carlo sample size를 증가시키려면, 이 독립적인 샘플들이 필요하다.</p><p>마르코프 체인으로부터 샘플링을 하면, 초기 몇 개의 샘플까지는 수렴이 되지 않아서 correlation이 높다. 초기 correlation이 0에 가까운 값이 되는 지점까지의 샘플은 버리는 것도 방법(<strong>burn-in 이라고 부름</strong>).</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/1567820594976.png" alt="1567820594976"></p><p>Auto-correlation이 0과 가까운 값이 적으면 effective sample size가 감소한다.</p><h3 id="Gelman-Rubin-Diagnostic"><a href="#Gelman-Rubin-Diagnostic" class="headerlink" title="Gelman-Rubin Diagnostic"></a>Gelman-Rubin Diagnostic</h3><p>마르코프 체인으로부터 샘플링한 샘플들을 주면, 실수값을 반환하는데, 1에 가가우면 수렴이 된 것이고, 1보다 많이 크면, 수렴이 아직 안된 것이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markov-Chain-Monte-Carlo&quot;&gt;&lt;a href=&quot;#Markov-Chain-Monte-Carlo&quot; class=&quot;headerlink&quot; title=&quot;Markov Chain Monte Carlo&quot;&gt;&lt;/a&gt;Markov Chain M
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Bayesian Statistics" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Bayesian-Statistics/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="BayesianStatistics" scheme="https://jaeyoung-blog.github.io/tags/BayesianStatistics/"/>
    
  </entry>
  
  <entry>
    <title>09. Monte Carlo Estimation</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/09_Monte_Carlo_Estimation/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/09_Monte_Carlo_Estimation/</id>
    <published>2020-03-01T13:08:09.000Z</published>
    <updated>2020-03-03T01:55:30.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Monte-Carlo-Estimation"><a href="#Monte-Carlo-Estimation" class="headerlink" title="Monte Carlo Estimation"></a>Monte Carlo Estimation</h1><p>쉽게 말하면, 몬테 카를로 추정법이란, 어떤 특정한 파라미터를 얻기 위해서, 파라미터의 distribution으로부터 많은 샘플링 시뮬레이션을 한 후, 그 샘플들의 평균을 계산한 것을 파라미터의 기댓값으로 추정하는 것이다.</p><p>예를 들어, 어떤 파라미터 $\theta$는 어떤 분포 $p(\theta)$를 따른다. 우리는 파라미터 $\theta$의 기댓값 $E[\theta]$를 계산하고 싶다. 이를 계산하기 위해서는 원래 $E[\theta] = \int p(\theta) \cdot \theta ~~ d\theta$를 계산해야 한다. 하지만, 이 계산은 불가능하거나 매우 힘들 수 있다.</p><p>$E[\theta]$를 계산하는 대신 추정하는 방법으로 몬테 카를로 추정법을 이용한다. 우선, 컴퓨터로 $p(\theta)$로부터 $\theta$를 많이 샘플링한다. 그리고 그들의 평균 $\bar{\theta} = \frac{1}{m}\sum_i^m \theta_i$를 계산하고 $\bar{\theta}$를 $E[\theta]$로 추정하는 것이다.</p><p>분포 $p(\theta)$로부터 높은 확률의 $\theta$가 많이 샘플링되고 낮은 확률의 $\theta$는 적게 샘플링 되었을 것이다. 따라서 이 추정법은 유효할 수 있다. 다른 방식으로 해석하면, central limit theorem에 의해 샘플평균 $\bar{\theta}$는 실제 평균인 $E[\theta]$를 평균으로 하고 $\frac{1}{m}Var[\theta]$를 분산으로 하는 normal distribution을 따른다. 특히, 샘플수가 많아질수록, 계산한 샘플평균은 실제 평균값과 매우 유사할 확률이 높다.</p><p>$h(\theta)$의 기댓값 $E[h(\theta)]$를 추정하고 싶다. 그러면, $\theta$를 많이 샘플링해서 각 샘플로 $h(\theta)$를 계산하고 평균을 내면 $E[h(\theta)]$의 추정값이 된다.</p><h3 id="Monte-Carlo-Error"><a href="#Monte-Carlo-Error" class="headerlink" title="Monte Carlo Error"></a>Monte Carlo Error</h3><p>CLT(Central Limit Theorem)에 의해 파라미터 $\theta$에 대해 모은 샘플들은 $\mathbb{N}(E[\theta],\frac{Var[\theta]}{m})$를 따른다. $Var[\theta]$는 $\theta$의 분산으로, 다음으로 대체한다.<br>$$<br>Var[\theta] = \frac{1}{m}\sum_i (\bar{\theta} - \theta_i)^2<br>$$<br>그리고, $\frac{Var[\theta]}{m}$값을 <strong>monte carlo error</strong>라고 한다. Monte carlo estimation 값($E[\theta]$의 추정값인 $\bar{\theta}$)이 진짜 $E[\theta]$로부터 어느정도로 오차가 있을지에 대한 term이라고 볼 수 있다.</p><h3 id="Monte-Carlo-Marginalization"><a href="#Monte-Carlo-Marginalization" class="headerlink" title="Monte Carlo Marginalization"></a>Monte Carlo Marginalization</h3><p>Paremter가 hierarchical하게 연결된 경우도 있다. 예를들어, 데이터 $Y$는 베르누이 분포 $\text{Bern}(\phi)$를 따르는데, 이 $\phi$가 또 베타분포 $\text{Beta}(2, 2)$를 따른다고 하자. 데이터 $Y$의 기댓값 $E[Y]$를 몬테 카를로 추정법으로 추정하기 위해서는 다음의 과정이 필요하다.</p><ol><li>$\text{Beta}(2, 2)$로부터 $\phi$를 샘플링한다.</li><li>샘플링한 $\phi$를 가지고 $Y|\phi$를 샘플링한다.</li><li>이제, ($Y,\phi$)한 쌍이 생성되었다.</li><li>반복한다.</li></ol><p>이 과정의 특징이, 샘플 ($Y,\phi$)가 자연스럽게 $P(Y,\phi)$의 joint distribution을 반영한다는 것이다.</p><p>그런데, 위에서 샘플링한 $\phi$를 그냥 무시하고 $Y$만 취하면 그게 $\phi$에 대해 marginalization한 것과 같다. 즉, prior predictive distribution을 취한 것이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Monte-Carlo-Estimation&quot;&gt;&lt;a href=&quot;#Monte-Carlo-Estimation&quot; class=&quot;headerlink&quot; title=&quot;Monte Carlo Estimation&quot;&gt;&lt;/a&gt;Monte Carlo Estimati
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Bayesian Statistics" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Bayesian-Statistics/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="BayesianStatistics" scheme="https://jaeyoung-blog.github.io/tags/BayesianStatistics/"/>
    
  </entry>
  
  <entry>
    <title>08. Bayesian Modeling</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/08_Bayesian_Modeling/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/08_Bayesian_Modeling/</id>
    <published>2020-03-01T13:08:08.000Z</published>
    <updated>2020-03-03T01:55:28.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bayesian-Modeling"><a href="#Bayesian-Modeling" class="headerlink" title="Bayesian Modeling"></a>Bayesian Modeling</h1><h2 id="Statistical-Modeling"><a href="#Statistical-Modeling" class="headerlink" title="Statistical Modeling"></a>Statistical Modeling</h2><p>Bayesian modeling은 statistical modeling의 일종이다. Statistical modeling이란, 데이터가 생성/샘플링되는 프로세스를 모델링하는 것을 의미한다.</p><p>Bayesian modeling은 이러한 모델링을 할때, 베이지안 방법론을 적용한 것을 말한다. 전체적인 모델링 프로세스는 bayesian modeling이나 frequentist modeling이나 같다.</p><ol><li>문제 이해</li><li>데이터 수집</li><li>데이터 관찰</li><li>모델 구성</li><li>모델의 구현 및 fit</li><li>샘플공간 분포 파라미터 추정</li><li>테스트 및 예측성능 검사</li><li>5~7번 반복</li><li>모델의 이용.</li></ol><p>이때, frequentist modeling과 bayesian modeling에서의 차이는 모델의 구현과 fit, 파라미터 추정에 있다.</p><h2 id="Model-Specification-모델-구성"><a href="#Model-Specification-모델-구성" class="headerlink" title="Model Specification - 모델 구성"></a>Model Specification - 모델 구성</h2><p>모델의 구성은 계층적으로 적어 내려가면서 파악하는게 어느정도 쉽다. 일단, likelihood를 적고 likelihood에 영향을 미치는 random variable 또는 parameter를 찾는다.</p><p>어느 학교의 학생들의 키(height)의 분포를 예로 들자. 키의 분포는 normal distribution을 따른다고 가정하고 likelihood를 만든다.<br>$$<br>f(y|\theta) = \mathbb{N}(\mu, \sigma^2)<br>$$<br>그리고 $\mu$, $\sigma^2$의 분포가 필요한데, 이들의 prior를 정한다.<br>$$<br>\mu \approx \mathbb{N}(\mu_0, \sigma_0^2)<br>$$<br>$$<br>\sigma^2 \approx \mathbb{IG}(\nu_0, \beta_0)<br>$$</p><p>여기서 $\mathbb{IG}$는 inverse-gamma distribution을 뜻한다. 그리고 각 prior는 독립이라고 가정하면, $p(\mu,\sigma^2) = p(\mu)p(\sigma^2)$일 것이다. 모델로 그려보면 다음과 같다.</p><p><img src="https://raw.githubusercontent.com/wayexists02/my-study-note/image/typora/image/image-20200303093449313.png" alt="image-20200303093449313"></p><p>이렇게, 우선 데이터가 어떻게 생성되었을지에 대해 그 생성 과정을 모델링하는데, likelihood부터 적고, 아래 파라미터까지 노드를 뻗어 나간다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Bayesian-Modeling&quot;&gt;&lt;a href=&quot;#Bayesian-Modeling&quot; class=&quot;headerlink&quot; title=&quot;Bayesian Modeling&quot;&gt;&lt;/a&gt;Bayesian Modeling&lt;/h1&gt;&lt;h2 id=&quot;Stati
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Bayesian Statistics" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Bayesian-Statistics/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="BayesianStatistics" scheme="https://jaeyoung-blog.github.io/tags/BayesianStatistics/"/>
    
  </entry>
  
  <entry>
    <title>07. Priors</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/07_Priors/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/07_Priors/</id>
    <published>2020-03-01T12:08:07.000Z</published>
    <updated>2020-03-03T01:55:25.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Priors"><a href="#Priors" class="headerlink" title="Priors"></a>Priors</h1><p>Prior를 어떤 분포로 선택할지에 대해서는 conjugatation을 고려해야 한다. prior으로 선택한 distribution이 likelihood와 곱해져서 posterior가 되었을 때도 그 distribution이 되어야 한다는 의미이다.</p><h2 id="Effective-Sample-Size"><a href="#Effective-Sample-Size" class="headerlink" title="Effective Sample Size"></a>Effective Sample Size</h2><p>Effective sample size란, 설정한 prior의 영향이 posterior에 영향을 50%만 미치는 순간의 샘플 개수를 말한다. 샘플 개수가 적으면 prior는 posterior에 영향을 많이 미칠 테지만, effective sample size이상의 샘플을 모은다면, prior가 posterior에 미치는 영향이 50% 이내일 것이다.</p><h2 id="Priors-in-Binomial-Likelihood"><a href="#Priors-in-Binomial-Likelihood" class="headerlink" title="Priors in Binomial Likelihood"></a>Priors in Binomial Likelihood</h2><p>예를들어, binomial distribution으로 likelihood를 모델링하는 경우, 즉, 제품 생산과정에서 불량의 빈도수 같은 경우는 prior를 beta distribution으로 불량일 확률 $\theta$를 모델링한다.</p><p>이때, beta distribution의 parameter $\alpha$와 $\beta$를 어떻게 정해야 할까, beta distribution의 평균은 $\frac{\alpha}{\alpha+\beta}$라는 것을 기억한다. 만약, 우리가 0.3%확률로 불량이 나올 것이라고 믿는다면, $\frac{\alpha}{\alpha + \beta}=0.3$이 되게끔 정하면 된다. 다만, 이러면 경우의 수가 많은데, $\alpha$와 $\beta$값이 커지면 그 믿음에 자신감이 있는 것이다.</p><p>30%의 확률로 불량이 있다고 생각해서 불량률 $\theta$에 대해 $\theta \approx \text{beta}(6, 14)$으로 prior를 설정했다고 하자. 그리고 10번의 생산 후 6개의 불량이 나왔다. 이때, $\theta$의 posterior는 $\text{beta}(6+6, 14+4) = \text{beta}(12, 18)$이 된다. <strong>$\alpha$는 불량인 것의 개수와 관련있고, $\beta$는 불량이 아닌 것과 관련이 있는 것이다.</strong> 실제로 계산해봐도 그렇다.<br>$$<br>P(\theta) = \frac{\Gamma(6 + 20)}{\Gamma(6)\Gamma(14)}\theta^{6-1}(1-\theta)^{14 - 1}<br>$$<br>$$<br>P(X|\theta) = \begin{pmatrix} 10 \ 6 \end{pmatrix}\theta^6(1-\theta)^4<br>$$</p><p>$$<br>P(\theta|X) = P(X|\theta)P(\theta) = \frac{25!10!}{5!19!6!4!}\theta^{12-1}(1-\theta)^{18-1}<br>$$</p><p>$$<br>P(\theta|X) \propto \text{beta}(12, 18)<br>$$</p><p>앞의 상수들은 다 상수일 뿐. 어쨌든 beta distribution에 근사된다.</p><h3 id="Effective-Sample-Size-1"><a href="#Effective-Sample-Size-1" class="headerlink" title="Effective Sample Size"></a>Effective Sample Size</h3><p>Binomial likelihood에서 beta distribution을 $\theta$의 prior로 했을 경우, effective sample size는 $\alpha+\beta$가 된다.</p><p>Posterior는 다음과 같다.<br>$$<br>\text{Posterior}(\theta|X) = \text{Beta}(\alpha+\sum_i^n x_i, \beta + n - \sum_i^n x_i)\<br>$$<br>이때, posterior mean은 $\frac{\alpha + \sum_i^n x_i}{\alpha + \beta + n}$인데, 이를 더 decompose해보면, 다음 식이 나온다.<br>$$<br>\frac{\alpha + \sum_i^n x_i}{\alpha + \beta + n} = \frac{\alpha + \beta}{\alpha + \beta + n} \cdot \frac{\alpha}{\alpha + \beta} + \frac{n}{\alpha + \beta + n} \cdot \frac{\sum_i^n x_i}{n}<br>$$<br>이것은 prior mean과 data mean과의 weighted sum으로 해석할 수 있다. 즉, posterior mean은 prior mean과 data mean에 의해 영향을 받는다. 그런데, 이때, 샘플 개수 $n$이 작으면, prior의 영향력이 커진다. 반면, $n$이 커지면, data의 영향력이 커진다. $n \geq \alpha+\beta$ 일때, prior보다 데이터의 영향력이 커진다. 따라서, effective sample size는 $\alpha + \beta$이다.</p><p>Prior를 정의할때, $\alpha, \beta$를 크게 잡던, 작게 잡던, $\alpha$와 $\alpha+\beta$의 비율이 같으면, prior mean은 같지만, 값들이 크면, prior의 영향력이 강해지기 때문에 sample 개수를 많이 모아야 한다.</p><h2 id="Priors-in-Poisson-Distribution"><a href="#Priors-in-Poisson-Distribution" class="headerlink" title="Priors in Poisson Distribution"></a>Priors in Poisson Distribution</h2><p>Poisson distribution을 likelihood로 취하는 experiment에 대해서는 parameter가 $\lambda$가 된다. 즉, $\lambda$에 대한 prior가 필요한데, 이때는 Gamma distribution으로 $\lambda$의 prior를 모델링한다. Poisson distribution으로 likelihood를 모델링 할 수 있는 경우, Gamma distribution이 conjugate한 distribution이다.</p><p>이때, Gamma distribution의 두 파라미터 $\alpha$와 $\beta$를 정할때, gamma distribution의 평균은 $\frac{\alpha}{\beta}$인 것을 생각하자. <strong><del>$\alpha$는 event 발생 횟수, $\beta$는 총 시행 횟수와 관련이 있다.</del></strong></p><p>이때, poisson이므로, 1번의 시행에서 event가 여러번 발생할 수 있다. 특정 시간 안에 몇 번의 버스가 오는가?</p><h3 id="Effective-Sample-Size-2"><a href="#Effective-Sample-Size-2" class="headerlink" title="Effective Sample Size"></a>Effective Sample Size</h3><p>Beta distribution을 prior로 삼고, posterior도 역시 beta distribution이기 때문에, effective sample size는 $\alpha+\beta$이다.</p><h2 id="Priors-in-Exponential-Distribution"><a href="#Priors-in-Exponential-Distribution" class="headerlink" title="Priors in Exponential Distribution"></a>Priors in Exponential Distribution</h2><p>Exponential distribution도 역시 $\lambda$를 파라미터로 하며, gamma distribution을 prior로 하면 conjugate인 prior를 만들 수 있다.</p><h3 id="Effective-Sample-Size-3"><a href="#Effective-Sample-Size-3" class="headerlink" title="Effective Sample Size"></a>Effective Sample Size</h3><p>Gamma prior로 conjugate인 likelihood의 경우, posterior도 gamma distribution이다. 이런 경우, effective sample size는 $\beta$이다.<br>$$<br>\text{Posterior}(\lambda|X) = \text{Gamma}(\alpha + \sum_i^n x_i, \beta + n)<br>$$</p><p>$$<br>\text{mean}(posterior) = \frac{\alpha + \sum_i^n x_i}{\beta + n}<br>$$</p><p>$$<br>\frac{\alpha + \sum_i^n x_i}{\beta + n} = \frac{\beta}{\beta + n} \cdot \frac{\alpha}{\beta} + \frac{n}{\beta + n} \cdot \frac{\sum_i^n x_i}{n}<br>$$</p><h2 id="Priors-in-Normal-Distribution"><a href="#Priors-in-Normal-Distribution" class="headerlink" title="Priors in Normal Distribution"></a>Priors in Normal Distribution</h2><p>Normal distribution의 파라미터 $\mu$는 $\sigma$에 의존함과 동시에 normal distribution prior에서 conjugate한다. $\sigma$는 주어젔다고 가정하는 경우가 많으며, 그렇지 않을 경우, inverse-gamma distribution에서 conjugate한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Priors&quot;&gt;&lt;a href=&quot;#Priors&quot; class=&quot;headerlink&quot; title=&quot;Priors&quot;&gt;&lt;/a&gt;Priors&lt;/h1&gt;&lt;p&gt;Prior를 어떤 분포로 선택할지에 대해서는 conjugatation을 고려해야 한다. prior
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Bayesian Statistics" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Bayesian-Statistics/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="BayesianStatistics" scheme="https://jaeyoung-blog.github.io/tags/BayesianStatistics/"/>
    
  </entry>
  
  <entry>
    <title>06. Prior Predictive Distribution</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/06_Prior_Posterior_predictive/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/06_Prior_Posterior_predictive/</id>
    <published>2020-03-01T12:08:06.000Z</published>
    <updated>2020-03-03T01:55:23.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prior-Predictive-Distribution"><a href="#Prior-Predictive-Distribution" class="headerlink" title="Prior Predictive Distribution"></a>Prior Predictive Distribution</h1><p>Prior정보만으로, 즉, 데이터 없이 데이터가 어떻게 분포할지,즉 $p(D)$를 추정해본 분포이다.</p><p>데이터 분포 $p(D)$는 다음과 같이 쓸 수 있다.<br>$$<br>p(d) = \int_0^1 p(d|\theta)p(\theta) ~d\theta<br>$$<br>이때, 데이터 없이 사전 정보만으로 $p(D)$를 추정하는데, 사전정보로 추정한 데이터 분포 $p(D)$를 추정한 것을 prior predictive distribution이라고 부른다.</p><p>Prior predictive distribution은 데이터 수집 전에, prior정보만을 이용해서 데이터 sample space distribution을 추정한 것이라고 할 수 있다.</p><h1 id="Posterior-Predictive-Distribution"><a href="#Posterior-Predictive-Distribution" class="headerlink" title="Posterior Predictive Distribution"></a>Posterior Predictive Distribution</h1><p>데이터를 수집한 후, 데이터의 분포를 추정한 분포를 말한다.</p><p>데이터 $d_1$를 수집했다고 치자. 그럼 다음에 샘플링될 $d_2$의 확률분포는 다음과 같다.<br>$$<br>p(d_2|d_1) = \int_0^1 p(d_2|d_1,\theta)p(\theta|d_1)d\theta<br>$$<br>이때, $d_1 \perp d_2$이므로, 다음과 같다.<br>$$<br>p(d_2|d_1) = \int_0^1 p(d_2|\theta)p(\theta|d_1)d\theta<br>$$<br>Prior predictive distribution과 다른 점은 prior 자리에 posterior가 들어갔다는 점이다.</p><p>Posterior predictive distribution은 데이터를 관찰한 후, 그 정보를 이용해서 데이터 sample space 분포를 추정한 것이라고 할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prior-Predictive-Distribution&quot;&gt;&lt;a href=&quot;#Prior-Predictive-Distribution&quot; class=&quot;headerlink&quot; title=&quot;Prior Predictive Distribution&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Bayesian Statistics" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Bayesian-Statistics/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="BayesianStatistics" scheme="https://jaeyoung-blog.github.io/tags/BayesianStatistics/"/>
    
  </entry>
  
  <entry>
    <title>05. Credible Intervals</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/05_Credible_Intervals/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/05_Credible_Intervals/</id>
    <published>2020-03-01T12:08:05.000Z</published>
    <updated>2020-03-03T01:55:20.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Credible-Intervals"><a href="#Credible-Intervals" class="headerlink" title="Credible Intervals"></a>Credible Intervals</h1><p>Prior로 $\theta$의 distribution $p(\theta)$를 정한 후, 데이터를 이용해서 bayesian inference과정을 거쳤다고 하자. 따라서, $p(\theta|D)$를 구했다. 그리고, 이 posterior속에서 파라미터 $\theta$가 어디쯤에 위치할지, credible interval을 계산할 수 있다. 이는 frequentist statistics에서의 confidence interval과 매우 유사하지만, 다음의 차이점이 있다.</p><ol><li>Confidence interval은 $\theta$는 고정되어 있고 bound 경계가 random variable이다. 반면, credible interval에서는 $\theta$가 random variable이고 bound가 고정된 값이다.<ul><li>confidence interval은 이 구간 사이에 모 파라미터 $\theta$가 있을 것이라는 자신감이 있을 뿐, $\theta$가 그 구간에 위치할 확률이 p-value가 되는 것이 아니다. Frequentist statistics에서는 $\theta$는 고정되어 있고 변하지 않는다. </li><li>반면, credible interval은 그 구간 내에 $\theta$가 있을 확률을 의미한다.</li></ul></li></ol><p>Posterior를 충분한 데이터로 구했다면, 사전 지식과 합쳐서 credible interval을 계산하고 $\theta$가 어느 범위에 있을 확률을 구하는 것이다.</p><h3 id="Equal-Tailed-Interval"><a href="#Equal-Tailed-Interval" class="headerlink" title="Equal-Tailed Interval"></a>Equal-Tailed Interval</h3><p>95%의 credible interval을 구하고 싶다면, 한쪽 끝에서 2.5%의 bound를 계산하고 다른 한 쪽 끝에서 2.5%의 bound를 계산한다. 그리고 그 사이가 equal tailed interval이 된다.</p><h3 id="Highest-Posterior-Density"><a href="#Highest-Posterior-Density" class="headerlink" title="Highest Posterior Density"></a>Highest Posterior Density</h3><p>양쪽 끝을 같은 확률로 자르지말고, 확률이 높은 구간을 최대한 포함하자는 것이다. 만약, $p(\theta|D) = 2\theta$의 경우, 오른쪽 꼬리는 매우 확률이 높은 구간인데, 자르기 아깝다는 것이다. 따라서 확률이 낮은 왼쪽 꼬리만 잘라서 interval을 구한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Credible-Intervals&quot;&gt;&lt;a href=&quot;#Credible-Intervals&quot; class=&quot;headerlink&quot; title=&quot;Credible Intervals&quot;&gt;&lt;/a&gt;Credible Intervals&lt;/h1&gt;&lt;p&gt;Prior로
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Bayesian Statistics" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Bayesian-Statistics/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="BayesianStatistics" scheme="https://jaeyoung-blog.github.io/tags/BayesianStatistics/"/>
    
  </entry>
  
  <entry>
    <title>04. Bayesian Inference</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/04_Bayesian_inference/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/04_Bayesian_inference/</id>
    <published>2020-03-01T12:08:04.000Z</published>
    <updated>2020-03-03T01:55:16.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bayesian-Inference"><a href="#Bayesian-Inference" class="headerlink" title="Bayesian Inference"></a>Bayesian Inference</h1><p>우리가 추정하고자 하는 parameter $\theta$에 대해 $\theta$가 어떻게 분포되어있는지 사전 지식 또는 정보가 있다면 그것을 이용하는게 좋을 것이다. 하지만, frequentist inference에서는 사전 정보를 이용하기 어렵다.</p><p>사전 정보를 이용해서 $p(\theta)$를 초기화한후(prior), 데이터를 수집하면서 얻은 정보(posterior)를 이용해서 $p(\theta)$분포를 $p(\theta|D)$로 업데이트한다. 이렇게 $p(\theta)$을 추정해 가는 방식을 <strong>bayesian inference</strong>라고 한다. 그리고, 얻은 데이터를 바탕으로 $p(\theta|D)$를 최대화하는 $\hat{\theta}$를 선택하는 것을 <strong>Maximize A Posterior(MAP)</strong> 추정이라고 한다.</p><p>즉, 다음과 같다.<br>$$<br>\hat{\theta} = argmax_{\theta} ~p(\theta|D)<br>$$</p><p>개와 고양이를 판별하는 classifier를 만든다고 치자. 역시 $\theta \in {개, 고양이}$이고, 사진을 주고 bayesian inference로 개인지, 고양이인지 판단을 한다고 하면,  사진처럼 생겼을 경우 개일 확률과 사진처럼 생겼을 경우 고양이일 확률을 비교한다. 사진처럼 생겼을때, 고양이일 확률이 개일 확률보다 높으면 고양이라고 추정하는 방식이 MAP이다.</p><p>그런데, $p(\theta|D)$는 다음과 같이 계산한다.<br>$$<br>p(\theta|D) = \frac{p(D|\theta)p(\theta)}{\sum_ip(D|\theta_i)p(\theta_i)}<br>$$<br>즉, 사후확률 $p(\theta|D)$는 관찰된 데이터의 likelihood $p(D|\theta)$와 사전확률 $p(\theta)$을 이용해서 계산된다. 그리고 계산된 사후확률 $p(\theta|D)$를 이용해서 $p(\theta)$를 업데이트한다(단순 대입, $p(\theta) \leftarrow p(\theta|D)$). 이렇게 데이터를 모은 정보를 바탕으로 prior를 posterior로 업데이트 해 가면서 $\theta$에 대한 분포 $p(\theta)$를 추정해 나가는 방식을 bayesian inference라고 한다.</p><p>주의할 점은 prior $p(\theta)$를 어느 특정 지점에서 0 또는 1로 설정하면, posterior에서도 그 지점은 0 또는 1이 된다. 따라서 왠만하면 0 또는 1을 어떤 지점에 할당하지 않도록 한다.<br>$$<br>p(\theta|D) \propto p(D|\theta)p(\theta) = p(\theta)<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Bayesian-Inference&quot;&gt;&lt;a href=&quot;#Bayesian-Inference&quot; class=&quot;headerlink&quot; title=&quot;Bayesian Inference&quot;&gt;&lt;/a&gt;Bayesian Inference&lt;/h1&gt;&lt;p&gt;우리가 추정
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Bayesian Statistics" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Bayesian-Statistics/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="BayesianStatistics" scheme="https://jaeyoung-blog.github.io/tags/BayesianStatistics/"/>
    
  </entry>
  
  <entry>
    <title>03. Frequentist Inference</title>
    <link href="https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/03_Frequentist_inference/"/>
    <id>https://jaeyoung-blog.github.io/wiki/studynotes/bayesian-statistics/03_Frequentist_inference/</id>
    <published>2020-03-01T12:08:02.000Z</published>
    <updated>2020-03-03T01:55:11.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Frequentist-Inference"><a href="#Frequentist-Inference" class="headerlink" title="Frequentist Inference"></a>Frequentist Inference</h1><p>Frequentist statistics에서는 sample space의 분포 파라미터 $\theta$를 추정할 때, 다음과 같은 방법으로 추론할 수 있다.</p><ol><li>일단 데이터를 많이 모은다. $X_1 = d_1, X_2 = d_2, …, X_n=d_n$</li><li>Central limit theorem을 이용해서 데이터의 평균치 또는 합을 계산한다. $\bar{X} = \frac{1}{n}\sum\limits_i X_i$</li><li>이 평균치는 $\theta$에 대한 함수일 것이고(애초에 $X_i$가 $\theta$에 대한 함수임) 이 평균치는 $\mathbb{N}(\bar{X}, \frac{\sigma}{\sqrt{n}})$의 분포를 이룬다. (합의 경우는 $\mathbb{N}(n\bar{X},\sigma)$)</li><li>이 분포에 대해 confidence interval을 계산하고, $\bar{X}$주위 그 interval 안에 해당 confidence ($p-value$) 의 자신감으로, 진짜 $\mu$가 있다고 가정한다.</li></ol><p>주의할 점은, $p-value$는 $\mu$가 그 confidence의 확률로 interval안에 있다는 것이 아니다. $\mu$는 고정되어 있는 값이라서 그 interval 안에 있을 확률은 0 아니면 1이다. 다만, $\mu$가 거기에 있을 것이라는 95%($p-value=95$)의 자신감이 있을 뿐이다.</p><h2 id="Confidence-Interval"><a href="#Confidence-Interval" class="headerlink" title="Confidence Interval"></a>Confidence Interval</h2><p>동전던지기 시행에서 앞면이 나올 확률 $p$를 알고 싶다.</p><p>100번 던져본다. 각 시행은 $X_i$이다. 이때, 100번의 시행을 모두 더한 random variable $Y=\sum\limits_i X_i$를 정의한다. 그럼 $Y$는 다음의 분포를 따른다.<br>$$<br>Y \approx \mathbb{N}(100p, 100p(1-p))<br>$$<br>$Y = \frac{1}{n} \sum\limits_i X_i$라고 정의했다면, $Y \approx \mathbb{N}(p, \frac{p(1-p)}{\sqrt{n}})$가 되겠다.</p><p>어쨌든, 55번의 H, 45번의 T이 나왔다면, frequentist statistics의 확률 정의에 의해 $\hat{p}=0.55$이고 이 추정치는 95%, 97%, 99% confidence interval로 어느정도 true $p$에 가깝다고 확신을 내릴 수 있다. 95%를 예로 들면,<br>$$<br>55 - 1.96 * 100 * 0.55 * 0.45 \leq 100p \leq 55 + 1.96 * 100 * 0.55 * 0.45<br>$$<br>로 $100p$에 대한 confidence interval을 계산할 수 있다.</p><h2 id="Maximum-Likelihood-Estimation"><a href="#Maximum-Likelihood-Estimation" class="headerlink" title="Maximum Likelihood Estimation"></a>Maximum Likelihood Estimation</h2><p>데이터를 확률분포 $p(\mathbb{D}|\theta)$로부터 샘플링했을 때, 가지고 있는 데이터가 샘플링 됬을 확률을 $p(D|\theta)$라고 표현한다면, 이를 liklihood라고 한다. 이 likelihood를 최대화하는 파라미터 $\theta$를 찾으면, 즉, likelihood를 최대화하는 분포를 구하면, 그것이 sample space분포인 $p(\mathbb{D}|\theta)$와 매우 유사할 것이라는 것이라고 가정한다. 따라서 likelihood를 최대화하는 파라미터 $\theta$를 찾고, 나아가 sample space distribution을 추정하는 방법을 MLE(Maximum likelihood estimation)라고 부른다.</p><p>Likelihood를 최대화하는 $\hat{\theta}$를 구하는데 이용하는 방법은 미분하고 derivatives를 0으로 하는 $\theta$를 구하는 것이다. 즉, 극점을 구하는 것이다.</p><p>예를 들어, 동전이 fair한지, loaded인지 구하려고 한다. 만약, fair한 동전이라면 앞 뒷면이 나올 확률은 0.5로 같다. loaded 동전이라면 앞면이 나올 확률은 0.7, 뒷면이 나올 확률은 0.3이라고 하자.</p><p>동전을 다섯 번 던져서 5개의 데이터를 얻었다. 이때, 2번은 앞면, 3번은 뒷면이 나왔다.</p><p>이때, liklihood는 동전이 fair일때와, loaded일때에 대해서 각각 구할 수 있다.<br>$$<br>p(D|\theta) = \begin{cases} \begin{pmatrix} 5 \ 2 \end{pmatrix} * 0.5^5 &amp; \text{if } \theta \text{ is fair} \ \begin{pmatrix} 5 \ 2 \end{pmatrix} * 0.7^2 * 0.3^2 &amp; \text{if } \theta \text{ is loaded} \end{cases}<br>$$<br>결과를 구해보면, $\theta$가 fair일때의 $p(D|\theta)$가 더 높다는 것을 알 수 있다. 즉, $\theta$가 fair일때, likelihood가 더 높다. 따라서 MLE에 의해 likelihood가 최대화되는 $\theta=\text{fair}$ 이라고 추정할 수 있다.</p><p>그런데, 동전은 물리적인 물체이므로 데이터가 주어졌을 때의 동전이 fair할 확률 $p(\theta=\text{fair}|D)$은 $p(\theta=\text{fair})$와 같다. 동전이 fair한지 안하는지는 변하지 않는 것이고 데이터셋과 상관없이 결정된 것이기 때문이다. 따라서 다음과 같다.<br>$$<br>p(\theta=\text{fair}|D) = p(\theta=\text{fair}) \in {0, 1}<br>$$</p><p>즉, frequentist inference는 다음과 같이 정리할 수 있다.<br>$$<br>\hat{\theta} = argmax_{\theta} ~p(D|\theta)<br>$$</p><p>다른 예시로, 개와 고양이를 구분하는 classifier를 구현하고 싶다고 하자. MLE 방법에서는 $\theta \in {개, 고양이}$이고, 사진을 보여주고 frequentist inference를 한다고 하자. 만약, 개라면 사진처럼 생겼을 확률과 고양이라면 사진처럼 생겼을 확률을 비교하고, 개라면 사진처럼 생겼을 확률이 높으면 개라고 판단하고, 고양이라면 사진처럼 생겼을 확률이 높다면 고양이로 판단한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Frequentist-Inference&quot;&gt;&lt;a href=&quot;#Frequentist-Inference&quot; class=&quot;headerlink&quot; title=&quot;Frequentist Inference&quot;&gt;&lt;/a&gt;Frequentist Inference&lt;/
      
    
    </summary>
    
      <category term="Study Notes" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/"/>
    
      <category term="Bayesian Statistics" scheme="https://jaeyoung-blog.github.io/categories/Study-Notes/Bayesian-Statistics/"/>
    
    
      <category term="StudyNotes" scheme="https://jaeyoung-blog.github.io/tags/StudyNotes/"/>
    
      <category term="BayesianStatistics" scheme="https://jaeyoung-blog.github.io/tags/BayesianStatistics/"/>
    
  </entry>
  
</feed>
